<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The stuff I do</title>
  <subtitle>statox&#39;s blog</subtitle>
  <link href="https://www.statox.fr/feed.xml" rel="self"/>
  <link href="https://www.statox.fr/"/>
  <updated>2020-07-04T00:00:00-00:00</updated>
  <id>https://www.statox.fr/</id>
  <author>
    <name>statox</name>
  </author>
  
  <entry>
    <title>How to debug a mapping before asking for help on the internet</title>
    <link href="https://www.statox.fr/posts/vim/vim_debug_mapping/"/>
    <updated>2016-05-10T00:00:00-00:00</updated>
    <id>https://www.statox.fr/posts/vim/vim_debug_mapping/</id>
    <content type="html">&lt;p&gt;After participating on &lt;a href=&quot;https://vi.stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vi.stackexchange&lt;/a&gt; for a few years as well as lurking &lt;a href=&quot;https://reddit.com/r/vim&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;/r/vim&lt;/a&gt; I noticed that creating mappings in Vim is not completely trivial for a new user.&lt;/p&gt;
&lt;p&gt;As Vim has been my favorite text editor since around 2015 I really enjoy helping new users getting more comfortable with it and creating their config just the way they want. That&#39;s why I read and answered quite a few questions about Vim mappings. Eventually, I noticed some recurring patterns and decided that I wanted to address the most common errors. To do so I wrote a generic question on vi.stackexchange and tried to explain the root causes of the most common issues when one creates a mapping in vim.&lt;/p&gt;
&lt;p&gt;It was fun to write but it is also pretty satisfying to see that this is my most read and upvoted answer! I believe that as long as new people will learn to use Vim these issues will still need to be addressed and I hope that what this post will do.&lt;/p&gt;
&lt;p&gt;I think in the future I&#39;ll try to make an actual blog post about that maybe digging on more exotic edge cases.&lt;/p&gt;
&lt;p&gt;But for now, this is a link I have sent to a lot a new vimmers and it seems to have been helpful to some of them: &lt;a href=&quot;https://vi.stackexchange.com/q/7722/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How to debug a mapping?&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>GOD.vim - The easiest way to quote Vim&#39;s help</title>
    <link href="https://www.statox.fr/posts/vim/GOD_vim/"/>
    <updated>2017-02-01T00:00:00-00:00</updated>
    <id>https://www.statox.fr/posts/vim/GOD_vim/</id>
    <content type="html">&lt;h3&gt;I love to Quote the doc&lt;/h3&gt;
&lt;p&gt;I often participate on the &lt;a href=&quot;https://vi.stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vi.stackexchange&lt;/a&gt; website because this community really helped me to get going with Vim when I first started using it and because it feels great to be able to help new vimmers.&lt;/p&gt;
&lt;p&gt;When I write an answer I always try to think about how I can not only help the user to achieve what they want to do, but more importantly how I can help them to answer their own question next time they have one. And the best way to do that is to help them getting comfortable with the help.&lt;/p&gt;
&lt;p&gt;Indeed Vim has an amazing built-in help system accessible directly from the editor itself using the command &lt;code&gt;:h&lt;/code&gt;. So whenever I write my answers I do my best to add these help topics. And I also like to add a link to one of the several online version of the help&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vimdoc.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://vimdoc.sourceforge.net/&lt;/a&gt; That I used at first but the anchoring of the topics were not always deterministic so it was to practical to use.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vimhelp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://vimhelp.org/&lt;/a&gt; Which I currently use.&lt;/li&gt;
&lt;li&gt;And even &lt;a href=&quot;https://neovim.io/doc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://neovim.io/doc&lt;/a&gt; for neovim users.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;But it&#39;s painful&lt;/h3&gt;
&lt;p&gt;For a long time I just wrote the help command like &lt;code&gt;:h autocmd-events&lt;/code&gt; in my answers but this was not convenient:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First I have to do my own research, like any vimmer would do.&lt;/li&gt;
&lt;li&gt;Then I&#39;d have to copy the help topic to my clipboard&lt;/li&gt;
&lt;li&gt;In the web interface I have to type my redundant &lt;code&gt;:h &lt;/code&gt; and add the help topic.&lt;/li&gt;
&lt;li&gt;Then because I think new users are more inclined to read the doc if it is available under their mouth I look for the topic on an online version of the help&lt;/li&gt;
&lt;li&gt;Finally I can update my markdown with the right link&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After doing that for a few months and feeling the pain I started creating a short hack in my &lt;code&gt;.vimrc&lt;/code&gt; to improve this workflow, until the day I read &lt;a href=&quot;https://vi.stackexchange.com/q/4346/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How can I quickly convert a Vim help tag to a vimhelp.appspot.com link?&lt;/a&gt;. This question confirmed that this action was a pain point for other people and that pushed me to create a proper plugin.&lt;/p&gt;
&lt;h3&gt;So let&#39;s create a plugin!&lt;/h3&gt;
&lt;p&gt;So I created &lt;a href=&quot;https://github.com/statox/GOD.vim&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GOD.vim&lt;/a&gt; this is a very simple plugin which goal is to easily get a markdown expression describing a help topic and linking to its online version. The plugin does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new command &lt;code&gt;:GOD&lt;/code&gt; which takes the exact same parameter as &lt;code&gt;:h&lt;/code&gt;. The behavior is completely duplicated thanks to &lt;a href=&quot;http://vimhelp.appspot.com/map.txt.html#%3Acommand-nargs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h :command-nargs&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://vimhelp.appspot.com/map.txt.html#%3Acommand-complete&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h :command-complete&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;https://github.com/statox/GOD.vim/blob/bed2a6fe9458284760d6fb5f08495e6579ce69dd/plugin/GOD.vim#L16&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;how I create the command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;On the help page, parse the help topics and get the first one and use that to build a URL to the relevant help website.&lt;/li&gt;
&lt;li&gt;Use this URL to generate a markdown template&lt;/li&gt;
&lt;li&gt;Copy this template to the clipboard.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also added some additional features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being able to link either to the vim help or the neovim help using respectively &lt;code&gt;:GOD&lt;/code&gt; and &lt;code&gt;:NGOD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Being able to have a nicely formatted markdown list if several help topics are given as parameters to the command.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think the most part about writing this plugin was to create a pure vimscript encoding function to handle the URLs with the help of great developers from the &lt;a href=&quot;https://vi.stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vi.stackexchange&lt;/a&gt; community, namely &lt;a href=&quot;https://github.com/LucHermitte&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Luc Hermitte&lt;/a&gt; and &lt;a href=&quot;https://www.arp242.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Martin Tournoij&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And of course it is always a great satisfaction to create a tool that you still continue to use several years after you first needed it. The sources of the plugin and its documentation are &lt;a href=&quot;https://github.com/statox/GOD.vim&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Github&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Changing my Vim colorscheme depending on the time of the day</title>
    <link href="https://www.statox.fr/posts/vim/vim_colorscheme_changer/"/>
    <updated>2017-09-22T00:00:00-00:00</updated>
    <id>https://www.statox.fr/posts/vim/vim_colorscheme_changer/</id>
    <content type="html">&lt;h3&gt;Automatic colorscheme changer&lt;/h3&gt;
&lt;p&gt;A few years ago, &lt;a href=&quot;https://vi.stackexchange.com/q/13660/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a question on vi.stackexchange&lt;/a&gt; caught my attention. @oarfish wanted a way to change their colorscheme depending on the time of the day.&lt;/p&gt;
&lt;p&gt;In a world where Apple has a tool by default on most of its devices to change the colorscheme from dark to light during the day and where a lot of developpers use extensively &lt;a href=&quot;https://justgetflux.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;f.lux&lt;/a&gt; or &lt;a href=&quot;http://jonls.dk/redshift/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;redshift&lt;/a&gt; it does make sense to be able to change your favorite text editor colorscheme automatically too.&lt;/p&gt;
&lt;p&gt;To add this feature I made a very simple plugin which takes for variables as its configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g:dayTime&lt;/code&gt; and &lt;code&gt;g:nightTime&lt;/code&gt; which are two arrays used to describe when in the plugin should switch the colorscheme in the morning and in the evening.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g:dayColorscheme&lt;/code&gt; and &lt;code&gt;g:nightColorscheme&lt;/code&gt; which are the names of the colorschemes to use for each time of the day.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source code is on &lt;a href=&quot;https://github.com/statox/colorscheme-changer.vim&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This plugin leverages the timer function of Vim &amp;gt;8 and neovim (See &lt;a href=&quot;http://vimhelp.appspot.com/eval.txt.html#timers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h timers&lt;/code&gt;&lt;/a&gt;) to regularly check the current system hour, compare it to the configurations of the plugin and call &lt;code&gt;:colorscheme&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;p&gt;This was interesting to create this plugin because I didn&#39;t have an opportunity to play with Vim&#39;s timers before. However after a few days of use I realized that I actually like my colorscheme and I don&#39;t want to change it during the day. So I soon stopped using this plugin but this gave me another idea.&lt;/p&gt;
&lt;h3&gt;Event based colorscheme changer&lt;/h3&gt;
&lt;p&gt;I noticed that my main pain point related to my colorscheme was when I switch vim to the diff mode using &lt;a href=&quot;http://vimhelp.appspot.com/diff.txt.html#%3Adiffthis&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h :diffthis&lt;/code&gt;&lt;/a&gt;. I realized that my current colorscheme didn&#39;t do as well as the previous one in diff mode. So I came up with a pretty simple trick in my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Color configuration&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;&quot; Define the default colorscheme and the one used in diff mode&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;colorsDefault  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;forest-night&#39;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;colorsDiff     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jellybeans&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;&quot; Set up the default colorscheme when vimrc is sourced&lt;/span&gt;&lt;br&gt;        execute &lt;span class=&quot;token string&quot;&gt;&quot;colorscheme &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;colorsDefault&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;br&gt;        echo &lt;span class=&quot;token string&quot;&gt;&quot;Colorscheme not found&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;endtry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Diff configurations&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Easier diff commands&lt;/span&gt;&lt;br&gt;    command&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; DT execute &lt;span class=&quot;token string&quot;&gt;&quot;colorscheme &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;colorsDiff | &lt;span class=&quot;token keyword&quot;&gt;windo&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;diffthis&lt;/span&gt;&lt;br&gt;    command&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; DO execute &lt;span class=&quot;token string&quot;&gt;&quot;colorscheme &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;colorsDefault | &lt;span class=&quot;token keyword&quot;&gt;windo&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;diffoff&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea is very simple: Declare two variables holding the names of the colorschemes I want to use in normal mode and in diff mode and define some wrapper commands around diffmode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:DT&lt;/code&gt; (For &lt;code&gt;DiffThis&lt;/code&gt;) will change the colorscheme and then switch every window to diffmode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:DO&lt;/code&gt; (For &lt;code&gt;DiffOff&lt;/code&gt;) will do the opposite: Switch back to default colorscheme and stop diff mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These lines having been &lt;a href=&quot;https://github.com/statox/dotfiles/blob/7fd57caab6f7e610529b976ec45728c650a1322b/vimrc#L381-L403&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;in my &lt;code&gt;.vimrc&lt;/code&gt;&lt;/a&gt; for a few time now and so far they fit my needs. Maybe in the future I&#39;ll also explain with more details how I handle the diff mode in Vim.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A pool game with my own physic engine</title>
    <link href="https://www.statox.fr/posts/p5/p5-pool/"/>
    <updated>2019-01-10T00:00:00-00:00</updated>
    <id>https://www.statox.fr/posts/p5/p5-pool/</id>
    <content type="html">&lt;p&gt;Go grab a beer and play the pool &lt;a href=&quot;https://statox.github.io/p5-pool/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;in the demo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;And if that&#39;s your thing you can see the code &lt;a href=&quot;https://github.com/statox/p5-pool&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Pool, snooker, billiard?&lt;/h3&gt;
&lt;p&gt;I love to watch Daniel Shiffman&#39;s videos on Youtube, I can spend &lt;em&gt;hours&lt;/em&gt; binging his channel &lt;a href=&quot;https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Coding Train&lt;/a&gt; and it always gives me some inspiration for new projects.&lt;/p&gt;
&lt;p&gt;This project was specifically inspired by his playlist &lt;a href=&quot;https://www.youtube.com/playlist?list=PLRqwX-V7Uu6aFlwukCmDf0-1-uSR7mklK&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Nature of Code&lt;/a&gt; where he shows how it is possible to simulate physical models with pretty simple javascript and a bit of math.&lt;/p&gt;
&lt;p&gt;After watching some of the videos I decided that I was ready to try to do something on my own, and it was going to be a pool game! (Or a snooker, or a billiard, or whatever it is called... Basically a cue game).&lt;/p&gt;
&lt;h3&gt;A simple simulation&lt;/h3&gt;
&lt;p&gt;What do I need to do that?&lt;/p&gt;
&lt;p&gt;First of all I need a table and some balls rolling on it. This is pretty straightforward: a p5.js canvas will be my table, my balls are simple javascript objects with some coordinates, the ability to apply a force on it (i.e. incrementing the coordinates), a friction force to keep the ball from rolling for ever and some simple tests to prevent the balls from falling out of the table.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;p5&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Vector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;p5&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Vector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Add friction&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; coefficientOfFriction &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;coefficientOfFriction&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Move the ball&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Check the limits&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; coefficientOfFriction&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; coefficientOfFriction&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Easy right? With that I can apply a force to a ball (as it&#39;s velocity) and way for it to shrink over time. As a bonus I used the boundaries check to simply reverse the velocity of the ball, this is a lazy simulation of a perfectly on elastic collision. In real life some energy would be dissipated with the rebound but here, it&#39;s good enough.&lt;/p&gt;
&lt;p&gt;Let&#39;s add to that a simple function to know if a ball is colliding with another one. To do that we can simply check the distance between two balls is larger than the sum of the balls radius. I came up with something quick and dirty, but mostly dirty. Here I knew I wanted to tag all the balls part of a collision:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;isColliding&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;otherBall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Get the distance between the center of the two balls&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; otherBall&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; otherBall&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dx &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; dx &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; dy &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; dy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// The balls touch if their distance is less than the sum of their radiuses&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; minDist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; otherBall&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;distance &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; minDist&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;collided &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        otherBall&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;collided &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having this code I was able to create my pool, put balls on it, apply a force on them and change their color when they hit each other. That is cool... But now what?&lt;/p&gt;
&lt;h3&gt;A not so simple simulation&lt;/h3&gt;
&lt;p&gt;Well now is the time for the balls to bounce on each other when they touch!&lt;/p&gt;
&lt;p&gt;And this is where the project became pretty fun because I didn&#39;t want to use a full blown physics engine, so I did mine... Well I did a function which bounced two circles against each other. The code of this function is &lt;a href=&quot;https://github.com/statox/p5-pool/blob/54c4a280b4d90eb130f1c907b04f75f132f7ec93/Ball.js#L44-L115&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here on Github&lt;/a&gt;. It uses some workarounds and still has some bugs (sometimes the balls teleport away from each other when they touch, some times they get crazy and go off the tables) also it is not really elegant to read... But it works! (Kinda)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Genetic algorithms or how I made a bunch of smart robots</title>
    <link href="https://www.statox.fr/posts/p5/p5-genetic-algorithms/"/>
    <updated>2020-01-23T00:00:00-00:00</updated>
    <id>https://www.statox.fr/posts/p5/p5-genetic-algorithms/</id>
    <content type="html">&lt;p&gt;If you want to see a bunch of robots blindly running toward a black dot, here is &lt;a href=&quot;https://statox.github.io/p5-genetics/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And &lt;a href=&quot;https://github.com/statox/p5-genetics&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the code&lt;/a&gt; is on Github, it&#39;s not beautiful but it&#39;s free. Now let&#39;s see what I did here.&lt;/p&gt;
&lt;h3&gt;Teaching a machine to do stuff&lt;/h3&gt;
&lt;p&gt;Once of the funniest things to do with a computer or a piece of hardware and is to make it smart. This has been humankind obsession for many decades now and it&#39;s not going to stop anytime soon. Of course there are tons of way to make a piece of silicon smart, but for this project I wanted to explore a very simple category of machine learning algorithms: &lt;em&gt;The genetic algorithms&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Basically the way genetic algorithms works is the following: You take a bunch of things that you want to make smart, you make them accomplish a task in a random way and you score each of them depending on how well they succeeded at the task. Once they are all done you eliminate the worst ones and you keep the ones which did best. You will then slightly change the remaining ones and make them run the task again. The theory says that your new generation of things should do a bit better than the previous generation. Rinse, repeat and boom after a few generation you have a bunch of things pretty good at doing this one thing you asked them to do.&lt;/p&gt;
&lt;p&gt;I love the idea of these algorithms because it is quite simple to understand and not too hard to implement, which are two important criteria for my side projects. So here I am setting a new p5.js project! My goal here is simple: I want to have a robot learning how to get to a point in a 2D space and I want to be able to manipulate the algorithms parameters easily to better understand how it works.&lt;/p&gt;
&lt;h3&gt;I want to make a smart robot&lt;/h3&gt;
&lt;p&gt;So first thing first, I need to create a robot... Here I will make the simplest robot ever: it will be &lt;em&gt;a square&lt;/em&gt;! All it needs is a position (i.e. a 2 dimensional vector) and a way to change this position. Here is the time to introduce the concept of genes:&lt;/p&gt;
&lt;p&gt;I am creating a genetic algorithm, so it makes sense that at some point some genes are involved, right? Here the genes of a robot will be the pattern it will follow: This is actually a succession of order saying &amp;quot;Go up&amp;quot; or &amp;quot;Go left&amp;quot; or basically &amp;quot;Move of one position in one of the two dimensions of your plan&amp;quot;. Every robot will be created with an array of genes and its life will be devoted to following these instructions.&lt;/p&gt;
&lt;p&gt;My robot will also use some additional properties. I will store its initial position, its size (as a radius, even though it is shown as a square... Mostly because I started with round robots and decided it was simpler to have them squared afterwards) and its lifespan which could be handled differently (e.g. using the size of the genes array) but this way is more convenient for what I want to do next.&lt;/p&gt;
&lt;p&gt;So here is my simple robot:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lifespan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;p5&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Vector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lifespan &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; lifespan&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ROBOT_SIZE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;genes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Genes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lifespan&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token class-name&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crashed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foundTarget&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s notice that it changes its color depending on if it crashed (i.e touched the border of the frame) or if it reached the target. These calculations are made when the robot moves.&lt;/p&gt;
&lt;h3&gt;Actually, &lt;em&gt;a bunch&lt;/em&gt; of smart robots&lt;/h3&gt;
&lt;p&gt;So having a robot and making it move is good but to create a genetic algorithm I need to use more bots. So I will need to create a crowd of robots all starting at the same position but all with different genes (and that makes each robot unique and beautiful, just like you 🤗):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Crowd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;robots &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;matingPool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;robots&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ROBOT_SIZE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LIFESPAN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This crowd is the hearth of our algorithm: During a generation each robot will move independently, once they reach their lifespan the crow will inspect all of the bots, check if they reached the target and if they didn&#39;t how far they were from the target or if they crashed against a wall.&lt;/p&gt;
&lt;p&gt;Based on this information it is then possible to rank the robots: The one which crashed will be removed and the other ones will be more advantages the closer they got to the target. To do this the crowd has a mating pool which is reset for each generation: Each robot is then added to the pool a number of times proportional to its efficiency.&lt;/p&gt;
&lt;p&gt;This is great because that will allow me to right a simple function to create the new generation of robots:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Crowd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;evolve&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;robot &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;robots&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        robot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; parentA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;matingPool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; parentB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;matingPool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; child &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; parentA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parentB&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        robot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;genes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;moves &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; child&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        robot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;genes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For each robot we will take randomly two parents in the mating pool (which favored the efficient robots of the previous generation) and merge their genes which simply mean here that we merge the first half of one parent&#39;s genes with the second half of the other parent&#39;s genes. This could have been done in a lot of different ways like take every other genes of the parents or taking them randomly.&lt;/p&gt;
&lt;p&gt;And then come the magical random touch: &lt;code&gt;robot.genes.mutate()&lt;/code&gt; will move a few genes of this new robot, this way some will get better and some worst and the natural selection will do its job on the next generation:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Genes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;mutate&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; mutationCnt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;moves&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;MUTATION_RATE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            mutationCnt&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;moves&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateNewMove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;And now let&#39;s them to their job&lt;/h3&gt;
&lt;p&gt;Now that I have all the important components of the algorithm I can generate a crowd and a target, wait for the robots to become more and more efficient at reaching their target and finally move the target and watch them learn everything again.&lt;/p&gt;
&lt;p&gt;And to please my inner &lt;a href=&quot;http://reddit.com/r/dataisbeautiful&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;/r/dataisbeautiful&lt;/a&gt; fan I also added a few graphs to better visualize the efficiency.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Generating a maze... and then solving it</title>
    <link href="https://www.statox.fr/posts/p5/p5-maze/"/>
    <updated>2020-03-03T00:00:00-00:00</updated>
    <id>https://www.statox.fr/posts/p5/p5-maze/</id>
    <content type="html">&lt;p&gt;Quick, no time to explain! Have a look at how a computer goes out of a maze &lt;a href=&quot;https://statox.github.io/p5-maze/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;in the demo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;And check out &lt;a href=&quot;https://github.com/statox/p5-maze/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Github&lt;/a&gt; if you want to see the code.&lt;/p&gt;
&lt;h3&gt;Getting out of the maze&lt;/h3&gt;
&lt;p&gt;Solving mazes is not a new topic, every computer science student heard about this topic at least once during their studies and most of them tried to implement a maze solver one way or another. However seeing a computer getting out of a maze is always a source of wonder and excitement to me. I know there is nothing magical in these maze solving algorithms but seeing them getting executed has always been some kind of a kink to me.&lt;/p&gt;
&lt;p&gt;So last time I had a bit of free time I decided to make my own maze solver! It&#39;s nothing fancy: I&#39;m not inventing a new algorithm nor am I looking for something extremely fast but I wanted it to be fun to watch.&lt;/p&gt;
&lt;p&gt;So &lt;a href=&quot;https://statox.github.io/p5-maze/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here is&lt;/a&gt; what I came up with.&lt;/p&gt;
&lt;h3&gt;Run and fight&lt;/h3&gt;
&lt;p&gt;I had two main goals in this project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being able to visualize different algorithms solving the same maze at the same time. This would be what I call an AI fight.&lt;/li&gt;
&lt;li&gt;Being able to generate a maze. Firstly because without a maze it&#39;s useless to have a solver, but also because I wanted to compare different ways to generate a maze.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I used p5.js again to create a grid of cells and destroy the walls between them to create ways. The web application allows to choose the classical backtracking solution as well as a recursive divisor generator. This is not fancy but this works.&lt;/p&gt;
&lt;p&gt;However, doing some researched I also discovered that some cellular automata generate patterns looking like a maze, namely CA &lt;code&gt;B3/S12345&lt;/code&gt; and &lt;code&gt;B3/S1234&lt;/code&gt; (meaning a cell is born if it has exactly 3 alive neighbors and it survives it is has respectively 1,2,3,4 or 5 and 1,2,3 or 4 alive neighbors). The web app also allows to select this generators and even though I had to cheat a bit (sometimes some walls need to be broken to have a valid maze) it was quite exciting to see CAs applied on mazes!&lt;/p&gt;
&lt;p&gt;About the solvers so far I implemented four of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The depth first search and breadth first search algorithms: Classical and not really surprising.&lt;/li&gt;
&lt;li&gt;The wall follower: This one is the less efficient of all but, given there is not island in a maze it will always find the exit. This one is cool because it can easily be applied in the real world.&lt;/li&gt;
&lt;li&gt;The Euristic approach: This one is based on a very smart euristic I chose myself and which can be summed up like this: Between the four next possible cells, choose the one the closest to the exit. To my surprise it works reasonably well but I suspect this is because my mazes are not complex enough.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Cellular automata: Digital life and death</title>
    <link href="https://www.statox.fr/posts/p5/p5-cellular-automaton/"/>
    <updated>2020-05-13T00:00:00-00:00</updated>
    <id>https://www.statox.fr/posts/p5/p5-cellular-automaton/</id>
    <content type="html">&lt;p&gt;This has been one of my most satisfying project recently so if you want to see cool visualisations of digital life the demo is live &lt;a href=&quot;https://statox.github.io/p5-cellular-automaton/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code of this project is &lt;a href=&quot;https://github.com/statox/p5-cellular-automaton&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Github&lt;/a&gt;, now let me tell you what this is about.&lt;/p&gt;
&lt;h3&gt;Cellular automata are cool!&lt;/h3&gt;
&lt;p&gt;Despite the fact that I never remember which spelling is singular or plural (&lt;code&gt;automaton&lt;/code&gt;? &lt;code&gt;automata&lt;/code&gt;? &lt;code&gt;automat[a|on]s&lt;/code&gt;??) these mathematical concepts have been fascinating me for a long time.&lt;/p&gt;
&lt;p&gt;The principle of a cellular automaton (CA) is quite simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a grid representing some cells;&lt;/li&gt;
&lt;li&gt;The cells can either be dead or alive;&lt;/li&gt;
&lt;li&gt;With each iteration the cells either stay in the same state or change state depending on a set of rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is incredibly cool because given a few simple rules and some random inputs these objects can create surprising and sometimes counter intuitive patterns.&lt;br&gt;
The first CA I heard about was John Conway&#39;s game of life and it was something like 8 years ago. Since then I have found myself reimplementing a version of this CA every once in a while.&lt;/p&gt;
&lt;p&gt;When I heard that John Conway passed away in 2020 I decided to create a tribute to his work, once again.&lt;/p&gt;
&lt;h3&gt;So I built this&lt;/h3&gt;
&lt;p&gt;For this implementation I had a few things in mind which really mattered to me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First I wanted it to be executable in a browser. Mainly because I need to practice a bit my web development but also because it is easier to share my lovely shiny new project with people.&lt;/li&gt;
&lt;li&gt;I wanted to use &lt;a href=&quot;https://p5js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;p5.js&lt;/a&gt;, an implementation of Processing in the browser which makes it super easy to create cool visuals in a web page.&lt;/li&gt;
&lt;li&gt;I wanted to be able to customize the behavior of the CA very easily.&lt;/li&gt;
&lt;li&gt;I wanted to have a result quickly and be able to iterate on that &lt;em&gt;(otherwise I get bored and never finish my side projects, which is probably the main issue for developers and side projects)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I made &lt;a href=&quot;https://statox.github.io/p5-cellular-automaton/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this little web application&lt;/a&gt; hosted on github pages and using p5.js, bootstrap and some vanilla javascript.&lt;/p&gt;
&lt;p&gt;By default the app will start on a simple Game of Life CA, but in the settings the user can play with different parameters like the size of the grid, the initial density of the alive cells and more interestingly the rules used to decide of the next state of cells.&lt;/p&gt;
&lt;h3&gt;And it&#39;s fun to play with&lt;/h3&gt;
&lt;p&gt;I found a few interesting presets which can be used to create new CA and see cool patterns emerging.&lt;/p&gt;
&lt;p&gt;When I have time I&#39;ll add some pictures here... And maybe a technical write up about how it was done!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Circle packing algorithm (with kittens 🐱)</title>
    <link href="https://www.statox.fr/posts/p5/p5-circle-packing/"/>
    <updated>2020-06-21T00:00:00-00:00</updated>
    <id>https://www.statox.fr/posts/p5/p5-circle-packing/</id>
    <content type="html">&lt;p&gt;Inspired by a video by &lt;a href=&quot;https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Daniel Shiffman on YouTube&lt;/a&gt; I decided to create a short little project involving circle packing and kittens.&lt;/p&gt;
&lt;p&gt;Before reading my rambling go and watch the kitties &lt;a href=&quot;https://statox.github.io/p5-circles/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;in the demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that for a reason that I don&#39;t understand for now, the demo seems to be working only with chromium/chrome... Maybe I&#39;ll investigate that later on&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And if that was cute enough to make you want to see the code, &lt;a href=&quot;https://github.com/statox/p5-circles&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here you are&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What does it mean?&lt;/h3&gt;
&lt;p&gt;To quote &lt;a href=&quot;https://en.wikipedia.org/wiki/Circle_packing&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In geometry, circle packing is the study of the arrangement of circles (of equal or varying sizes) on a given surface such that no overlapping occurs and so that no circle can be enlarged without creating an overlap.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And to quote &lt;a href=&quot;https://en.wikipedia.org/wiki/Kitten&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the same source&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A kitten is a juvenile cat. After being born, kittens display primary &lt;a href=&quot;https://en.wikipedia.org/wiki/Altriciality&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;altriciality&lt;/a&gt; and are totally dependent on their mother for survival.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So for this project I wanted to use some really cute pictures and duplicate them with a bunch of non overlapping circles.&lt;/p&gt;
&lt;h3&gt;Loading the pictures&lt;/h3&gt;
&lt;p&gt;Before packing circles on these cuties we first need to load the images in our p5.js sketch. To do so I created a &lt;code&gt;reset()&lt;/code&gt; function which will be used each time I need a new image. It&#39;s goal is to get the color of each pixels on the image so that we can use the color later on:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IMAGES&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;data/kitten1.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;data/kitten2.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;data/kitten3.jpg&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// Stop calling draw() while we load the picture otherwise we break everything&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;noLoop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// iterate through my image list&lt;/span&gt;&lt;br&gt;    imgIndex&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imgIndex &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IMAGES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        imgIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IMAGES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;imgIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// load the image and get the color for each of its pixels&lt;/span&gt;&lt;br&gt;    img &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;pixelDensity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        circles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        imgColors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadPixels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pixels&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pixels&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            g &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pixels&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pixels&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pixels&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;            imgColors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Start the packing again!&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because p5.js is constantly calling the &lt;code&gt;draw()&lt;/code&gt; function I need to use a little trick calling &lt;code&gt;noLoop()&lt;/code&gt; to avoid calling &lt;code&gt;draw()&lt;/code&gt; while there is no data, otherwise things will not work.&lt;/p&gt;
&lt;p&gt;The interesting part of this function is how p5 gives access to the pixels of an image: After calling &lt;code&gt;img.loadPixels()&lt;/code&gt;, the &lt;code&gt;img&lt;/code&gt; object will have a &lt;code&gt;pixels&lt;/code&gt; property containing a list of integers. For each pixels in the image, four integers are added to &lt;code&gt;pixels&lt;/code&gt; one for each of the RGB values of the pixel and a last one for its alpha value.&lt;/p&gt;
&lt;p&gt;Once we looped through all these values we have an array &lt;code&gt;imgColors&lt;/code&gt; containing for &lt;code&gt;P5.Color&lt;/code&gt; object 🎉&lt;/p&gt;
&lt;h3&gt;Generating circles&lt;/h3&gt;
&lt;p&gt;Before we pack the image with circles we need to generate one of them. Here our goal is the following: Return a new circle which does not overlap the others or return nothing (we will handle the failed generations later). So far the algorithm is not very complex: We have a list of existing circles &lt;code&gt;circles&lt;/code&gt; (Empty at the beginning), we generate a random position &lt;code&gt;(x, y)&lt;/code&gt; and a radius &lt;code&gt;r&lt;/code&gt;, we then iterate on the list of existing circles and test if its distance to the newly generated one is larger than the sum of their radius (i.e. they don&#39;t overlap).&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newCircle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MAX_INITIAL_SIZE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; intersection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; circles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;intersection &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; color &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; imgColors&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we can generate one circle let&#39;s make a function which tries to generate a given amount of circles so that one iteration will see several ones created:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newCircles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; totalNewCircles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NEW_CIRCLES_BY_ITERATION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; remainingAttemps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NEW_CIRCLES_ATTEMPTS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; countNewCircles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countNewCircles &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; totalNewCircles &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; remainingAttemps &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        remainingAttemps&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newC &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newCircle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newC &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;            circles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newC&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;            countNewCircles&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course the more circles we generate the harder it become to find the right spot for a new one, that why we need to use a maximum number of attempts to avoid blocking the main loop.&lt;/p&gt;
&lt;h3&gt;And making them grow&lt;/h3&gt;
&lt;p&gt;Now that we can generate a bunch of new circle on each iteration, let&#39;s make them grow too and that&#39;s how we pack circles on kittens 💪&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Highlighting yanked text with pure vimscript</title>
    <link href="https://www.statox.fr/posts/vim/vim_flash_yanked_text/"/>
    <updated>2020-07-04T00:00:00-00:00</updated>
    <id>https://www.statox.fr/posts/vim/vim_flash_yanked_text/</id>
    <content type="html">&lt;p&gt;A few days ago I saw &lt;a href=&quot;https://blog.kdheepak.com/three-built-in-neovim-features.html#highlight-yanked-text&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a blog post&lt;/a&gt; showing a built-in way to highlight yanked text on neovim. The author uses neovim&#39;s lua integration combined with the &lt;a href=&quot;https://neovim.io/doc/user/autocmd.html#TextYankPost&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h TextYankPost&lt;/code&gt;&lt;/a&gt; autocommand event:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;augroup highlightYankedText&lt;br&gt;    &lt;span class=&quot;token builtin&quot;&gt;autocmd&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token builtin&quot;&gt;autocmd&lt;/span&gt; TextYankPost &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; lua require&lt;span class=&quot;token string&quot;&gt;&#39;vim.highlight&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on_yank&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;augroup END&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I liked the idea of having visual feedback on my yanks but I am still reluctant to use the lua integration. Despite all the bad things you can read about vimscript online I like to keep my configuration in pure vimscript as much as possible mostly for portability reasons.&lt;/p&gt;
&lt;p&gt;So I decided to &lt;s&gt;reinvent the wheel&lt;/s&gt; replicate this behavior with pure vimscript! This was interesting to do because it involves playing with patterns and matches which are the basic building bricks of Vim&#39;s highlighting function. And because these are not tools that I need to use regularly so I am not very familiar with them.&lt;/p&gt;
&lt;p&gt;So here is the result I am looking for: In this screen cap you can see me first yanking the word &amp;quot;filetype&amp;quot; with &lt;code&gt;yiw&lt;/code&gt;, then the full line with &lt;code&gt;yy&lt;/code&gt; and finally several lines:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/vim/vim_flash_yanked_text/flash_yanked_text.gif&quot; alt=&quot;Demo of highlighted text&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this article I want to detail the steps I followed to get this feature working and I hope this kind of iteration process can help new vimmers to get into vimscript.&lt;/p&gt;
&lt;h4&gt;A reminder on how to highlight stuff&lt;/h4&gt;
&lt;p&gt;First a bit of Vim terminology about highlighting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;pattern&lt;/code&gt; is basically a regular expression which can be used to search for some text.&lt;/p&gt;
&lt;p&gt;Patterns can be as simple as plain text (e.g. &lt;code&gt;/TODO&lt;/code&gt; ) or complex regexes with a lot of items as described in &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#pattern&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h pattern&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;highlighting group&lt;/code&gt; is a named group of highlighting instructions.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://vimhelp.appspot.com/syntax.txt.html#%3Ahighlight&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:highlight&lt;/code&gt;&lt;/a&gt; command allows to list the existing groups when given no arguments. It also allows to create new groups or get details about the existing ones.  By default both Vim and Neovim have an &lt;code&gt;IncSearch&lt;/code&gt; highlighting group which we will reuse to highlight our text. You can see what it looks like on your system with the command &lt;code&gt;:highlight IncSearch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally a &lt;code&gt;match&lt;/code&gt; is a way to tell Vim to highlight a specific pattern using a specific highlighting group.&lt;/p&gt;
&lt;p&gt;A match can be created with &lt;a href=&quot;http://vimhelp.appspot.com/eval.txt.html#matchadd%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;matchadd()&lt;/code&gt;&lt;/a&gt;. The first argument is the name of an highlighting group as shown in the result of &lt;code&gt;:highlight&lt;/code&gt; and the second argument is a pattern:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;TODO&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To delete a match simply use the ID returned by the previous command. Note that this command only works in the window where the match was created, this will be important later on.&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchdelete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Making the pattern work&lt;/h4&gt;
&lt;p&gt;The first step to highlight yanked text is to be able to match the last yanked text. Fortunately, &lt;a href=&quot;http://vimhelp.appspot.com/motion.txt.html#%27%5b&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h &#39;[&lt;/code&gt;&lt;/a&gt; tells us that Vim has two marks &lt;code&gt;&#39;[&lt;/code&gt; and &lt;code&gt;&#39;]&lt;/code&gt; which are positioned on the first and last characters of the previously changed or yanked text.&lt;/p&gt;
&lt;p&gt;And &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5c%25%27m&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /\%&#39;m&lt;/code&gt;&lt;/a&gt; tells us that we can use such marks in a pattern, so my first attempt looked like this:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\\%&#39;\\[.*\\%&#39;]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main items of the pattern are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;[&lt;/code&gt; is the mark I mentioned before but &lt;code&gt;[&lt;/code&gt; being a special character (used in &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5b%5d&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /[]&lt;/code&gt;&lt;/a&gt;) it needs to be escaped hence &lt;code&gt;&#39;\\[&lt;/code&gt;. Note that each &lt;code&gt;\&lt;/code&gt; needs to be escaped to be used in the command.&lt;/li&gt;
&lt;li&gt;Given this previous point, &lt;code&gt;\\%&#39;\\[&lt;/code&gt; is the way to use &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5c%25%27m&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /\%&#39;m&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;&#39;[&lt;/code&gt; mark, matching the beginning of the previously yanked text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.*&lt;/code&gt; allows to match any characters any number of time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\\%&#39;]&lt;/code&gt; is the equivalent of the first item with the &lt;code&gt;&#39;]&lt;/code&gt; mark. Note that here &lt;code&gt;]&lt;/code&gt; doesn&#39;t need to be escaped since there is no risk of confusion with &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5b%5d&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /[]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a great first attempt which kind of works on some simple cases but fails when yanking text on several lines. This is because the &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;.&lt;/code&gt;&lt;/a&gt; atom doesn&#39;t match end of lines characters, so we need to use &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5c_.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;\_.&lt;/code&gt;&lt;/a&gt; instead:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\\%&#39;\\[\\_.*\\%&#39;]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is better but still not completely working, for example the first and last characters of the yanked text are not highlighted. That&#39;s the moment where we turn to the doc and read a bit more what &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5c%25%27m&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /\%&#39;m&lt;/code&gt;&lt;/a&gt; has to say, particularly this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Example, to highlight the text from mark &#39;s to &#39;e:
	/.\%&amp;gt;&#39;s.*\%&amp;lt;&#39;e..
Note that two dots are required to include mark &#39;e in the match.  That
is because &amp;quot;\%&amp;lt;&#39;e&amp;quot; matches at the character before the &#39;e mark, and
since it&#39;s a |/zero-width| match it doesn&#39;t include that character.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Easy peasy, let&#39;s reuse the same thing but with our marks &lt;code&gt;&#39;[&lt;/code&gt; and &lt;code&gt;&#39;]&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.\\%&gt;&#39;\\[\\_.*\\%&amp;lt;&#39;]..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Important note&lt;/em&gt;: Some of this escaping could be greatly simplified using a different magic mode but it&#39;s not my point here. For more information on magic in Vim see &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2fmagic&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /magic&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So after a few tests yanking some random text, using &lt;code&gt;matchadd&lt;/code&gt; to highlight it and &lt;code&gt;matchdelete&lt;/code&gt; to remove the highlighting I am satisfied with the result, it is then time to automatically highlight our text.&lt;/p&gt;
&lt;h4&gt;Using the pattern automatically&lt;/h4&gt;
&lt;p&gt;Vim provides since it &lt;a href=&quot;https://github.com/vim/vim/commit/7e1652c63c96585b9e2235c195a3c322b1f11595&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;patch 8.0.1394&lt;/a&gt; the &lt;a href=&quot;http://vimhelp.appspot.com/autocmd.txt.html#TextYankPost&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h TextYankPost&lt;/code&gt;&lt;/a&gt; autocommand event which triggers just after a yank or deleting command. So our first step is to create a function triggered by this event:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;augroup highlightYankedText&lt;br&gt;    &lt;span class=&quot;token builtin&quot;&gt;autocmd&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token builtin&quot;&gt;autocmd&lt;/span&gt; TextYankPost &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FlashYankedText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;augroup END&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FlashYankedText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.\\%&gt;&#39;\\[\\_.*\\%&amp;lt;&#39;]..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see I put my autocommand in an &lt;a href=&quot;http://vimhelp.appspot.com/autocmd.txt.html#%3Aaugroup&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;augroup&lt;/code&gt;&lt;/a&gt; because &lt;strong&gt;&lt;em&gt;every time you use an autocommand without an augroup you make a kitten cry&lt;/em&gt;&lt;/strong&gt; 😿... and &lt;a href=&quot;https://vi.stackexchange.com/q/9455/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;for other reasons too&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That is great! Each time we yank some text it gets highlighted... but then it remains highlighted indefinitely. So let&#39;s simply use a timer to delete the match we just created. Note that the function puts the id of the newly created match in a global variable which is kind of ugly but pretty pratical to access it in the &lt;code&gt;DeleteTemporaryMatch()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FlashYankedText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.\\%&gt;&#39;\\[\\_.*\\%&amp;lt;&#39;]..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timer_start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;DeleteTemporaryMatch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DeleteTemporaryMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timerId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchdelete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Making the feature reliable&lt;/h4&gt;
&lt;p&gt;The previous code kind of works but some edge cases are problematic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When I yank two different texts too quickly sometimes the &lt;code&gt;DeleteTemporaryMatch()&lt;/code&gt; function doesn&#39;t have the time to delete the previous match.&lt;/li&gt;
&lt;li&gt;More importantly, when I switch to another window just after yanking some text, &lt;code&gt;deletematches()&lt;/code&gt; fails because the matches id are local to a window.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let&#39;s put the ids in a list, with the window id where they were created:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FlashYankedText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;g:yankedTextMatches&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;yankedTextMatches &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;endif&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; matchId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.\\%&gt;&#39;\\[\\_.*\\%&amp;lt;&#39;]..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; windowId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;winnr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;yankedTextMatches&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;windowId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; matchId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timer_start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;DeleteTemporaryMatch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;DeleteTemporaryMatch()&lt;/code&gt; can simply dequeue the &lt;code&gt;g:yankedTextMatches&lt;/code&gt; list and remove the matches on the corresponding window:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DeleteTemporaryMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timerId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;yankedTextMatches&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;yankedTextMatches&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; windowID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; matchID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;br&gt;            &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchdelete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;matchID&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; windowID&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token keyword&quot;&gt;endtry&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;endwhile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For good measures the call to &lt;code&gt;matchdelete()&lt;/code&gt; is enclosed in a &lt;code&gt;try...catch&lt;/code&gt; block, just in case something else fails and I don&#39;t want to be bothered with an error message.&lt;/p&gt;
&lt;p&gt;And here we are! With about 20 lines of vimscript we reimplemented the highlight yanked text feature!&lt;/p&gt;
&lt;h4&gt;Turning it into a plugin&lt;/h4&gt;
&lt;p&gt;Now that we have a code working properly, we could leave that in our &lt;code&gt;.vimrc&lt;/code&gt; and live happily with that... But it would be even better to make it a plugin! This way the functions will be loaded only when necessary (and thus, avoid increasing your startup time), we can get rid of global variables and just have a clean line in our &lt;code&gt;.vimrc&lt;/code&gt;, and while we are at it we could create a variable to control how long the flash should last... And that&#39;s actually what I did!&lt;/p&gt;
&lt;p&gt;I think the specific of how I turned my code into a plugin would make this post way too long, so the resulting plugin can be found &lt;a href=&quot;https://github.com/statox/vim-flash-yanked-text&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on my github&lt;/a&gt; and I am of course available to answer any questions you could have about it.&lt;/p&gt;
</content>
  </entry>
</feed>
