<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xml:base="https://www.statox.fr/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The stuff I do</title>
    <link>https://www.statox.fr/</link>
    <atom:link href="https://www.statox.fr/feed.xml" rel="self" type="application/rss+xml" />
    <description>statox&#39;s blog</description>
    <language>en</language>
    <item>
      <title>Python codegolf tips</title>
      <link>https://www.statox.fr/posts/2025/01/python_golf_tips/</link>
      <description>&lt;p&gt;See also my &lt;a href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips&quot;&gt;Javascript golf page&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;resources&quot; tabindex=&quot;-1&quot;&gt;Resources &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2025/01/python_golf_tips/#resources&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Useful code to copy/paste in codingame &amp;quot;fastest&amp;quot; challenges:&lt;/p&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; sys&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;sys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stderr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;input-parsing&quot; tabindex=&quot;-1&quot;&gt;Input parsing &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2025/01/python_golf_tips/#input-parsing&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To call create an input from calling the same function several times:&lt;/p&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the list comprehension might be better in some cases. Example with &lt;a href=&quot;https://www.codingame.com/ide/puzzle/the-descent-codesize&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Descent&lt;/a&gt; where we need to read a list of integers and return the index of the highest value:&lt;/p&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; m&lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The list comprehension allows to create tuples with the value and the index. Iterating on &lt;code&gt;&amp;quot;1&amp;quot;*8&lt;/code&gt; would not give us the incrementing index.&lt;/p&gt;</description>
      <pubDate>Mon, 20 Jan 2025 24:00:00 GMT</pubDate>
      <dc:creator>statox</dc:creator>
      <guid>https://www.statox.fr/posts/2025/01/python_golf_tips/</guid>
    </item>
    <item>
      <title>Creating my homemade environmental sensors system</title>
      <link>https://www.statox.fr/posts/2024/06/environment_sensors/</link>
      <description>&lt;blockquote&gt;&lt;p&gt;This article is a work in progress&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;supporting-software-architecture&quot; tabindex=&quot;-1&quot;&gt;Supporting software architecture &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/#supporting-software-architecture&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The first component needed for this system is a logging system which allows me to&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Receive HTTP calls from the sensors&lt;/li&gt;&lt;li&gt;Store and display applicative logs of these calls for debugging purpose&lt;/li&gt;&lt;li&gt;Store and display the metrics gathered by the sensors&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To get these features I&#39;m using &lt;a href=&quot;https://github.com/statox/api.statox.fr&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;my API&lt;/a&gt; and an Elasticsearch cluster &lt;a href=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/&quot;&gt;that I setup earlier&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The API has an endpoint dedicated to reporting data from the sensors. The endpoint uses a JSON schema to validate the body of the &lt;code&gt;POST&lt;/code&gt; requests it receives and only allows a specific list of fields to be sent. When a valid request is received, the data is sent via a JSON message to logstash with a specific message indicating that the log contains sensor data.&lt;/p&gt;&lt;p&gt;When logstash received this message, its pipeline detects the specific message and writes the log to a dedicated data stream meant to contain only environmental metrics. I can then use Kibana to create all the visualizations I need to this metric data.&lt;/p&gt;&lt;p&gt;I cut a few corners to get things working for now, but a few things could be reworked in this system:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I am currently implementing API key-based authentication to ensure only my sensors can call my API.&lt;/li&gt;&lt;li&gt;Having my sensors connected to the internet and calling my API directly is not an ideal security situation. Once my system is stable, a future iteration will involve having the sensors call a gateway on their local network, with the gateway responsible for sending the data to my API.&lt;/li&gt;&lt;li&gt;I probably could leverage the ELK stack&#39;s ability to handle metrics and avoid sending logs to logstash. This is a topic I need to dig.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;breadboard-prototyping&quot; tabindex=&quot;-1&quot;&gt;Breadboard prototyping &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/#breadboard-prototyping&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I went through several iterations to get a working sensor. The goal was to create a device with the following features:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Read environmental data from one or several sensors. At a minimum, temperature and humidity, ideally also atmospheric pressure, and maybe as a bonus, luminosity, air quality, precipitation volume, ambient noise level, etc.&lt;/li&gt;&lt;li&gt;Send this data to a remote server via a Wi-Fi network.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Safely&lt;/strong&gt; operate on battery power.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For the basis of my devices, I chose to use the &lt;a href=&quot;https://learn.adafruit.com/adafruit-feather-huzzah-esp8266&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Adafruit Feather HUZZAH ESP8266&lt;/a&gt;. I chose it for its ability to connect to a Wi-Fi network without hassle, the several input pins it offers, and its compatibility with the &lt;a href=&quot;https://learn.adafruit.com/featherwing-proto-and-doubler&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;FeatherWing Proto&lt;/a&gt;, which allows creating a self-contained device without having to design and print a complete PCB.&lt;/p&gt;&lt;h3 id=&quot;vma320&quot; tabindex=&quot;-1&quot;&gt;VMA320 &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/#vma320&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I created my first iterations on a breadboard, and the first sensor I tried was a &lt;a href=&quot;https://www.velleman.eu/products/view/?id=435554&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VMA320&lt;/a&gt;, which I had laying around in my toolkit. The VMA320 returns the current temperature on its data pin with an analog output.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;VMA320

temperature range: -55 Â°C to 125 Â°C
accuracy: Â± 0.5Â°C
connection: analog output
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The analog output of the VMA320 is proportional to the logic voltage we apply to it. Since the ESP8266 has a 3V logic, the output can go up to 3V, but the analog input pin of the ESP8266 can handle only up to 1V. So I needed to create a voltage divider to be able to read the output of the sensor.&lt;/p&gt;&lt;p&gt;This had two major drawbacks:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Because of the inaccuracies in my resistor values and the code I used to read from the voltage divider, I was not very confident in the data I got from the sensor.&lt;/li&gt;&lt;li&gt;The ESP8266 only has one analog input pin, which I knew I would need later on to monitor the battery.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With this first version I confirmed that I was able to&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Upload code to the ESP8266&lt;/li&gt;&lt;li&gt;Interface with its pin&lt;/li&gt;&lt;li&gt;Debug my code when running on the SoC&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/breadboard_vma320.jpg&quot; alt=&quot;Breadboard VMA320&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;The early prototype: Breadboard version of ESP8266 reading from a VMA320&lt;/i&gt;&lt;/center&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/schematics_vma320.jpg&quot; alt=&quot;Schematics VMA320&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;The early prototype: Schematics version of ESP8266 reading from a VMA320&lt;/i&gt;&lt;/center&gt;&lt;pre class=&quot;language-arduino&quot;&gt;&lt;code class=&quot;language-arduino&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;math.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/*
 * Code for the VMA320 temperature sensor
 * https://www.velleman.eu/products/view/?country=be&amp;amp;lang=fr&amp;amp;id=435554
 */&lt;/span&gt;

&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token macro-name&quot;&gt;SENSOR_PIN&lt;/span&gt; &lt;span class=&quot;token expression&quot;&gt;A0 &lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// Input PIN: ADC (The only analogue pin on ESP8266)&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Based on https://stackoverflow.com/a/44932077/4194289&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;analogToCelsius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; RawADC&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; Temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    Temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10000.0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1024.0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;RawADC&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// for pull-up configuration&lt;/span&gt;
    Temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.001129148&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.000234125&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.0000000876741&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Temp &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Temp &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Temp &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    Temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Temp &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;273.15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;token comment&quot;&gt;// Convert Kelvin to Celcius&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readTempCelsius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; sensorvalue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;analogRead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SENSOR_PIN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;double&lt;/span&gt; celsius &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;analogToCelsius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sensorvalue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; celsius&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;i&gt;The code to read from the VMA320 is awkward&lt;/i&gt;&lt;/center&gt;&lt;h3 id=&quot;dht11-and-battery-level&quot; tabindex=&quot;-1&quot;&gt;DHT11 and battery level &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/#dht11-and-battery-level&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;My second iteration replaced the VMA320 with a &lt;a href=&quot;https://www.adafruit.com/product/386&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DHT11&lt;/a&gt; I also had from an earlier attempt at this project. This allowed me to free the ESP8266 analog pin and to benefit from the more accurate sensor.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;DHT11

temperature range: 0 Â°C to 50 Â°C
accuracy: Â± 2Â°C

humidity range: 20% to 80%
accuracy: Â± 5%

connection: digital output
sampling rate: 0.5Hz to 1Hz (Depending on the sources)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/breadboard_dht11.jpg&quot; alt=&quot;Breadboard DHT11&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Early prototype: Breadboard version of ESP8266 reading from a DHT11&lt;/i&gt;&lt;/center&gt;&lt;p&gt;To read the sensor&#39;s data I used &lt;a href=&quot;https://github.com/adafruit/DHT-sensor-library&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;adafruit&#39;s DHT library&lt;/a&gt; which allowed me to greatly simplify my code:&lt;/p&gt;&lt;pre class=&quot;language-arduino&quot;&gt;&lt;code class=&quot;language-arduino&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token macro-name&quot;&gt;DHTPIN&lt;/span&gt; &lt;span class=&quot;token expression&quot;&gt;&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;      &lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// Pin used to read the DHT sensor&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;token macro-name&quot;&gt;DHTTYPE&lt;/span&gt; &lt;span class=&quot;token expression&quot;&gt;DHT11  &lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// Can be changed for DHT22 sensors&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Initialize DHT sensor for normal 16mhz Arduino&lt;/span&gt;
DHT &lt;span class=&quot;token function&quot;&gt;dht&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DHTPIN&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; DHTTYPE&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initDHT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    dht&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

float&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readDHT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Reading temperature or humidity takes about 250 milliseconds!&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Sensor readings may also be up to 2 seconds &#39;old&#39; (its a very slow sensor)&lt;/span&gt;
    float h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dht&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readHumidity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Read temperature as Celsius&lt;/span&gt;
    float t &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dht&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readTemperature&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    float&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; float&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; t&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; h&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Check if any reads failed&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isnan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;h&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isnan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token builtin&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Failed to read from DHT sensor!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this version I also started using a Li-Po battery to power the system. This is the part that I was most worried about because Li-Po batteries tend to be explode pretty impressively when mishandled and I&#39;m not keen on seeing that happening in my house. Using this type of battery requires a basic understanding of how they work to avoid pushing them into unsafe zones.&lt;/p&gt;&lt;p&gt;The Li-Po voltage is around 4.2V when fully charged. It then decreases to around 3.7V and remains stable at this voltage for a relatively long time. Subsequently, the voltage drops quickly. It is recommended to stop using the battery below 3.3V, and the battery&#39;s protection circuitry is designed to shut it down completely at around 2.5V.&lt;/p&gt;&lt;p&gt;To monitor the battery level, I created a voltage divider to scale the 4.2V voltage down to 1V, which I could then read from the ESP8266 analog pin. As shown in the schematic, I could also use my voltmeter to directly measure the battery&#39;s output voltage.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/schematics_battery_voltage_divider.jpg&quot; alt=&quot;Battery voltage divider&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Voltage divider schematic to read battery level&lt;/i&gt;&lt;/center&gt;&lt;p&gt;After adding some code to convert the analog reading into a percentage of charge and send it to the server, I successfully created my first visualization with a graph showing the temperature, humidity, and battery level.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/first_visualization.jpg&quot; alt=&quot;First Kibana Visualization&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;The first Kibana visualization&lt;/i&gt;&lt;/center&gt;&lt;p&gt;At this point the main loop of the arduino code was as follow:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Read from the sensor&lt;/li&gt;&lt;li&gt;Send the readings to the server&lt;/li&gt;&lt;li&gt;Use &lt;a href=&quot;https://www.arduino.cc/reference/en/language/functions/time/delay/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;delay()&lt;/code&gt;&lt;/a&gt; to pause the program for 10 minutes&lt;/li&gt;&lt;li&gt;Repeat.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I decided to let the system run for several hours to observe its performance, and it seemed to work well. I got confused by my battery readings and ended up &lt;a href=&quot;https://forums.adafruit.com/viewtopic.php?p=1016286&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;asking for help on the adafruit forum&lt;/a&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The battery continued operating at voltages much lower than I had expected.&lt;ul&gt;&lt;li&gt;I learned that the shutdown voltage of the battery circuitry is not standardized and varies by manufacturer.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Despite the low battery voltage, the ESP8266 continued running.&lt;ul&gt;&lt;li&gt;I learned that the board is more efficient than I had realized, and its ability to operate at lower voltages is a feature.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Even though my calculations for the battery percentage were slightly inaccurate, the discharge curve of my battery matched exactly what I had expected based on my research into Li-Po batteries. Therefore, both my voltage divider and raw readings were correct!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/kibana_battery_overuse.png&quot; alt=&quot;Kibana battery overuse&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Battery tension dropping&lt;/i&gt;&lt;/center&gt;&lt;h2 id=&quot;from-the-breadboard-to-the-protoboard&quot; tabindex=&quot;-1&quot;&gt;From the breadboard to the protoboard &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/#from-the-breadboard-to-the-protoboard&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;With my initial tests successful, I decided to transition my sensor setup from the breadboard to a more permanent solution that would be easier to move around the house and manipulate. To achieve this, I mounted the Feather on a mini breadboard and utilized the FeatherWing to establish connections to the sensor and implement the voltage divider for the battery.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/protoboard_dht22_1.jpg&quot; alt=&quot;Protoboard version&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/protoboard_dht22_2.jpg&quot; alt=&quot;Protoboard version&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Moving the project to a protoboard&lt;/i&gt;&lt;/center&gt;&lt;h3 id=&quot;dht22&quot; tabindex=&quot;-1&quot;&gt;DHT22 &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/#dht22&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;At this point, I replaced the DHT11 sensor with a &lt;a href=&quot;https://whadda.com/product/cm2302-dht22-temperature-humidity-sensor-module-wpse345/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;DHT22 module&lt;/a&gt;. The DHT22 is essentially an upgraded version of the DHT11, and the module includes a convenient pull-up resistor.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;DHT22

temperature range: -40 Â°C to 80 Â°C
accuracy: Â± 0.5Â°C

humidity range: 0% to 100%
accuracy: Â± 2-5%

connection: digital output
sampling rate: 0.5Hz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Adafruit has an interesting &lt;a href=&quot;https://learn.adafruit.com/dht&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;comparison page&lt;/a&gt;. Switching to the DHT22 was quite convenient: the DHT library functions the same way for both sensors, so it was simply a matter of connecting it to the same pins and changing the &lt;code&gt;DHTTYPE&lt;/code&gt; constant in my code.&lt;/p&gt;&lt;p&gt;I also created a second device identical to the first one and let them run for several days to compare their readings. The following graph shows these readings:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Between the 22nd and the 26th, the sensors were placed at two opposite corners of the same room.&lt;/li&gt;&lt;li&gt;Between the 26th and the 30th, they were placed right next to each other.&lt;/li&gt;&lt;li&gt;After the 30th, they were placed in two different rooms in a fairly small apartment.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/similar_curves_for_2_sensors.png&quot; alt=&quot;Similar curves for two different sensors&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Similar curves for two different sensors&lt;/i&gt;&lt;/center&gt;&lt;p&gt;I am pleased with the results. Although my methodology is not the most scientific, I am fairly confident to say that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Since both curves generally follow the same pattern, both sensors have similar reaction times and sensitivity.&lt;/li&gt;&lt;li&gt;The minimal differences observed when the sensors are next to each other suggest they are calibrated similarly.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With these results, I&#39;m not certain about the absolute accuracy of the readings (e.g., whether the sensors accurately reflect the current temperature: when they indicate 24Â°C is it really 24Â°C or 22Â°C or 26Â°C?), but they should be meaningful and sufficient for my goal of understanding how temperature evolves in my apartment.&lt;/p&gt;&lt;h3 id=&quot;bme280&quot; tabindex=&quot;-1&quot;&gt;BME280 &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/#bme280&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Another metric I wanted to track in my system is atmospheric pressure. For this, I used &lt;a href=&quot;https://whadda.com/product/bme280-temperature-humidity-and-pressure-sensor-wpse335/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a BME280&lt;/a&gt; sensor, which I connected to one of my devices that already had a DHT22. This allowed me to have both sensors in the same location and use a single ESP8266 to read from them.&lt;/p&gt;&lt;p&gt;I opted to use the BME280 in I2C connection mode, requiring only 4 pins to connect to the board: 2 for power supply and 2 for data reading. The I2C connection also means that the sampling rate is essentially as fast as I want now (not that it matters since I am still polling the sensors every 10 minutes).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;BME280

temperature range: -40 Â°C to 85 Â°C
accuracy: Â± 0.5Â°C

humidity range: 0% to 100%
accuracy: Â± 3%

pressure range: 300hPa to 1100 hPa
accuracy: Â± 1hPa

connection: I2C (also support SPI)
sampling rate: -
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/protoboard_bme280.jpg&quot; alt=&quot;Protoboard with BME280&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Protoboard with BME280&lt;/i&gt;&lt;/center&gt;&lt;p&gt;I then compared the readings of the BME280 with those of the two DHT22 sensors to check for calibration issues. The raw values show the BME280 as the pink curve, while the blue and green curves represent the two DHT22 sensors.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/bme_280_raw_comparison.png&quot; alt=&quot;Raw values comparison&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;The BME280 is not calibrated the same way as the DHT22 (left: temperatures, right: humidity)&lt;/i&gt;&lt;/center&gt;&lt;p&gt;For the temperature, the BME280 closely follows the trend of the other two sensors but with an offset of about 0.6Â°C. Regarding humidity, the situation is more complex: there appears to be both an offset and a scaling issue. After adjusting the humidity curve using the formula &lt;code&gt;20 + (0.7 * last_value(document.humidity2, kql=&#39;&amp;quot;document.humidity2&amp;quot;: *&#39;))&lt;/code&gt;, I obtained the following results:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/bme_280_corrected_comparison.png&quot; alt=&quot;Corrected values comparison&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;However the readings can be transformed to better fit the DHT22 readings (left: temperatures, right: humidity)&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Good enough for me! Again, I&#39;m unsure about the absolute calibration of the sensors, but they are consistent with each other, so my measurements should be reliable.&lt;/p&gt;&lt;p&gt;I also really liked &lt;a href=&quot;https://www.kandrsmith.org/RJS/Misc/Hygrometers/absolutetemperature.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this article&lt;/a&gt; by Robert Smith about his process for calibrating thermometers. At some point, I intend to try a similar ice bath experiment.&lt;/p&gt;&lt;h2 id=&quot;adding-an-enclosure&quot; tabindex=&quot;-1&quot;&gt;Adding an enclosure &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/#adding-an-enclosure&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that I&#39;m confident my sensors work well, I want to enclose them properly. I have two different needs: enclosures for the indoor sensors to tidy up cables and protect them from daily life, and enclosures for the outdoor sensors that need to be weatherproof.&lt;/p&gt;&lt;h3 id=&quot;indoor-enclosure&quot; tabindex=&quot;-1&quot;&gt;Indoor enclosure &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/#indoor-enclosure&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For my indoor enclosure I am considering two options:&lt;/p&gt;&lt;p&gt;Mastering &lt;a href=&quot;https://www.mecabricks.com/en/workshop&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mecabricks&lt;/a&gt; to design a Lego enclosure and then using the Lego &lt;a href=&quot;https://www.lego.com/fr-fr/pick-and-build/pick-a-brick&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pick a Brick&lt;/a&gt; to acquire the necessary bricks. However, this option is on hold until I improve my skills with the online tool.&lt;/p&gt;&lt;p&gt;Using a colleague&#39;s 3D printer to print a suitable enclosure. I have started to gather quotes for the project, but this is also on hold for now.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/sensor_quotes.jpg&quot; alt=&quot;Sensor quotes&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Behold my incredible technical drawing skills!&lt;/i&gt;&lt;/center&gt;&lt;h3 id=&quot;outdoor-enclosure&quot; tabindex=&quot;-1&quot;&gt;Outdoor enclosure &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/#outdoor-enclosure&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This enclosure is more complex because it needs to protect the board and the battery from significant humidity changes while allowing the sensor to be exposed to the environment for accurate readings. I have no experience with this type of project, but I intuition tells me that exposing electronic components and sensitive batteries outdoors requires some caution.&lt;/p&gt;&lt;p&gt;Therefore, I began by researching and educating myself:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://vbn.aau.dk/ws/portalfiles/portal/221557312/2015IMAPS_breathing_effect.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Humidity evolution (breathing effect) in enclosures with electronics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/profile/Zheng-Guilin/publication/232616036_Modeling_and_Simulation_of_Humidity_Inside_Sealed_Boxes/links/540d5b550cf2f2b29a383bf9/Modeling-and-Simulation-of-Humidity-Inside-Sealed-Boxes.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Modeling and Simulation of Humidity Inside Sealed Boxes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.agmcontainer.com/blog/how-to/engineering-moisture-pressure-protection-guide/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A Guide to Engineering Moisture &amp;amp; Pressure Protection for Sealed Enclosures&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://forum.mysensors.org/topic/1560/how-to-protect-your-outdoor-sensor&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;forum discussion about sensors protection&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These papers are super interesting but I ended up winging it: I bought a small plastic enclosure similar &lt;a href=&quot;https://www.adafruit.com/product/903&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;to this one&lt;/a&gt; with a toric joint for waterproofing and a weatherproof cable gland. The idea is to have the sensor outside of the box while the ESP8266 and its battery remain safe in a waterprood box.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/weatherproof_enclosure.jpg&quot; alt=&quot;Weather-proof enclosure&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/weatherproof_enclosure_with_cable_gland.jpg&quot; alt=&quot;Weather-proof enclosure with cable gland&quot;/&gt;&lt;/p&gt;&lt;p&gt;To test this enclosure I used my two DHT22 sensors: One in the box and one not in the box:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/weatherproof_enclosure_metrics_long.png&quot; alt=&quot;Metrics in the weather-proof enclosure&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Metrics in the weather-proof enclosure&lt;/i&gt;&lt;/center&gt;&lt;p&gt;I found that the box doesn&#39;t prevent temperature changes (as expected), but it does maintain the humidity level at what it was when sealed. This should be sufficient for my upcoming initial tests of the outdoor sensor.&lt;/p&gt;</description>
      <pubDate>Tue, 18 Jun 2024 24:00:00 GMT</pubDate>
      <dc:creator>statox</dc:creator>
      <guid>https://www.statox.fr/posts/2024/06/environment_sensors/</guid>
    </item>
    <item>
      <title>Capteurs environnementaux maison</title>
      <link>https://www.statox.fr/posts/2024/06/station_meteo_maison/</link>
      <description>&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;This post is a copy-past of a personnal message sent to a relative to talk about my project. A more complete and technical version is available &lt;a href=&quot;https://www.statox.fr/posts/2024/06/environment_sensors/&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;L&#39;idÃ©e est de mettre en place des capteurs qui me remontent rÃ©guliÃ¨rement la tempÃ©rature et l&#39;humiditÃ© des diffÃ©rentes piÃ¨ces de l&#39;appartement et de l&#39;extÃ©rieur de l&#39;appartement, de corrÃ©ler ces donnÃ©es aux donnÃ©es de stations mÃ©tÃ©o France autour de chez nous et de visualiser l&#39;Ã©volution de ces donnÃ©es au cours du temps. Le but est d&#39;une part de mieux comprendre comment garder l&#39;appartement le plus frais possible pendant les canicules, mais surtout de m&#39;amuser avec de l&#39;Ã©lectronique et en apprendre plus sur la mÃ©tÃ©orologie!&lt;/p&gt;&lt;p&gt;L&#39;expÃ©rience dÃ©bute avec la rÃ©alisation de capteurs environnementaux &amp;quot;maison&amp;quot;. D&#39;abord la version la plus simple possible qui sera Ã©quipÃ©e de l&#39;Ã©quivalent d&#39;un &lt;a href=&quot;https://learn.adafruit.com/adafruit-feather-huzzah-esp8266&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;arduino avec une puce wifi intÃ©grÃ©e&lt;/a&gt; connectÃ© Ã  un &lt;a href=&quot;https://learn.adafruit.com/dht&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;capteur de tempÃ©rature et d&#39;humiditÃ©&lt;/a&gt;. Un Å“il avisÃ© remarquera trois rÃ©sistances branchÃ©es entre le positif et la masse avec un fil qui part de l&#39;une d&#39;entre elle pour aller jusqu&#39;au circuit, le lecteur Ã©lectronicien identifiera peut Ãªtre un pont diviseur de tension: le systÃ¨me est alimentÃ© par une petite batterie LiPo (Ã  gauche de la photo), ces batteries ayant une fÃ¢cheuse tendance Ã  exploser quand leur charge atteint un niveau trop bas il est nÃ©cessaire de surveiller le niveau de charge. Mais les entrÃ©es analogiques du circuit ne supportant une tension maximale que de 1V et la batterie dÃ©livrant entre 4.2V et 3.3V dans sa zone de sÃ©curitÃ©, on a besoin d&#39;un pont diviseur pour ramener la tension de la batterie Ã  une tension lisible par le circuit.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/breadboard_dht11.jpg&quot; alt=&quot;Breadboard DHT11&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;The early prototype: Breadboard version of ESP8266 reading from a DHT11&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Une fois ce premier montage fonctionnant on se fÃ©licite de ne pas avoir fait exploser la batterie et on essaie d&#39;exploiter la donnÃ©e du capteur: Pour ce faire le circuit va relever la tempÃ©rature et l&#39;humiditÃ© toutes les 10 minutes et utiliser sa puce wifi pour appeler un serveur. C&#39;est un serveur sur lequel le crÃ©ateur travaille depuis plusieurs mois et dont la derniÃ¨re fonctionnalitÃ© implÃ©mentÃ©e par ses soins permet de recevoir un appel HTTP contenant des informations et de les enregistrer dans une base de donnÃ©e spÃ©cialement conÃ§ue pour contenir des donnÃ©es &amp;quot;temporelles&amp;quot; (qui Ã©voluent avec le temps).&lt;/p&gt;&lt;p&gt;On passera au lecteur les dÃ©tails techniques et on retiendra que l&#39;on commence a obtenir des graphiques de ce genre reprÃ©sentant l&#39;Ã©volution de la tempÃ©rature et de l&#39;humiditÃ© et de la charge de la batterie au cours du temps. Le lecteur attentif remarquera que les donnÃ©es ne semblent pas significatives pour l&#39;instant: Le capteur n&#39;a pas fonctionnÃ© en continu pendant l&#39;expÃ©rience, les manipulations ont faussÃ© les valeurs de tempÃ©rature et la charge de la batterie est notÃ©e au delÃ  de 100%. Le crÃ©ateur y verra nÃ©anmoins un dÃ©but prometteur!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/first_visualization.jpg&quot; alt=&quot;First Kibana Visualization&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;The first Kibana visualization&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Les Ã©tapes suivantes consisteront en deux avancÃ©es majeures: On passe du format &amp;quot;planche d&#39;expÃ©rimentation&amp;quot; (breadboard) au format &amp;quot;planche de prototypage&amp;quot; (protoboard) qui s&#39;enfiche directement sur les connections du circuit pour rÃ©duire l&#39;encombrement du capteur. On remplacera Ã©galement le capteur DHT11 par un capteur DHT22, qui a l&#39;avantage d&#39;Ãªtre plus stable dans ses relevÃ©s, d&#39;avoir une prÃ©cision de tempÃ©rature de Â±0.5Â°C contre Â±2Â°C pour l&#39;ancien capteur DHT11, un plus large champ de relevÃ©s d&#39;humiditÃ© (0-100% contre 20-80%) contre l&#39;inconvÃ©nient de ne pouvoir donner des rÃ©sultats significatifs que toutes les 2 secondes (contre une frÃ©quence dâ€™Ã©chantillonnage minimale de toutes les 1 secondes pour le DHT11) ce qui n&#39;est pas un problÃ¨me en soit vu que le systÃ¨me est conÃ§u pour faire des relevÃ©s toutes les 10 minutes.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/protoboard_dht22_1.jpg&quot; alt=&quot;Protoboard version&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/protoboard_dht22_2.jpg&quot; alt=&quot;Protoboard version&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Moving the project to a protoboard&lt;/i&gt;&lt;/center&gt;&lt;p&gt;On aura rÃ©alisÃ© 2 capteurs similaires pour commencer a comparer la prÃ©cision des capteurs industriels achetÃ©s et on se fÃ©licitera de voir que sur la pÃ©riode du 25 au 30 mai oÃ¹ les capteurs sont restÃ© placÃ©s l&#39;un Ã  cotÃ© de l&#39;autre les valeurs sont trÃ¨s similaires!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/similar_curves_for_2_sensors.png&quot; alt=&quot;Similar curves for two different sensors&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Similar curves for two different sensors&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Ã€ ce moment on commence Ã  se poser la question du conditionnement des capteurs: Comment crÃ©er des boites qui permettent Ã  la fois de protÃ©ger les capteurs des alÃ©as d&#39;un environnement mÃ©nager tout en leur permettant d&#39;assurer au mieux leur fonction de relevÃ©s? Plusieurs pistes seront envisagÃ©es d&#39;une part un collÃ¨gue propose de mettre Ã  disposition son imprimante 3d afin de crÃ©er des boites parfaitement adaptÃ©es au systÃ¨me, d&#39;autre part le crÃ©ateur envisage la conception de boites faites de piÃ¨ces de Lego. Pour ce faire l&#39;auteur fera ressortir ses anciens cours de dessin industriel et tentera de relever au mieux les cotes du projet. NÃ©anmoins la partie de crÃ©ation de boites est pour l&#39;instant Ã  lâ€™arrÃªt du fait d&#39;un manque de temps pour relancer l&#39;imprimante 3d et d&#39;un crÃ©ateur qui a remis Ã  plus tard l&#39;idÃ©e de maÃ®triser &lt;a href=&quot;https://www.mecabricks.com/en/workshop&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;l&#39;outil de conception d&#39;assemblage de Lego&lt;/a&gt; en 3d pour concevoir la boite uniquement depuis un ordinateur et sans piÃ¨ces Lego Ã  disposition.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/sensor_quotes.jpg&quot; alt=&quot;Sensor quotes&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Handmade sensor quotes&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Ã€ dÃ©faut de boite artisanales adaptÃ©es Ã  l&#39;environnement intÃ©rieur le crÃ©ateur se lance ensuite dans la rÃ©alisation d&#39;une boite &amp;quot;weather-proof&amp;quot; qui pourra accueillir le capteur en milieu extÃ©rieur, on s&#39;appuiera alors sur un boÃ®tier issu du commerce et Ã©quipÃ© d&#39;un joint torique dans lequel on rÃ©alisera une ouverture afin de faire passer un passe cable Ã©tanche. Le but Ã©tant d&#39;assurer au circuit et Ã  sa batterie un environnement Ã  l&#39;humiditÃ© stable tout en permettant au capteur d&#39;Ãªtre placÃ© en extÃ©rieur afin de mesure au mieux son environnement:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/weatherproof_enclosure.jpg&quot; alt=&quot;Weather-proof enclosure&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/weatherproof_enclosure_with_cable_gland.jpg&quot; alt=&quot;Weather-proof enclosure with cable gland&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Sensor in a weather-proof enclosure&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Ce systÃ¨me sera testÃ© via la mÃ©thode dite &amp;quot;de la bonne grosse douche bien chaude&amp;quot;: On placera le capteur dans son boÃ®tier Ã©tanche (&amp;quot;dev-sensor-2&amp;quot; courbe bleue) dans une salle de bain pendant la douche du crÃ©ateur pendant qu&#39;un second capteur non protÃ©gÃ© (&amp;quot;dev-sensor&amp;quot; courbe verte) sera placÃ© derriÃ¨re la porte de la-dite salle de bain . Le lecteur pourra observer que si le boÃ®tier Ã©tanche ne protÃ¨ge pas le circuit des changements de tempÃ©rateurs (courbe de gauche) l&#39;humiditÃ© Ã  l&#39;intÃ©rieur du boÃ®tier, elle, reste constante quand l&#39;humiditÃ© Ã  l&#39;extÃ©rieur de la salle de bain augmente significativement: RÃ©ussite notre boiter Ã©tanche est bien Ã©tanche!&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/weatherproof_enclosure_metrics.PNG&quot; alt=&quot;Metrics in the weather-proof enclosure&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Metrics in the weather-proof enclosure&lt;/i&gt;&lt;/center&gt;&lt;p&gt;La suite consiste dÃ©sormais Ã  intÃ©grer &lt;a href=&quot;https://whadda.com/product/bme280-temperature-humidity-and-pressure-sensor-wpse335/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;un nouveau type de capteur&lt;/a&gt; afin qu&#39;une fois en extÃ©rieur les relevÃ©s puissent intÃ©grer la pression atmosphÃ©rique, composante cruciale de la prÃ©vision mÃ©tÃ©o. L&#39;auteur profitera de l&#39;occasion pour se documenter sur les systÃ¨mes mÃ©tÃ©orologiques d&#39;anticyclone, de dÃ©pression, de fonts chauds, froids et composites, des diffÃ©rents facteurs ayant une influence sur la pression atmosphÃ©rique, ainsi que sur les recommendations d&#39;installations de stations mÃ©tÃ©o amateur.&lt;/p&gt;&lt;p&gt;(En haut Ã  gauche le nouveau capteur BME280 combinant pression, tempÃ©rature et humiditÃ© -meme si 6 connections sont accessibles seulement 4 sont vraiment utilisÃ©es dans notre systÃ¨me-. L&#39;ancien capteur DHT22 reste Ã©galement connectÃ© pour comparer les relevÃ©s)&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/protoboard_bme280.jpg&quot; alt=&quot;Protoboard with BME280&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Protoboard with BME280&lt;/i&gt;&lt;/center&gt;&lt;p&gt;En plus de ce nouveau capteur l&#39;auteur aura pris soin d&#39;incorporer Ã  ses tableaux de mesures les informations fournies par les stations MÃ©tÃ©oFrance installÃ©es dans Paris. En effet MÃ©tÃ©oFrance met Ã  la disposition du public un service permettant d&#39;interroger ses bases de donnÃ©es en temps rÃ©el et de recevoir les mises Ã  jour horaires de ses diffÃ©rentes stations. Toutes les stations ne renvoient pas les mÃªmes informations par exemple seulement Longchamp et Montsouris fournissent des relevÃ©s d&#39;humiditÃ©:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/meteo_france_metrics.png&quot; alt=&quot;Meteo-France metrics&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Meteo-France temperature and humidity&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Sur le graph de gauche le lecteur avisÃ© s&#39;interrogera sÃ»rement sur la station renvoyant une tempÃ©rature constamment infÃ©rieure a toutes les autres: cette station est en fait situÃ©e au sommet les 330 mÃ¨tres de la Tour Eiffel, ce qui explique une tempÃ©rature en moyenne 3 degrÃ©s infÃ©rieurs Ã  l&#39;ensemble des autres stations qui se situent en moyenne a 1m20 du sol.&lt;/p&gt;&lt;p&gt;On rÃ©cupÃ¨re Ã©galement les niveaux de prÃ©cipitations de certaines stations (On notera que ces donnÃ©es semblent toutes arrondies Ã  l&#39;entier le plus proche, une interrogation en cours pour l&#39;auteur, plus de dÃ©tails dans un prochain Ã©pisode)&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/meteo_france_precipitations.png&quot; alt=&quot;Meteo-France precipitations&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Meteo-France precipitations&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Enfin on rÃ©cupÃ¨re la pression atmosphÃ©rique renvoyÃ©e uniquement par la stations de Montsouris (en jaune) et en la compare Ã  la pression relevÃ©e par notre capteur maison. Le lecteur pourra sâ€™enthousiasmer du niveau de prÃ©cision du capteur qui suit de trÃ¨s prÃ¨s les variations de la station:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/atmospheric_pressure.png&quot; alt=&quot;Atmospheric pressure&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Atmospheric pressure&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Mais si les variations sont suivies de prÃ¨s on notera que les valeurs remontÃ©es ont un Ã©cart constant de 4hPa ce qui nous amÃ¨ne Ã  la question cruciale du moment: Comment les capteurs sont-ils calibrÃ©s et comment mesurer compenser leur dÃ©faut s&#39;il existe?&lt;/p&gt;&lt;p&gt;Prenons par exemple les mesures d&#39;humiditÃ©:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/humidity_with_error.png&quot; alt=&quot;Humidity with error&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Humidity with error&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Nous avons en tout 3 capteurs: 2 DHT22 (courbe verte et courbe bleue) et 1 BME280 (courbe rose). Ã€ premiÃ¨re vue les allures sont similaires mais on remarque que le BME280 Ã  l&#39;air d&#39;avoir une erreur d&#39;environ 4.8%, on peut donc tracer la courbe 4.8% plus haut mais on se rend compte alors que le capteur n&#39;a peut Ãªtre pas qu&#39;un dÃ©faut de dÃ©calage mais aussi un dÃ©faut d&#39;Ã©chelle: Pourquoi les pics roses sont-ils plus hauts que les pics verts et bleus?&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/06/station_meteo_maison/humidity_correction_hypothesis.png&quot; alt=&quot;Humidity correction hypothesis&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Humidity correction hypothesis&lt;/i&gt;&lt;/center&gt;&lt;p&gt;Les resources en ligne dÃ©crivent des protocoles expÃ©rimentaux pour tenter de quantifier ce genres de dÃ©calages. Une mÃ©thode possible consiste Ã  remplir une bouteille Thermos de glace pilÃ©e rÃ©alisÃ©e a partir d&#39;eau dÃ©minÃ©ralisÃ©e pour atteindre une tempÃ©rature exacte de zÃ©ro degrÃ©s et Ã  partir de cette tempÃ©rature connue observer les relevÃ©s des capteurs et en dÃ©duire le biais. Ce genre d&#39;expÃ©riences pourraient bien occuper les prochains weekends du crÃ©ateur, qui ne manquera pas de tenir son lecteur informÃ© des Ã©volutions du projet!&lt;/p&gt;</description>
      <pubDate>Mon, 17 Jun 2024 24:00:00 GMT</pubDate>
      <dc:creator>statox</dc:creator>
      <guid>https://www.statox.fr/posts/2024/06/station_meteo_maison/</guid>
    </item>
    <item>
      <title>Using an OpenSearch (AWS&#39;s ElasticSearch) cluster to monitor my API</title>
      <link>https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/</link>
      <description>&lt;p&gt;Notes about how I set up an &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenSearch&lt;/a&gt; cluster to manage the logs of &lt;a href=&quot;https://github.com/statox/api.statox.fr&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;my api&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Goal: Set up the cheapest ELK cluster possible to - Ingest the logs of my API - Maybe use as a tracking database for my habits&lt;/p&gt;&lt;p&gt;TODO:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review costs after some usage. The idea was to benefit from the free tier, after one week it seems I don&#39;t get it.&lt;/li&gt;&lt;li&gt;Review &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ultrawarm.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;UltraWarm&lt;/a&gt; nodes they might be usefull for my usage if I can&#39;t benefit from the free tier.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;setup-the-cluster-in-aws&quot; tabindex=&quot;-1&quot;&gt;Setup the cluster in AWS &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/#setup-the-cluster-in-aws&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Everything done easily from the AWS console. I had to use &amp;quot;Standard create&amp;quot; to be able to setup a smaller cluster than what AWS recommends because I have very small needs.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/cluster_standard_create.png&quot; alt=&quot;Setup screen 1&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Not using the default Easy mode&lt;/i&gt;&lt;/center&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/cluster_single_availability_zone.png&quot; alt=&quot;Setup screen 2&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Specifying a single availability zone to limit the costs.&lt;/i&gt;&lt;/center&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/cluster_single_data_node.png&quot; alt=&quot;Setup screen 3&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Using a single node both for master and data with the smallest possible EBS and minimum IOPS.&lt;/i&gt;&lt;/center&gt;&lt;p&gt;I also set up a custom endpoint so that I can reach my cluster from &lt;a href=&quot;http://logs.statox.fr&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;logs.statox.fr&lt;/a&gt; instead of the default long endpoint provided by ELK. The setup is simple: Create a certicate in ACM, setup a DNS verification to validate the certificate and use the certificate in the setup screen of OpenSearch.&lt;/p&gt;&lt;p&gt;The security is far from ideal but pretty convenient for a very-not-critical API like mine: The cluster is open to internet and the auth is done with ELK&#39;s built-in user store. (Note that the automatic software updates are enabled thank to the managed aspect of the cluster, I&#39;ll need to make sure it doesn&#39;t break stuff when I don&#39;t do anything).&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/cluster_security.png&quot; alt=&quot;Setup screen 4&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Using a single node both for master and data with the smallest possible EBS and minimum IOPS.&lt;/i&gt;&lt;/center&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/cluster_security_2.png&quot; alt=&quot;Setup screen 5&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;TODO: Check if I can better restrict this policy.&lt;/i&gt;&lt;/center&gt;&lt;p&gt;By default the cluster has hourly snapshots. The cluster takes several minutes to start up, once it is up we can test that it answers properly:&lt;/p&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DOMAIN_ENDPOINT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://logs.statox.fr&#39;&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;ELASTIC_USER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xxxxxxxx&#39;&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;ELASTIC_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;xxxxxxxx&#39;&lt;/span&gt;


&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt;  &lt;span class=&quot;token parameter variable&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Content-Type: application/json&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
      &lt;span class=&quot;token parameter variable&quot;&gt;-XGET&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$ELASTIC_USER&lt;/span&gt;:&lt;span class=&quot;token variable&quot;&gt;$ELASTIC_PASSWORD&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$DOMAIN_ENDPOINT&lt;/span&gt;/_cat/health&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;about-ingestion&quot; tabindex=&quot;-1&quot;&gt;About ingestion &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/#about-ingestion&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AWS har a service &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/osis-get-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenSearch Ingestion&lt;/a&gt; which provides ingestion pipeline like Logstash would do in a regular ELK setup.&lt;/p&gt;&lt;p&gt;For now I don&#39;t use it because I want to avoid the additional costs but this has some big downsides, particularly I need to provide a timestemp fields when my clients send new logs, that sucks and is very error prone. Also the clients are responsible for sending the logs to the correct data stream, for now this is ok because I use the cluster only for my logging but when I start using it for other features I&#39;ll probably need to get to the ingestion part.&lt;/p&gt;&lt;h2 id=&quot;the-ui&quot; tabindex=&quot;-1&quot;&gt;The UI &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/#the-ui&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AWS replaces Kibana with &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/dashboards.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OpenSearch Dashboards&lt;/a&gt; which is a rebranded version of Kibana. It is accessible to &lt;code&gt;https://logs.statox.fr/_dashboard&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The main difference with a self hosted Kibana is the &amp;quot;Management&amp;quot; section of the menu which changes, for example there is no &amp;quot;Stack Monitoring&amp;quot; section because the monitoring is done directly in AWS.&lt;/p&gt;&lt;h2 id=&quot;configuring-the-database&quot; tabindex=&quot;-1&quot;&gt;Configuring the database &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/#configuring-the-database&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Goal: Ingest my logs on a rolling index (weekly rollover)&lt;/p&gt;&lt;p&gt;I am going to use data steams instead of regular index to make it easier to configure the roll over.&lt;/p&gt;&lt;h3 id=&quot;1.-create-the-index-template.&quot; tabindex=&quot;-1&quot;&gt;1. Create the index template. &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/#1.-create-the-index-template.&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is the template of settings which will be applied to all the indices which will be used to create the data stream.&lt;/p&gt;&lt;p&gt;Important settings:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Specify that we are working with data streams&lt;/li&gt;&lt;li&gt;Specify the &lt;code&gt;timestamp&lt;/code&gt; field as the time field (which will allow the proper indexing and temporal search).&lt;/li&gt;&lt;li&gt;We are not really using index pattern as with regular indices because we are using a data stream, so the &lt;code&gt;index pattern&lt;/code&gt; property must have the name of the stream we will create later on. &lt;em&gt;Note: No * character&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/index_template_1.png&quot; alt=&quot;Index template settings 1&quot;/&gt;&lt;/p&gt;&lt;p&gt;No need to specify an index alias because the data stream will take care of that. And I have only one node so it doesn&#39;t make sense to have more than one primary shard or any replica shard.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/index_template_2.png&quot; alt=&quot;Index template settings 2&quot;/&gt;&lt;/p&gt;&lt;p&gt;The index mapping are useful to specify that a specific field is not a simple number but a timestamp or not a simple string but an IP. See the &lt;a href=&quot;https://opensearch.org/docs/latest/field-types/supported-field-types/index/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;supported fields types&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/index_template_3.png&quot; alt=&quot;Index template settings 3&quot;/&gt;&lt;/p&gt;&lt;h3 id=&quot;2.-create-the-data-stream&quot; tabindex=&quot;-1&quot;&gt;2. Create the data stream &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/#2.-create-the-data-stream&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If created with the name used in the index template&#39;s &lt;code&gt;index pattern&lt;/code&gt; field the stream will be associated to the template.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/data_stream_1.png&quot; alt=&quot;Data stream 1&quot;/&gt;&lt;/p&gt;&lt;p&gt;Once the stream is created we can start pushing data to it, that will automatically create the underlying index:&lt;/p&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt;  &lt;span class=&quot;token parameter variable&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Content-Type: application/json&#39;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-XPOST&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$ELASTIC_USER&lt;/span&gt;:&lt;span class=&quot;token variable&quot;&gt;$ELASTIC_PASSWORD&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$DOMAIN_ENDPOINT&lt;/span&gt;/api.statox.fr/_doc&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
    &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{&quot;message&quot;: &quot;Test message from bash&quot;, &quot;timestamp&quot;: $(date +&quot;%s&quot;)000}&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# With a shitty hack to transform seconds to milliseconds&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3.-create-the-index-pattern&quot; tabindex=&quot;-1&quot;&gt;3. Create the Index pattern &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/#3.-create-the-index-pattern&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is the entity which tells to Dashboards (Kibana) which indices to search when you are in the &lt;code&gt;Dicover&lt;/code&gt; tab.&lt;/p&gt;&lt;p&gt;The only thing needed when creating the pattern is to use the proper name &lt;code&gt;api.statox.fr&lt;/code&gt; (Again no need for &lt;code&gt;*&lt;/code&gt; thanks to the data stream which masks the complexity)&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/index_pattern_1.png&quot; alt=&quot;Index pattern settings 1&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/index_pattern_2.png&quot; alt=&quot;Index pattern settings 2&quot;/&gt;&lt;/p&gt;&lt;p&gt;From there the logs are available in the &lt;code&gt;Discover&lt;/code&gt; tab:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/index_pattern_3.png&quot; alt=&quot;Index pattern in discover&quot;/&gt;&lt;/p&gt;&lt;h3 id=&quot;4.-set-up-the-index-policy&quot; tabindex=&quot;-1&quot;&gt;4. Set up the index policy &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/#4.-set-up-the-index-policy&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is the final step to make sure the indices backing the data streams are regularly rotated (so that at one point they can be deleted to keep the volume of data below a certain threshold without dropping a unique index with all the logs).&lt;/p&gt;&lt;p&gt;An optional step 1 is to setup a Notification channel to be notified when the policy fails, settings up a notification on a slack webhook is super straight forward, just past the webhook URL and you&#39;re done.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/index_policy_1.png&quot; alt=&quot;Index policy settings&quot;/&gt;&lt;/p&gt;&lt;p&gt;By using the correct index pattern, the policy will be applied to all the indices of the data stream and will rollover them.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/#conclusion&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This kind of setup is something I&#39;m used to do on a much bigger scale in my day job so I see the cracks in this current setup but at least it&#39;s working conveniently for my small needs.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;It would be great to terraform the AWS part (but, &lt;em&gt;la flemme&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;I need to check if I can easily restore the automatic snapshots made by AWS and if that keeps the configurations I did in Kibana (in theory, yes)&lt;/li&gt;&lt;li&gt;Next I&#39;ll use this document store as part of the product of my api.&lt;/li&gt;&lt;/ul&gt;</description>
      <pubDate>Sat, 27 Apr 2024 24:00:00 GMT</pubDate>
      <dc:creator>statox</dc:creator>
      <guid>https://www.statox.fr/posts/2024/04/api_logging_elasticsearch/</guid>
    </item>
    <item>
      <title>Automatically merging Dependabot PRs on Github</title>
      <link>https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/</link>
      <description>&lt;p&gt;I have Dependabot set on many of my repos but I often get too lazy to check the PRs and merge them. On &lt;a href=&quot;https://github.com/statox/api.statox.fr&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;my api&lt;/a&gt; repo this is an issue because I really want to keep dependencies up to date. Here is what I did to have Dependabot&#39;s PRs merged automatically as they are created.&lt;/p&gt;&lt;p&gt;The file lives &lt;a href=&quot;https://github.com/statox/api.statox.fr/blob/main/.github/workflows/dependabot-auto-merge.yml&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;there on Github&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;At no point there is a need to generate a github access token by yourself. Dependabot will use its own&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;setup-tests&quot; tabindex=&quot;-1&quot;&gt;Setup tests &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#setup-tests&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For my api repo I use &lt;code&gt;mocha&lt;/code&gt; to run the tests. I have 3 commands to be able to run the tests&lt;/p&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt;            &lt;span class=&quot;token comment&quot;&gt;# This triggers a podman-compose command starting the containers&lt;/span&gt;
./src/tools/init-db.sh &lt;span class=&quot;token comment&quot;&gt;# Create the test database in the container&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run tests:all      &lt;span class=&quot;token comment&quot;&gt;# Call mocha and run the tests&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;setups-in-github&quot; tabindex=&quot;-1&quot;&gt;Setups in Github &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#setups-in-github&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;dependabot&quot; tabindex=&quot;-1&quot;&gt;Dependabot &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#dependabot&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Allow Dependabot to regularly create PRs with dependencies update.&lt;/p&gt;&lt;p&gt;In the Github repo settings: Security &amp;gt; Code security and analysis &amp;gt; Dependabot&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/dependabot_setup.png&quot; alt=&quot;Dependabot setup screen&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Enable the Dependabot alerts&lt;/i&gt;&lt;/center&gt;&lt;p&gt;For better configuration a file &lt;code&gt;github/dependabot.yml&lt;/code&gt; can be created in the repo, see &lt;a href=&quot;https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the doc&lt;/a&gt; for more details.&lt;/p&gt;&lt;h3 id=&quot;actions-settings&quot; tabindex=&quot;-1&quot;&gt;Actions settings &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#actions-settings&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Allow GitHub Actions to create and approve pull requests. This is needed because the workflow we will trigger will be responsible for approving the PR automatically.&lt;/p&gt;&lt;p&gt;In the Github repo settings: Code and automation &amp;gt; Actions &amp;gt; General &amp;gt; Workflow permissions&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/allow_action_approve_PR.png&quot; alt=&quot;Actions settings screen&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Enable the actions to modify PRs&lt;/i&gt;&lt;/center&gt;&lt;h3 id=&quot;branch-protection&quot; tabindex=&quot;-1&quot;&gt;Branch protection &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#branch-protection&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In the Github repo settings: Code and automation &amp;gt; Branches &amp;gt; Add rule&lt;/p&gt;&lt;p&gt;The rule needs to apply to the &lt;code&gt;main&lt;/code&gt; branch (i.e. the one we&#39;ll be merging to).&lt;/p&gt;&lt;p&gt;We need two checks enforced by the rule:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Require a pull request before merging&lt;/code&gt; and &lt;code&gt;Require approvals&lt;/code&gt;: The approval will be given by &lt;code&gt;github-action&lt;/code&gt; bot throught the workflow&lt;/li&gt;&lt;li&gt;&lt;code&gt;Require status checks to pass before merging&lt;/code&gt;: The checks will be the success of the workflow itself and we&#39;ll make the workflow fail if the tests for the repo are not validated.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/branch_protection_setup.png&quot; alt=&quot;Branch protection screen&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Enforce PR approval and checks&lt;/i&gt;&lt;/center&gt;&lt;h2 id=&quot;setup-the-workflow&quot; tabindex=&quot;-1&quot;&gt;Setup the workflow &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#setup-the-workflow&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the repo create a file for the workflow like &lt;code&gt;.github/workflows/dependabot-auto-merge.yml&lt;/code&gt;&lt;/p&gt;&lt;h3 id=&quot;trigger&quot; tabindex=&quot;-1&quot;&gt;Trigger &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#trigger&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We will trigger the workflow on PRs.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt; Find a way to trigger only for dependabot PRs, for now all MR will be automatically merged if they pass the tests.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;types&lt;/code&gt;: Using &lt;code&gt;edited&lt;/code&gt; is useful to debug the workflow while setting it up: once the MR is open, you can edit the workflow, push, comment &lt;code&gt;@dependabot rebase&lt;/code&gt; on the PR and the workflow will be re-run&lt;/li&gt;&lt;/ul&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Test and AutoMerge PRs

&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;opened&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; synchronize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; edited&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;main&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;permissions&quot; tabindex=&quot;-1&quot;&gt;Permissions &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#permissions&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This changes the permissions of the github token that dependabot gets when creating the PR, we need two additional permissions.&lt;/p&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# This is needed to approve the PR&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;pull-requests&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; write
    &lt;span class=&quot;token comment&quot;&gt;# This is needed to merge the PR https://github.com/cli/cli/issues/6695#issuecomment-1348430969&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; write&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Without these permissions the calls the the &lt;code&gt;gh&lt;/code&gt; cli in the next steps fail with errors similar to this:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/auto_merge_permissions_error.png&quot; alt=&quot;gh cli permission error&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;Example of gh permission error&lt;/i&gt;&lt;/center&gt;&lt;h3 id=&quot;filter-dependabot&quot; tabindex=&quot;-1&quot;&gt;Filter dependabot &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#filter-dependabot&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One way to have the whole workflow triggered only for dependabot&#39;s PR is to add a condition for the job:&lt;/p&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;test-and-auto-merge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; github.actor == &#39;dependabot&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;bot&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&#39;
        &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
        &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;# [...]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This could be improved to better factorize the code and have the tests running on all MR and the auto merge running only on dependabot PRs but since I&#39;m the only one working on this repo and I don&#39;t use PRs for other reasons I will not bother with that.&lt;/p&gt;&lt;h3 id=&quot;repo-setup-and-tests&quot; tabindex=&quot;-1&quot;&gt;Repo setup and tests &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#repo-setup-and-tests&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is dependent on all repos though the important part is to run some tests. Here we need several setup steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Install &lt;code&gt;python&lt;/code&gt; throught a marketplace Github action to be able to install &lt;code&gt;podman-compose&lt;/code&gt; with &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Install &lt;code&gt;podman&lt;/code&gt; throught a marketplace Github action.&lt;/li&gt;&lt;li&gt;Install &lt;code&gt;node&lt;/code&gt; to run build the project and run the tests.&lt;/li&gt;&lt;li&gt;Checkout the code, install the deps and run the tests.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If these steps fail the following one will fail too, so the PRs tests will fail and the code will not be merged.&lt;/p&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;token key atrule&quot;&gt;test-and-auto-merge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install python 3
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;python@v5
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;python-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3.x&#39;&lt;/span&gt;

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install podman
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gacts/install&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;podman@v1

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install podman&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;compose
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pip3 install podman&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;compose

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install node.js
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v4
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;latest&#39;&lt;/span&gt;

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Checkout code
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; github.head_ref &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install dependencies
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm ci

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Start podman environment
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run env

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Init db
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./src/tools/init&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;db.sh

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Run tests
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run tests&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;all&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;handle-the-pr&quot; tabindex=&quot;-1&quot;&gt;Handle the PR &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#handle-the-pr&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Three important steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Call the &lt;code&gt;fetch-metadata&lt;/code&gt; action to get the &lt;code&gt;$PR_URL&lt;/code&gt; variable referring to the current PR and used in the next steps.&lt;/li&gt;&lt;li&gt;Have the &lt;code&gt;github-action&lt;/code&gt; bot approve the PR&lt;/li&gt;&lt;li&gt;Have the &lt;code&gt;github-action&lt;/code&gt; bot set the &lt;code&gt;auto merge&lt;/code&gt; setting for the PR, which will trigger the merge of the PR because all the checks will succeed.&lt;/li&gt;&lt;/ul&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;token key atrule&quot;&gt;test-and-auto-merge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# [...]&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# Setup and test steps&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# [...]&lt;/span&gt;

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Dependabot metadata
        &lt;span class=&quot;token key atrule&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; metadata
        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dependabot/fetch&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;metadata@v2
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;github-token&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${{secrets.GITHUB_TOKEN}}&quot;&lt;/span&gt;

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Approve the PR
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gh pr review &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;approve &quot;$PR_URL&quot;
        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;PR_URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;github.event.pull_request.html_url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;GH_TOKEN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;secrets.GITHUB_TOKEN&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Auto&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;merge the PR
        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gh pr merge &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;rebase &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;auto &quot;$PR_URL&quot;
        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;PR_URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;github.event.pull_request.html_url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;GH_TOKEN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;secrets.GITHUB_TOKEN&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;result&quot; tabindex=&quot;-1&quot;&gt;Result &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#result&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Once all of that is configured the Dependabot PRs should be automatically handled.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/PR_checks_tab.png&quot; alt=&quot;PR checks tab&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;The check tab of the PR should have some results&lt;/i&gt;&lt;/center&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/PR_check_result.png&quot; alt=&quot;PR checks results&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;The checks should point to a succesful action&lt;/i&gt;&lt;/center&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/PR_bots_results.png&quot; alt=&quot;PR bots results&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;The various bots should have acted on the PR&lt;/i&gt;&lt;/center&gt;&lt;h3 id=&quot;notification&quot; tabindex=&quot;-1&quot;&gt;Notification &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/#notification&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When all of that is succesful I get emails from Github both for when the bot approves the PR and for when it merges it.&lt;/p&gt;</description>
      <pubDate>Sat, 20 Apr 2024 24:00:00 GMT</pubDate>
      <dc:creator>statox</dc:creator>
      <guid>https://www.statox.fr/posts/2024/04/github_dependabot_auto_merge/</guid>
    </item>
    <item>
      <title>Javascript codegolf tips</title>
      <link>https://www.statox.fr/posts/2021/05/javascript_golf_tips/</link>
      <description>&lt;p&gt;See also my &lt;a href=&quot;https://www.statox.fr/posts/2025/01/python_golf_tips/&quot;&gt;Python golf page&lt;/a&gt;&lt;/p&gt;&lt;center&gt;&lt;i style=&quot;color:grey&quot;&gt;This page is a work in progress. I want to keep adding stuff I already know when I think of using it and new stuff when I discover it.&lt;/i&gt;&lt;/center&gt;&lt;br/&gt;&lt;p&gt;I love to play on &lt;a href=&quot;https://www.codingame.com&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;codingame&lt;/a&gt; it&#39;s a great way to keep your algorithmic skills sharp while working on playful problems. One of my favorite game on this site is the &lt;a href=&quot;https://www.codingame.com/multiplayer/clashofcode&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Clash of Code&lt;/a&gt;: a short competition against up to 8 players lasting at most 15 minutes.&lt;/p&gt;&lt;p&gt;There are several types of clashes (fastest to get the right solution, reverse engineering and shortest code) and recently the shortest code became one of my favorite. Since I start to have a decent ranking I compiled some tricks I use in javascript to shorten my code. Some save several bytes and other only save a few but learning how to combine them and when to use them can lead a long way.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/clash_of_code_rank.png&quot; alt=&quot;My ranking on June 16th 2023&quot;/&gt;&lt;/p&gt;&lt;center&gt;&lt;i&gt;My ranking on 13/06/23: 78/571.284 Top 0.01%ðŸ˜Ž&lt;/i&gt;&lt;/center&gt;&lt;h3 id=&quot;resources&quot; tabindex=&quot;-1&quot;&gt;Resources &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#resources&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A list of the various codingame problems with their stats: &lt;a href=&quot;https://chadok.info/codingame/puzzles_list.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;chadok.info&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;type-conversions&quot; tabindex=&quot;-1&quot;&gt;Type conversions &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#type-conversions&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;decimal-string-to-number&quot; tabindex=&quot;-1&quot;&gt;Decimal string to Number &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#decimal-string-to-number&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;When an input is expected to be a number examples usually use the following code:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is 10 characters just to parse a number from a string. Using the unary operator &lt;code&gt;+&lt;/code&gt; on a string will cast it to a number. Example:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;12&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &#39;number&#39;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// t=3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that if you need to add a variable which is a number to a string representing a number you will need to use the string first or add a whitespace before the &lt;code&gt;+&lt;/code&gt; operator:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

n &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// string: &#39;11&#39;&lt;/span&gt;
n &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// number: 2&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// number: 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;binary-string-to-number&quot; tabindex=&quot;-1&quot;&gt;Binary string to Number &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#binary-string-to-number&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;101&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 5&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;0b101&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 5&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;0b101&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;number-to-binary-string&quot; tabindex=&quot;-1&quot;&gt;Number to binary string &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#number-to-binary-string&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/a/16155417&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this SO answer&lt;/a&gt;&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &#39;110&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// For negative numbers&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;ascii&quot; tabindex=&quot;-1&quot;&gt;ASCII &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#ascii&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 97&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 65&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;position-in-the-alphabet&quot; tabindex=&quot;-1&quot;&gt;Position in the alphabet &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#position-in-the-alphabet&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If not considering the case&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;abcdefghijklmnopqrstuvwxyz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [0, 1, 2, 3..., 25];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;loops&quot; tabindex=&quot;-1&quot;&gt;Loops &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#loops&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;for-%3C-while&quot; tabindex=&quot;-1&quot;&gt;For &amp;lt; while &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#for-%3C-while&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;for&lt;/code&gt; loops are most of the time the most byte efficient way to write loops.&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;declarations-in-for-loop-first-statement&quot; tabindex=&quot;-1&quot;&gt;Declarations in &lt;code&gt;for&lt;/code&gt; loop first statement &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#declarations-in-for-loop-first-statement&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;In javascript you can combine some statements with &lt;code&gt;,&lt;/code&gt; and this can be used to put a lot of things. Say you need to read two values and then iterate between these two:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 44 bytes&lt;/span&gt;
a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 37 bytes&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;realine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is an example of a code I made for a challenge using this kind of declarations:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; readline&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; m&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    t &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; m&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;for-(...-of-...)&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;for (... of ...)&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#for-(...-of-...)&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;When you need to iterate on a list the &lt;code&gt;for (iterator of list)&lt;/code&gt; syntax is much shorter than &lt;code&gt;for (i=0; i&amp;lt;list.length; i++)&lt;/code&gt;, but also most of the time is beats functions like &lt;code&gt;.forEach&lt;/code&gt; or &lt;code&gt;.map&lt;/code&gt; because you don&#39;t need the arrow function and the iterator is available:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Good&lt;/span&gt;
l&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Better&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; l&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Top&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;variables-declaration-and-initialization&quot; tabindex=&quot;-1&quot;&gt;Variables declaration and initialization &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#variables-declaration-and-initialization&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;get-rid-of-explicit-declaration-statements&quot; tabindex=&quot;-1&quot;&gt;Get rid of explicit declaration statements &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#get-rid-of-explicit-declaration-statements&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Code golf solutions are often very short and not complex enough to require switching between different scopes. So most of the time you can loose the &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; and others &lt;code&gt;var&lt;/code&gt; from your code.&lt;/p&gt;&lt;p&gt;You should always have in mind the implications of not implicit scopes but that saves you a lot of characters.&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 58 bytes&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 37 bytes&lt;/span&gt;
n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;chained-declarations&quot; tabindex=&quot;-1&quot;&gt;Chained declarations &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#chained-declarations&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;You&#39;ve probably tried to do this in a project and had eslint yelling at you for doing that, but in codegolf that saves bytes:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;
b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;math&quot; tabindex=&quot;-1&quot;&gt;Math &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#math&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;replacing-math-built-ins-with-bitwise-operations&quot; tabindex=&quot;-1&quot;&gt;Replacing Math built-ins with bitwise operations &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#replacing-math-built-ins-with-bitwise-operations&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;In math challenges using bitwise operations are often very powerful. This is not something every developer is used to but it&#39;s worth knowing them&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
n &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
n &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
x &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
y &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;dividing-by-a-power-of-2-with-bitwise-operators&quot; tabindex=&quot;-1&quot;&gt;Dividing by a power of 2 with bitwise operators &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#dividing-by-a-power-of-2-with-bitwise-operators&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Shifting right divides and rounds the result by the power of two&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;get-rid-of-leading-zeros&quot; tabindex=&quot;-1&quot;&gt;Get rid of leading zeros &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#get-rid-of-leading-zeros&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;conditions&quot; tabindex=&quot;-1&quot;&gt;Conditions &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#conditions&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;the-ternary-operator&quot; tabindex=&quot;-1&quot;&gt;The ternary operator &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#the-ternary-operator&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The ternary operator&lt;/a&gt; is precious to avoid lengthy conditional expressions.&lt;/p&gt;&lt;p&gt;Always be mindful of what you use in your conditional expressions, sometimes putting them in another way can save a byte or two while preserving the same feature:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;same&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;higher&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lower&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;higher&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lower&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;same&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;using-%26%26-and-%7C%7C&quot; tabindex=&quot;-1&quot;&gt;Using &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#using-%26%26-and-%7C%7C&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;TODO Find some good examples for this one&lt;/strong&gt;&lt;br/&gt;Sometimes you need to execute something only if you match a condition and &lt;code&gt;if&lt;/code&gt; statements are not always the shortest solutions. Instead you can use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; to execute an instruction only when the first one returns true:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;t&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;t&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;a&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Consider a problem where you need to find the &lt;code&gt;n&lt;/code&gt;th digit in a string of all palindromic numbers concatenated.&lt;br/&gt;You will need to generate the string &lt;code&gt;123456789112233445566778899101...&lt;/code&gt;. One way to do it is the following:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;join&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        s &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While the &lt;code&gt;n&lt;/code&gt;th digit of the string doesn&#39;t exists continue to search for number which are palindromes.&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;join&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;codingame-particularities&quot; tabindex=&quot;-1&quot;&gt;Codingame particularities &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#codingame-particularities&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;These tips are only useful on the codingame website.&lt;/p&gt;&lt;h4 id=&quot;shorten-readline-calls&quot; tabindex=&quot;-1&quot;&gt;Shorten &lt;code&gt;readline&lt;/code&gt; calls &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#shorten-readline-calls&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Codingame provides a &lt;code&gt;readline()&lt;/code&gt; function to get the inputs of a problem. This function will read one line of standard input and return it as a string without the new line character.&lt;/p&gt;&lt;p&gt;If you need to use &lt;code&gt;readline()&lt;/code&gt; more than one it will be cheaper to store it in a variable first:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 27 bytes&lt;/span&gt;
n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 24 bytes&lt;/span&gt;
r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; readline&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is only 3 characters saved but the more calls to &lt;code&gt;readline()&lt;/code&gt; you need to write the more characters you save.&lt;/p&gt;&lt;h4 id=&quot;execute-code-in-the-readline-arguments&quot; tabindex=&quot;-1&quot;&gt;Execute code in the &lt;code&gt;readline&lt;/code&gt; arguments &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#execute-code-in-the-readline-arguments&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;You can use javascript scope smartly to reduce the number of bytes needed to get the inputs. To do so keep in mind that if you pass a variable assignation as the argument of a function the variable is still available in your current scope.&lt;/p&gt;&lt;p&gt;For example let&#39;s say you need to read two strings &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; and to init a counter &lt;code&gt;i&lt;/code&gt; to zero:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 28 bytes&lt;/span&gt;
r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; readline&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This can be shortened like this:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 26 bytes&lt;/span&gt;
r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; readline&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;âš  The order of calls made to &lt;code&gt;r()&lt;/code&gt; is important here: The first call made to the function should be the most nested.&lt;/p&gt;&lt;h4 id=&quot;use-tagged-templates-to-shorten-some-function-calls&quot; tabindex=&quot;-1&quot;&gt;Use tagged templates to shorten some function calls &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#use-tagged-templates-to-shorten-some-function-calls&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;See the MDN doc for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;tagged templates&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Basically if you pass to a function a template literal with some placeholders like this:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;myTagFn&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;str1 &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;a&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; str2 &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;b&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; str3&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The function will get as parameters 1) the resulting array of splitting the template literal on each placeholders and 2) the different placeholders. E.g.:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const myTagFn = (strings, ...args) =&amp;gt; {
    console.log(strings); // [ &#39;str1 &#39;, &#39; str2 &#39;, &#39; str3&#39; ]
    console.log(args);    // [ 1, 2 ]
}

const a = 1
const b = 2
myTagFn`str1 ${a} str2 ${b} str3`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It turns out that many methods of the standard library work as tag functions which allows to remove the parenthesis around their arguments. For example:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ab cd ef&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&#39;ab cd ef&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&#92;r&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;join&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#92;r&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;replace-console.log-by-print&quot; tabindex=&quot;-1&quot;&gt;Replace &lt;code&gt;console.log&lt;/code&gt; by &lt;code&gt;print&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#replace-console.log-by-print&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To pass your result to codingame validators you need to write it to the standard output. In regular javascript this is done with &lt;code&gt;console.log&lt;/code&gt; however codingame&#39;s environment supports the deprecated &lt;code&gt;print&lt;/code&gt; which works exactly the same:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;valid&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;valid&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;stop-your-program-with-an-invalid-command&quot; tabindex=&quot;-1&quot;&gt;Stop your program with an invalid command &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/05/javascript_golf_tips/#stop-your-program-with-an-invalid-command&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;In some cases where you need to stop your program immediately it is possible to use an invalid instruction rather than trying to use e.g. &lt;code&gt;process.exit()&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This work because codingame validate the standard output of your program but not that it ran without errors. This is a bogus example just to show my point: Imagine you need to iterate through a list looking for the first value matching a condition, knowing that several values will match it. You&#39;ll want to avoid printing the next values so you need to stop the program altogether. You could use &lt;code&gt;process.exit()&lt;/code&gt; but using &lt;code&gt;Z&lt;/code&gt; (assuming that you didn&#39;t define the variable) is much shorter:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*condition*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*condition*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Z&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <pubDate>Thu, 07 Sep 2023 24:00:00 GMT</pubDate>
      <dc:creator>statox</dc:creator>
      <guid>https://www.statox.fr/posts/2021/05/javascript_golf_tips/</guid>
    </item>
    <item>
      <title>Programmatically update Zoom&#39;s virtual background</title>
      <link>https://www.statox.fr/posts/2022/07/zoom_virtual_background/</link>
      <description>&lt;p&gt;Recently I created a script which automatically downloads &lt;a href=&quot;https://apod.nasa.gov/apod/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NASA&#39;s Astronomy Picture of the Day&lt;/a&gt; and sets it as the wallpaper of my computer. This was fun but I also wanted to set the picture as my virtual background in Zoom so that &lt;s&gt;I have another pretext to bore my coworkers with space stuff&lt;/s&gt; my teammates could also enjoy the cool astronomy pictures of the Nasa.&lt;/p&gt;&lt;p&gt;The issue was that when I dug into Zoom&#39;s documentation I couldn&#39;t find a reliable way to change my own virtual background without using the GUI. So I went with a hacky solution which seems to work well for my use case.&lt;/p&gt;&lt;p&gt;The solution is not perfect and I only tested it for my particular use case, but the result makes me happy so here it is:&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;When I couldn&#39;t find in the different SDKs and APIs offered by zoom a way to change the user&#39;s virtual background I first thought that I was missing something and decided to check the &lt;a href=&quot;https://marketplace.zoom.us/search?q=background&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Zoom apps marketplace&lt;/a&gt; looking for apps which would already do what I want.&lt;/p&gt;&lt;p&gt;It turned out the only relevant apps I could find were ones which add new Virtual Background to the ones available in the app but never set a background for the user.&lt;/p&gt;&lt;p&gt;That meant that I had to find a different way, a hacky way ðŸ˜ˆ&lt;/p&gt;&lt;p&gt;On Linux, Zoom stores its data in &lt;code&gt;$HOME/.zoom/data/&lt;/code&gt; and in this directory there is a subdirectory named &lt;code&gt;VirtualBkgnd_Custom&lt;/code&gt; which is quite interesting.&lt;/p&gt;&lt;p&gt;When the user sets a virtual background the image is actually copied to this directory and renamed with a random uuid.&lt;/p&gt;&lt;p&gt;The interesting thing is that Zoom doesn&#39;t do any validation or caching of any kind: You can just replace this image, restart the app and &lt;em&gt;voila&lt;/em&gt; the virtual background has been changed.&lt;/p&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; myNewBackground.jpg &lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/.zoom/data/VirtualBkgnd_Custom/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;d04bd4b9-57d8-44a1-9cd7-31cea7945157&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So with a chunk of javascript and a tiny bit of shell I made &lt;a href=&quot;https://github.com/statox/NWotD&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this repo&lt;/a&gt;: A nodeJS program which downloads the picture and changes the wallpaper and the zoom background added to a cron table and the job is done. I took some shortcuts which probably make the tool only work on my machine, but maybe I&#39;ll make it more robust one day when I get a new computer or reinstall my system.&lt;/p&gt;</description>
      <pubDate>Fri, 15 Jul 2022 24:00:00 GMT</pubDate>
      <dc:creator>statox</dc:creator>
      <guid>https://www.statox.fr/posts/2022/07/zoom_virtual_background/</guid>
    </item>
    <item>
      <title>Stuff I&#39;ve done these past 6 months</title>
      <link>https://www.statox.fr/posts/2022/04/updates_04_22/</link>
      <description>&lt;p&gt;I haven&#39;t created new posts on this site for the past 6 months but it doesn&#39;t mean I haven&#39;t been productive! Not that anyone care but I&#39;m sure it will make me feel good to write about my past projects.&lt;/p&gt;&lt;p&gt;So here is an unordered overview of my past 6 months!&lt;/p&gt;&lt;h3 id=&quot;i&#39;m-playing-music-now&quot; tabindex=&quot;-1&quot;&gt;I&#39;m playing music now &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/04/updates_04_22/#i&#39;m-playing-music-now&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I&#39;ve been playing the guitar as a beginner for the past 15 years now. I learned a few chords, one or two strumming patterns and used that on every songs. That was enough fun for me until December of last year. For the first time I played the guitar with a few colleagues for a small show at Dashlane&#39;s Christmas party. This wasn&#39;t the musical show of the century but for us to rehearse we booked a recording studio in the north of Paris and that was a super fun experience!&lt;/p&gt;&lt;p&gt;I realized that I was bored playing music by myself and that playing with other people would be more fun! So I did several things.&lt;/p&gt;&lt;h4 id=&quot;pedals%2C-pedals%2C-pedals&quot; tabindex=&quot;-1&quot;&gt;Pedals, pedals, pedals &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/04/updates_04_22/#pedals%2C-pedals%2C-pedals&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;First, I got myself a &lt;a href=&quot;https://www.boss.info/global/products/rc-10r/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Boss RC-10R&lt;/a&gt; looper pedal. This is super fun to use because it has a bank of drum sounds and it allows me to record several layers of music on the same loop. This is not the same thing as playing with other people but this is good exercise to improve my sense of rhythm and to create music a bit more thought-out than my usual chord progressions. While searching for a loop pedal I also came across the &lt;a href=&quot;https://www.digitech.com/band-creator/TRIOPLUS.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Trio+ Band Creator by Digitech&lt;/a&gt; which looks like a very solid pedal. Now that I&#39;ve been using the RC-10R there are many small details in the interface which really bother me and I&#39;m considering switching to the Trio+. Maybe I&#39;ll write about that more in depth later.&lt;/p&gt;&lt;p&gt;A few years ago I asked my parents for an overdrive pedal that I had completely forgot about. But while setting up my looper pedal, my dad reminded me of this Behringer BO100 I had and that&#39;s how I seriously fell into a new rabbit hole. The looper and the overdrive give me the ability to record a lead guitar with a clean sound and a much dirtier sounding solo guitar. But I want to go further! So I also bought a secondhand Octaver pedal which allows me to record bass line with my regular guitar (it also has a ton of other uses that I don&#39;t handle very well yet) as well as an &lt;a href=&quot;https://www.zvex.com/guitar-pedals/instant-lo-fi-junky-vertical-guitar-effects-pedal-2021&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&amp;quot;Instant Lofi Junki&amp;quot; pedal by zvex effects&lt;/a&gt;. This is actually a pedal combining a compressor and a vibrato. I haven&#39;t managed to create good lo-fi tracks for now but still it&#39;s a versatile pedal which give me more nuances when I want to add some background chords or some accents in my song.&lt;/p&gt;&lt;p&gt;The logical follow up of buying these new pedals was of course to get a &lt;a href=&quot;https://www.statox.fr/images/pedals/pedalboard_02_2022.jpg&quot;&gt;proper pedalboard&lt;/a&gt;. The subreddit &lt;a href=&quot;https://www.reddit.com/r/pedals/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;r/pedals&lt;/a&gt; and its other sister subs is an awful rabbit hole to fall into. There are so many pedals, so many configurations, so many beautiful pedalboards it really makes you want to spend unholy amounts of money in tools you&#39;ll never know how to use properly! ðŸ˜„&lt;/p&gt;&lt;p&gt;But I&#39;ve been reasonable and I went for a simple, small pedalboard that I plan to grow over time. My pedalboard is now in a state that I can play so that&#39;s nice but in the near future I plan to buy more pedals (I&#39;m especially looking for a good reverb/delay one which would bring more depth to my sound, probably a tuner because it&#39;s convenient, I&#39;m thinking about getting a noise gate but I&#39;m not sure if it&#39;s really worth it I should debug other noises in my system before). I also bought the materials to make my own patch cables with smaller connectors to get more room on my board. And I&#39;ll see what are the next steps after that.&lt;/p&gt;&lt;p&gt;I also seriously wanted to buy an &lt;a href=&quot;https://lottiecanto.com/shop/p/colourpalette&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;electronic kalimba&lt;/a&gt; which sounds incredibly cool but alas last time a new batch was released they were all sold out in less than one minute so I couldn&#39;t buy mine. But I won&#39;t give up I&#39;ll be there for the next batch!&lt;/p&gt;&lt;h4 id=&quot;are-we-rockstars-yet%3F&quot; tabindex=&quot;-1&quot;&gt;Are we rockstars yet? &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/04/updates_04_22/#are-we-rockstars-yet%3F&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;To make the most out of my new pedals I also got into music theory. I never bothered to learn anything more than the name of the notes and I knew that it would be holding me off if I wanted to get better. So I started to learn more about scales, chords, chord progressions and all of that. I still have a lot to learn but it&#39;s a nice thing to get into regularly.&lt;/p&gt;&lt;p&gt;With that I also got two buddies of mine to regularly play music together: We try to book a studio session regularly, we try to work on pieces of music before we meet so that we can play together and it&#39;s a ton of fun! Lately we&#39;ve been trying to play &lt;a href=&quot;https://www.youtube.com/watch?v=PJ7E40Ec5ec&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Narcotic by Liquido&lt;/a&gt; this is not my favorite song ever but together we studied each part of the song, analyzed the different patterns and put all of that in an excel sheet. I&#39;m looking forward to play it with the buddies! In parallel I also started recording myself so currently I&#39;m working on my own version of Liquido where I am playing all the parts excepted for the drums. This is an opportunity to learn how to use Garage Band which is super interesting!&lt;/p&gt;&lt;p&gt;I also try to play with more people, so I&#39;ve been playing with a couple of teammates at Dashlane this is very casual but it was the opportunity to see that I &lt;em&gt;can&lt;/em&gt; play with other people which I&#39;m pretty happy about!&lt;/p&gt;&lt;h3 id=&quot;making-this-site-useful&quot; tabindex=&quot;-1&quot;&gt;Making this site useful &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/04/updates_04_22/#making-this-site-useful&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;So I&#39;m playing music but I&#39;m still a nerd and what&#39;s better than when two of your hobbies come together?&lt;/p&gt;&lt;p&gt;I decided to use this site I&#39;m creating to be a useful resource when I&#39;m playing. So I added several sections:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;I worked a lot on my &lt;a href=&quot;https://www.statox.fr/chords&quot;&gt;chords&lt;/a&gt; page. I use it to list all the chords of the songs I can play so I worked on a clean presentation which works on desktop and mobile and is convenient to search. I added a &amp;quot;Random song&amp;quot; button to avoid playing always the same songs as well as a list of the last songs I added. What I&#39;m at the same time the most proud of and the most ashamed of is the &amp;quot;poor&#39;s man CRM&amp;quot; system I created: I use a Github workflow on the repo of this website to monitor a specific issue of the repo and transform my comments into JSON data that is then committed to my list of chords. This is not super clean but I think it&#39;s a creative and easy way to ease my life. I want to write about that at some point.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;On the &lt;a href=&quot;https://www.statox.fr/music&quot;&gt;music&lt;/a&gt; page I also added different sections. One with all the online resources I&#39;m using to learn music theory. This is not super convenient to use and I&#39;m still thinking out how I want to rework it. And another sections with the manuals and default settings of the pedals I own. This page too is more a first try of something that I want to improve in the future.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So now when I setup myself to play some guitar I can pull my site and have everything I need right at my fingertips! I&#39;m happy with that because I think making things which make your life easier is what the internet and technology is all about.&lt;/p&gt;&lt;p&gt;But the music page is not the only thing I did on this site!&lt;/p&gt;&lt;p&gt;I also added a dedicated &lt;a href=&quot;https://www.statox.fr/posts&quot;&gt;posts&lt;/a&gt; page which contains everything I write and which was previously the home page of this site. That allowed me to create a proper home page where I can display only my latests projects and posts next to my most popular posts. My analytics tell me that literally no one will notice the difference but by now it&#39;s clear that I&#39;m doing this website just to please me (Even this very long article is really written only for my eyes, I know that). Anyway all of these changes were a good opportunity to do some CSS and confirm that it&#39;s really not something I like to work with ðŸ˜…&lt;/p&gt;&lt;p&gt;I also reworked the organization of the code of this blog I started using eleventy macros which is a good compromise between a simple system and full blow component system like modern framework do. In another project I experimented with &lt;a href=&quot;https://svelte.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;sveltejs&lt;/a&gt; which is super simple to start using and seems pretty powerful. All of that helped me improve my front-end development skills which is always good.&lt;/p&gt;&lt;p&gt;Finally I&#39;ve also been working on a CV page where I want to have a good looking and up to date online resume. I started organizing the data to be compliant with eleventy conventions and easy to integrate on this site but I still have to make significant progress on the actual presentation of the data. I have no intention to find a new job in a near future but I think it&#39;s better to do this kind of thing when you are not looking, it limits the stress of the job hunt process when it has to happen.&lt;/p&gt;&lt;p&gt;I have also started 3 different articles for this website that I never finished writing, heh I&#39;m not perfect I often get lazy ðŸ¤·&lt;/p&gt;&lt;h3 id=&quot;keep-coding&quot; tabindex=&quot;-1&quot;&gt;Keep coding &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/04/updates_04_22/#keep-coding&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When I&#39;m not playing music and tweaking this website I also keep practicing my useless side projects! Since November I have worked on several projects which are in the &lt;a href=&quot;https://www.statox.fr/project&quot;&gt;project&lt;/a&gt; page:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I implemented an &lt;a href=&quot;https://codepen.io/statox/full/qBPwaNo&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&amp;quot;instrument&amp;quot;&lt;/a&gt; with p5js. The idea was to experiment with the MIDI capabilities of the library with a dumb project. I am not completely convinced by what I&#39;ve seen and I think in the future I will experiment with other musical JS library to see what I can gete out of them.&lt;/li&gt;&lt;li&gt;In December I did the advent of code. Stopping at day 14 which is two day earlier than in 2020.&lt;/li&gt;&lt;li&gt;To help me learn music scales I implemented the &lt;a href=&quot;https://statox.github.io/chord-wheel/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;chord wheel&lt;/a&gt; which is originally a paper tool coming from a book that I&#39;ve turned into a web page. It would probably deserve a full rewrite to be better organized, bugfree and allow to implement other similar tools (like the &amp;quot;circle of fiths&amp;quot;), again: maybe later...&lt;/li&gt;&lt;li&gt;At Dashlane I&#39;ve been revamping the exercise that we use to interview our candidates and following my usual hobbies I came up with a exercise based on cellular automata. So that was a good excuse to implement some new ones! First I made a simple &lt;a href=&quot;https://statox.github.io/pixijs-langton-ant/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Langton&#39;s Ant&lt;/a&gt; which is not super impressive but was fun to do. I twisted it a bit by coloring the sections created by the pattern. On this project I used pixijs to try alternatives to p5js, that was a long time ago, I didn&#39;t write about it and my memory doesn&#39;t serve me well but I&#39;d say it wasn&#39;t a great experience because otherwise I would have tried it in another project.&lt;/li&gt;&lt;li&gt;And while I was thinking of cellular automata I finally implemented a 1D automata platform for the first time! I called the project &lt;a href=&quot;https://github.com/statox/circular-automata/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;circular automata&lt;/a&gt; because my initial thought was to represent a classical automata with concentric circles. The implementation of the automata was quite simple and the visualization too but this project got super interesting when I decided to use sveltejs in it. With svelte I created a super convenient architecture where I can have one component to run the p5js animation and dedicated components to control the simulation. This component system allows me to easily plug new visualizations, or to test new graphic frameworks (I&#39;m currently experimenting with a threejs component). I think setting up my first project with p5 and svelte is a major break through in my side project as it should allow me to be faster to create well architectured, more complete and more convenient projects, so I&#39;m looking forward to have more time to do new experiments.&lt;/li&gt;&lt;li&gt;In a completely different area I also finally created my &lt;a href=&quot;https://github.com/statox/setup&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;setup repository&lt;/a&gt;. This is something I had been wanting to do for many many years but when my Dashlane computer broke and I had to reinstall of my setup I decided it was the final straw. The great thing is that at Dashlane I have had the opportunity to work a lot with Ansible and to better understand how it is supposed to work and to be used. Also a teammate of mine kindly let me look into his own repository of Ansible playbooks and that got me started. Now I have a collection of playbooks which allow me to setup most of my common tools of a Linux machine from the Desktop environment, to my favorite packages and configurations, to my own dotfiles. This is a project which will keep growing and that I&#39;ll need to evolve regularly like &lt;a href=&quot;https://github.com/statox/dotfiles&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;my dotfiles&lt;/a&gt; but it&#39;s incredibly satisfying to use. I&#39;m also evolving it to handle my different server setups like my OVH box or my local raspberry!&lt;/li&gt;&lt;li&gt;And I also created a script which scraps &lt;a href=&quot;https://apod.nasa.gov/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nasa&#39;s Astronomy picture of the day&lt;/a&gt; every day and sets it up as my desktop background as well as my Zoom virtual background. I intended to write an article about that because Zoom doesn&#39;t allow to you programmatically change your background and I was happy to find a solution but I haven&#39;t found the motivation to do it yet&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;staying-healthy&quot; tabindex=&quot;-1&quot;&gt;Staying healthy &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/04/updates_04_22/#staying-healthy&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Another huge change I have experienced other the last 6 months is that I realized I actually like doing sport. Ever since I was a kid I have never felt particularly attracted by sports (despite doing fencing for close to 10 years ðŸ¤·) and I blame the French school system for that (I should write about it one day, maybe that would be more interesting than my random coding adventures). But since December I&#39;m taking yoga classes and I&#39;m loving it!&lt;/p&gt;&lt;p&gt;I think I&#39;m lucky because I found a great setup where I can do yoga with people I love which is super motivating but I also dared taking classes by myself! I have really enjoyed getting into this yoga thing I knew nothing about, learning the different types of yoga, trying to understand the meaning and the origin of this practice, figuring out what I like and what I don&#39;t... So know I can have a conversation about Yoga and I&#39;ve been going (almost) every week for the past 4 months which I&#39;m really proud about. Maybe at one point I&#39;ll actually start to feel physical benefits but at least for now it&#39;s a good mental health thing to do!&lt;/p&gt;&lt;p&gt;I&#39;m also looking into getting enrolled in a mentoring program for young people who struggle finding a job, I&#39;m still figuring out the details but it might be a great way to give back what life gave me which would be quite cool.&lt;/p&gt;&lt;h3 id=&quot;i&#39;m-doing-well&quot; tabindex=&quot;-1&quot;&gt;I&#39;m doing well &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/04/updates_04_22/#i&#39;m-doing-well&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;So yeah if I reflect on the past 6 months I&#39;ve been doing stuff, I think I&#39;m pretty happy, I have great stuff going on at work and in my personal life too that I won&#39;t write about here and the weather is getting great again! Life is good.&lt;/p&gt;</description>
      <pubDate>Fri, 22 Apr 2022 24:00:00 GMT</pubDate>
      <dc:creator>statox</dc:creator>
      <guid>https://www.statox.fr/posts/2022/04/updates_04_22/</guid>
    </item>
    <item>
      <title>Dockerizing a dev environment</title>
      <link>https://www.statox.fr/posts/2022/03/dockerizing_dev_env/</link>
      <description>&lt;p&gt;âš  This article is posted here so that I can find it back when I want to but it is just some rough note taking for myself. If you are not me, you probably have no interest in reading what&#39;s next.&lt;/p&gt;&lt;h3 id=&quot;step-1&quot; tabindex=&quot;-1&quot;&gt;Step 1 &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/03/dockerizing_dev_env/#step-1&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Expose &lt;code&gt;python --version&lt;/code&gt; to the shell&lt;/p&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; python:2&lt;/span&gt;

&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; /usr/src/app&lt;/span&gt;

&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; pip_requirements.txt ./&lt;/span&gt;

&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; pip install --no-cache-dir -r pip_requirements.txt&lt;/span&gt;

&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CMD&lt;/span&gt; [ &lt;span class=&quot;token string&quot;&gt;&quot;python&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;--version&quot;&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Create the image&lt;/span&gt;
sdocker build &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; dpython &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Run the image and get the result of python --version&lt;/span&gt;
sdocker run &lt;span class=&quot;token parameter variable&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--name&lt;/span&gt; dpython dpython
&lt;span class=&quot;token comment&quot;&gt;# -&gt; Python 2.7.18&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Create an alias to run the container&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;dpython&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sdocker run -it --rm --name dpython dpython&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;step-2&quot; tabindex=&quot;-1&quot;&gt;Step 2 &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/03/dockerizing_dev_env/#step-2&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The container stops running immediately so we can&#39;t use &lt;code&gt;docker exec&lt;/code&gt; on it.&lt;br/&gt;Solution: Never ending entry point.&lt;br/&gt;Not sure this is the best solution, check &lt;a href=&quot;https://devopscube.com/keep-docker-container-running/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://devopscube.com/keep-docker-container-running/&lt;/a&gt; for other options.&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;FROM python:2

WORKDIR /usr/src/app

COPY pip_requirements.txt ./

RUN pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; pip_requirements.txt

ENTRYPOINT &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;tail&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;-f&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;/dev/null&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Create the image with the right name&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; build &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; provisioning/tools

&lt;span class=&quot;token comment&quot;&gt;# Create a container&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--name&lt;/span&gt; provitools provisioning/tools

&lt;span class=&quot;token comment&quot;&gt;# Run a test command in the container&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-ti&lt;/span&gt; provitools &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;echo a&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# -&gt; a&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-ti&lt;/span&gt; provitools &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;python --version&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# -&gt; Python 2.7.18&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;step-3&quot; tabindex=&quot;-1&quot;&gt;Step 3 &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/03/dockerizing_dev_env/#step-3&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Adding docker compose (maybe too early but at least it will be there)&lt;/p&gt;&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;version: &#39;3.7&#39;

services:
    provitools:
        container_name: provitools
        image: provisioning/tools&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;build.sh&lt;/code&gt;&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; build &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-t&lt;/span&gt; provisioning/tools
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker-compose&lt;/span&gt; build&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;start.sh&lt;/code&gt;&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker-compose&lt;/span&gt; up &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Create alias&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;provitools&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;docker exec -ti provitools sh -c &#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Run command in container&lt;/span&gt;
provitools &lt;span class=&quot;token string&quot;&gt;&quot;python --version&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# -&gt; Python 2.7.18&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;step-4&quot; tabindex=&quot;-1&quot;&gt;Step 4 &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/03/dockerizing_dev_env/#step-4&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Add access to provisioning directory&lt;/p&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;version: &#39;3.7&#39;

services:
    provitools:
        container_name: provitools
        image: provisioning/tools
        volumes:
          - /home/adrien/projects/provisioning:/provisioning&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; ,provitools&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sdocker exec -ti provitools sh -c &#39;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; test.file

,provitools &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# -&gt; Shows the test.file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;step-5&quot; tabindex=&quot;-1&quot;&gt;Step 5 &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/03/dockerizing_dev_env/#step-5&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Install jq dependency. Because the base image was python:2 the util &lt;code&gt;apt-utils&lt;/code&gt; is not installed and that makes &lt;code&gt;apt&lt;/code&gt; command fail. So we need to install it first&lt;/p&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; python:2&lt;/span&gt;

&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; /provisioning&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# This is necessary because without apt-utils the apt command doesn&#39;t install packages&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends apt-utils&lt;/span&gt;

&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; apt update&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; apt install -y jq&lt;/span&gt;

&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; pip_requirements.txt ./&lt;/span&gt;

&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; pip install -r pip_requirements.txt&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Yes this is the same command twice. Yes this is necessary. No do not delete it.&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; pip install -r pip_requirements.txt&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# CMD [ &quot;bash&quot;, &quot;--version&quot; ]&lt;/span&gt;
&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&quot;token string&quot;&gt;&quot;tail&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;-f&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;/dev/null&quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;step-6&quot; tabindex=&quot;-1&quot;&gt;Step 6 &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/03/dockerizing_dev_env/#step-6&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We can run ansible playbook. And (somehow?) &lt;code&gt;aws&lt;/code&gt; is installed on the container ðŸ¤·&lt;/p&gt;&lt;p&gt;But it fails because aws doen&#39;t work.&lt;/p&gt;&lt;p&gt;First try: Share the &lt;code&gt;~/.aws&lt;/code&gt; directory by adding this to &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;        volumes:
          - /home/adrien/projects/provisioning:/provisioning
          - /home/adrien/.aws:/root/.aws&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But &lt;code&gt;aws&lt;/code&gt; say it was not configured. So we need to share some environment variables like &lt;code&gt;AWS_PROFILE&lt;/code&gt; and &lt;code&gt;AWS_DEFAULT_PROFILE&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;So we update the alias:&lt;/p&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; ,ansible-playbook&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sdocker exec -e AWS_PROFILE=$AWS_PROFILE -ti provitools ansible-playbook &#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;step-7&quot; tabindex=&quot;-1&quot;&gt;Step 7 &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2022/03/dockerizing_dev_env/#step-7&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I am blocked because I need to forward my ssh agent.&lt;/p&gt;&lt;p&gt;I added &lt;code&gt;-e SSH_AUTH_SOCK=$SSH_AUTH_SOCK&lt;/code&gt; to my alias but the directory is random one with each new invocation of the agent.&lt;/p&gt;&lt;p&gt;So I need to fix that.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.jamesridgway.co.uk/sharing-an-ssh-agent-between-a-host-machine-and-a-docker-container/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;This&lt;/a&gt; provides a solution but my &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; variable is empty&lt;/p&gt;</description>
      <pubDate>Wed, 30 Mar 2022 24:00:00 GMT</pubDate>
      <dc:creator>statox</dc:creator>
      <guid>https://www.statox.fr/posts/2022/03/dockerizing_dev_env/</guid>
    </item>
    <item>
      <title>Implementing a search bar on my static website</title>
      <link>https://www.statox.fr/posts/2021/11/eleventy_search_bar/</link>
      <description>&lt;p&gt;&lt;strong&gt;EDIT January 2024&lt;/strong&gt; The page I mention in this post does not exists anymore. I moved this song book to &lt;a href=&quot;https://apps.statox.fr/songbook&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;my apps website&lt;/a&gt; to benefit from a full JS environment as the static setup of this blog was limiting the features I wanted to develop. The method I describe here though is still valid for eleventy websites.&lt;/p&gt;&lt;p&gt;Recently I added to my website &lt;a href=&quot;https://www.statox.fr/chords&quot;&gt;a page&lt;/a&gt; listing the chords of the songs I like to play on the guitar. This is useful for me to centralize all these bookmarks I had scattered over the years but since the list has almost 500 entries I also wanted to implement a search bar which would allow me to search for a song by its artist and by its title.&lt;/p&gt;&lt;p&gt;Implementing this search feature was a good opportunity to learn a thing or two about front end technologies and also to create yet another dirty feature, just for fun. I ended up with an implementation using less than 10 lines of javascript and bit of CSS. In this post I&#39;ll explain how I did it because I&#39;m happy with the result.&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;An important note:&lt;/strong&gt; This is just a pet project and I&#39;m a backend engineer. My solution is dirty, and I wouldn&#39;t recommend using it for anything in production. It might give you some idea if you have a personnal website on which you want to add a very simple and limited search feature though.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;the-setup&quot; tabindex=&quot;-1&quot;&gt;The setup &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/11/eleventy_search_bar/#the-setup&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I&#39;m building this website with the static site generator &lt;a href=&quot;https://www.11ty.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;eleventy&lt;/a&gt; and I use the &lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;nunjucks&lt;/a&gt; template language by Mozilla to create my templates. With eleventy you have the possibility to create some &amp;quot;data files&amp;quot; which are made available to your templates. So after collecting all my links, I put them in a &lt;a href=&quot;https://github.com/statox/blog/blob/83c9fd3/src/_data/chords.json&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;json file&lt;/a&gt; that I added to my repo. This file is dead simple: it holds an array of items with three fields &lt;code&gt;artist&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; linking to the page of the chords:&lt;/p&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;artist&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Kenny Rogers&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The Gambler&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://tabs.ultimate-guitar.com/tab/kenny-rogers/the-gambler-chords-627779&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;artist&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The Beach Boys&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Surfin&#39; USA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://www.boiteachansons.net/Partitions/The-Beach-Boys/Surfin-USA.php&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    ...
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;I am also in the process of adding a &lt;code&gt;creationDate&lt;/code&gt; field so that I can have more sorting options for this page, but that is still a work in progress.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Now that the list is available to my templates I created a new nunjucks template to show all my songs:&lt;/p&gt;&lt;pre class=&quot;language-jinja2&quot;&gt;&lt;code class=&quot;language-jinja2&quot;&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;sortedChords&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chords&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;sortChords&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;groupby&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;artist&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chords&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;sortedChords&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;td&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;artist&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chord&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chords&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;{# Some omitted logic to define iconClass #}&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;{# based on the type of document linked by chord.url #}&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;chord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;chord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                        &amp;amp;nbsp&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;iconClass&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;td&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is nothing particularly clever here: In the first line &lt;code&gt;chords&lt;/code&gt; is the raw data coming from the JSON file. &lt;code&gt;sortChords&lt;/code&gt; is &lt;a href=&quot;https://github.com/statox/blog/blob/83c9fd3/tools/eleventy/filters.js#L96-L103&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;an eleventy filter I wrote&lt;/a&gt; which sorts the data alphabetically by artist and by title. And the &lt;code&gt;groupby(&amp;quot;artist&amp;quot;)&lt;/code&gt; nunjucks &lt;a href=&quot;https://mozilla.github.io/nunjucks/templating.html#groupby&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;buit-in filter&lt;/a&gt; takes all the data and turns it into a map where the keys are the artist names and the values are lists of the items from the json file.&lt;/p&gt;&lt;p&gt;Once I have my data available I can use a nunjucks loop &lt;code&gt;{% for artist, chords in sortedChords %}&lt;/code&gt; to iterate on all the keys of the map (the artists). For each artist I add a new row in an html table and in this row I can add an unordered list of the songs with a second loop &lt;code&gt;{% for chord in chords %}&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This is what it looks like with some additional CSS:&lt;/p&gt;&lt;img style=&quot;border:5px solid var(--nc-bg-3)&quot; src=&quot;https://www.statox.fr/images/eleventy_search/chords_list.png&quot; alt=&quot;Chords list&quot;/&gt;&lt;h3 id=&quot;the-search&quot; tabindex=&quot;-1&quot;&gt;The search &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/11/eleventy_search_bar/#the-search&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I&#39;m happy with my list of 500 songs but it&#39;s not super easy to navigate: I need to scroll all the way to the song I want to play. To fix that I want to add a search bar in which I can input some text and the list will only show the entries for which the artist name or the song title will match what I wrote.&lt;/p&gt;&lt;p&gt;I&#39;m sure there are a lot of clever ways to do that but I decided to go with the inefficient and dirty way:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create a text input;&lt;/li&gt;&lt;li&gt;Use its &lt;code&gt;oninput&lt;/code&gt; property to call a short javascript function;&lt;/li&gt;&lt;li&gt;The javascript function will iterate over all the HTML elements and add a &lt;code&gt;.hidden&lt;/code&gt; CSS class to the ones which don&#39;t match the query.&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;css&quot; tabindex=&quot;-1&quot;&gt;CSS &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/11/eleventy_search_bar/#css&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The first easy step is to create the &lt;code&gt;.hidden&lt;/code&gt; class in a dedicated css file. When an element has this class its &lt;code&gt;display&lt;/code&gt; attribute is set to &lt;code&gt;none&lt;/code&gt; making it disappear from screen.&lt;/p&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.hidden&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;input&quot; tabindex=&quot;-1&quot;&gt;Input &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/11/eleventy_search_bar/#input&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The input element is super basic too:&lt;/p&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;searchInput&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;oninput&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;doSearch()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I used the &lt;code&gt;oninput&lt;/code&gt; property instead of &lt;code&gt;onchange&lt;/code&gt; because I want to see the songs filtered as I type and not when I&#39;m done typing. That makes the search bar more convenient on mobile.&lt;/p&gt;&lt;h4 id=&quot;adding-data-to-the-html-elements&quot; tabindex=&quot;-1&quot;&gt;Adding data to the HTML elements &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/11/eleventy_search_bar/#adding-data-to-the-html-elements&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Before I can create the function to filter the HTML elements I need to bind some data to these elements. At first I was thinking about going really dirty and using the actual content of my HTML tags, but that wasn&#39;t super convenient and I stumbled upon &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;HTML data attributes&lt;/a&gt; which is a HTML5 feature allowing to associate some data to an element.&lt;/p&gt;&lt;p&gt;Here I have two types of elements I want to show/hide:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; rows which holds the artist and their songs;&lt;/li&gt;&lt;li&gt;The &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; items which holds only the song titles.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And I want the search to act independently on each type of element: If an artist matches my search I want to see all of their songs and I also want to see all of the songs which title matches the search:&lt;/p&gt;&lt;img style=&quot;border:5px solid var(--nc-bg-3)&quot; src=&quot;https://www.statox.fr/images/eleventy_search/chords_search.png&quot; alt=&quot;Chords list search&quot;/&gt;&lt;p&gt;To make that work I decided to add different data for each type of element:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For both the artist &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; and the song &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; I put in the data attribute the name of the artist;&lt;/li&gt;&lt;li&gt;For the artists &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; I add all the concatenated titles of their songs;&lt;/li&gt;&lt;li&gt;For the song &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; I add only the song title;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I put all of this data in a &lt;code&gt;data-values&lt;/code&gt; attribute and I used nunjucks loops once again to concatenate what needs to be concatenated. I also add a &lt;code&gt;;&lt;/code&gt; separator between each value so that I&#39;m sure the search will not overlap two different entries:&lt;/p&gt;&lt;pre class=&quot;language-jinja2&quot;&gt;&lt;code class=&quot;language-jinja2&quot;&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;sortedChords&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chords&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;sortChords&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;groupby&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;artist&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chords&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;sortedChords&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;tr&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;datarow&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-values&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chord&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chords&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;td&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;artist&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chord&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chords&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;datarow&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-values&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;artist&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;chord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;{# Some omitted logic to define iconClass #}&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;{# based on the type of document linked by chord.url #}&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;chord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;chord&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                        &amp;amp;nbsp&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;iconClass&lt;/span&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;}}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;td&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token jinja2 language-jinja2&quot;&gt;&lt;span class=&quot;token delimiter punctuation&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;token tag keyword&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;token delimiter punctuation&quot;&gt;%}&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I also added a CSS class &lt;code&gt;datarow&lt;/code&gt; to both the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;. This is the selector I&#39;ll be using in my javascript to find the elements I need to manipulate in my page.&lt;/p&gt;&lt;h4 id=&quot;the-search-function&quot; tabindex=&quot;-1&quot;&gt;The search function &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/11/eleventy_search_bar/#the-search-function&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Finally a few lines of javascript to make the magic happen:&lt;/p&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doSearch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Get the string entered by the user in the input element&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; searchStr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;searchInput&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// List all the elements which will have to be shown/hidden&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tableLines &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;datarow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// For each element get the content of the data attribute&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// match the content against the query string&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// and change the class accordingly&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; line &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; tableLines&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; values &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dataset&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;values&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;values&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;searchStr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hidden&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hidden&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;the-result&quot; tabindex=&quot;-1&quot;&gt;The result &lt;a class=&quot;header-anchor&quot; href=&quot;https://www.statox.fr/posts/2021/11/eleventy_search_bar/#the-result&quot;&gt;ðŸ”—&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;And here we have a working search bar which you can try live &lt;a href=&quot;https://www.statox.fr/chords/&quot;&gt;on this page&lt;/a&gt;! ðŸŽ‰&lt;/p&gt;&lt;img style=&quot;border:5px solid var(--nc-bg-3);width:50%&quot; src=&quot;https://www.statox.fr/images/eleventy_search/chords_search_animated.gif&quot; alt=&quot;Chords list search&quot;/&gt;&lt;p&gt;It doesn&#39;t take an experienced web developer to see that this solution has its flaws:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;I think that adding all this data in the data attributes increases the size of the page which is probably not great for loading times;&lt;/li&gt;&lt;li&gt;The search algorithm is quite dumb and it scans all the elements in the page, using a more efficient data structure would improve the performances;&lt;/li&gt;&lt;li&gt;I&#39;m really not sure how this would scale with a list 10x or 100x bigger.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;But for my specific use case this is working fine and as it took me ~10 years to create the list of 500 songs I don&#39;t think the size will become an issue before many more years. Also I&#39;m fairly confident that I&#39;d be able to reuse these pieces of code to create other search bar on my site: All I need is to have html elements with the class &lt;code&gt;.datarow&lt;/code&gt; and some data to filter in their &lt;code&gt;data-value&lt;/code&gt; attributes.&lt;/p&gt;&lt;p&gt;If you read this article I hope that it made you want to experiment with you own personal website and that it gave you the idea to test something ugly and inefficient just for fun!&lt;/p&gt;</description>
      <pubDate>Wed, 10 Nov 2021 24:00:00 GMT</pubDate>
      <dc:creator>statox</dc:creator>
      <guid>https://www.statox.fr/posts/2021/11/eleventy_search_bar/</guid>
    </item>
  </channel>
</rss>