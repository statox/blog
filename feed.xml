<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The stuff I do</title>
  <subtitle>statox&#39;s blog</subtitle>
  <link href="https://www.statox.fr/feed.xml" rel="self"/>
  <link href="https://www.statox.fr/"/>
  <updated>2021-03-07T00:00:00Z</updated>
  <id>https://www.statox.fr/</id>
  <author>
    <name>statox</name>
  </author>
  
  <entry>
    <title>How to debug a mapping before asking for help on the internet</title>
    <link href="https://www.statox.fr/posts/vim/vim_debug_mapping/"/>
    <updated>2016-05-10T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/vim/vim_debug_mapping/</id>
    <content type="html">&lt;p&gt;After participating on &lt;a href=&quot;https://vi.stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vi.stackexchange&lt;/a&gt; for a few years as well as lurking &lt;a href=&quot;https://reddit.com/r/vim&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;/r/vim&lt;/a&gt; I noticed that creating mappings in Vim is not completely trivial for a new user.&lt;/p&gt;
&lt;p&gt;As Vim has been my favorite text editor since around 2015 I really enjoy helping new users getting more comfortable with it and creating their config just the way they want. That&#39;s why I read and answered quite a few questions about Vim mappings. Eventually, I noticed some recurring patterns and decided that I wanted to address the most common errors. To do so I wrote a generic question on vi.stackexchange and tried to explain the root causes of the most common issues when one creates a mapping in vim.&lt;/p&gt;
&lt;p&gt;It was fun to write but it is also pretty satisfying to see that this is my most read and upvoted answer! I believe that as long as new people will learn to use Vim these issues will still need to be addressed and I hope that what this post will do.&lt;/p&gt;
&lt;p&gt;I think in the future I&#39;ll try to make an actual blog post about that maybe digging on more exotic edge cases.&lt;/p&gt;
&lt;p&gt;But for now, this is a link I have sent to a lot a new vimmers and it seems to have been helpful to some of them: &lt;a href=&quot;https://vi.stackexchange.com/q/7722/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How to debug a mapping?&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>GOD.vim - The easiest way to quote Vim&#39;s help</title>
    <link href="https://www.statox.fr/posts/vim/GOD_vim/"/>
    <updated>2017-02-01T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/vim/GOD_vim/</id>
    <content type="html">&lt;h3&gt;I love to Quote the doc&lt;/h3&gt;
&lt;p&gt;I often participate on the &lt;a href=&quot;https://vi.stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vi.stackexchange&lt;/a&gt; website because this community really helped me to get going with Vim when I first started using it and because it feels great to be able to help new vimmers.&lt;/p&gt;
&lt;p&gt;When I write an answer I always try to think about how I can not only help the user to achieve what they want to do, but more importantly how I can help them to answer their own question next time they have one. And the best way to do that is to help them getting comfortable with the help.&lt;/p&gt;
&lt;p&gt;Indeed Vim has an amazing built-in help system accessible directly from the editor itself using the command &lt;code&gt;:h&lt;/code&gt;. So whenever I write my answers I do my best to add the relevant help topics. And I also like to add a link to one of the several online version of the help&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vimdoc.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;http://vimdoc.sourceforge.net/&lt;/a&gt; That I used at first but the anchoring of the topics were not always deterministic so it was to practical to use.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vimhelp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://vimhelp.org/&lt;/a&gt; Which I currently use.&lt;/li&gt;
&lt;li&gt;And even &lt;a href=&quot;https://neovim.io/doc&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://neovim.io/doc&lt;/a&gt; for neovim users.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;But it&#39;s painful&lt;/h3&gt;
&lt;p&gt;For a long time I just wrote the help command like &lt;code&gt;:h autocmd-events&lt;/code&gt; in my answers but this was not convenient:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First I have to do my own research in the help system, like any vimmer would do.&lt;/li&gt;
&lt;li&gt;Then I have to copy the help topic to my clipboard&lt;/li&gt;
&lt;li&gt;In the web interface I have to redundantly type the string &lt;code&gt;:h &lt;/code&gt; and add the help topic.&lt;/li&gt;
&lt;li&gt;Then because I think new users are more inclined to read the doc if it is available right under their hand I look for the topic on an online version of the help&lt;/li&gt;
&lt;li&gt;Finally I can update my markdown with the right link&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After doing that for a few months and feeling the pain I started creating a short hack in my &lt;code&gt;.vimrc&lt;/code&gt; to improve this workflow, until the day I read &lt;a href=&quot;https://vi.stackexchange.com/q/4346/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How can I quickly convert a Vim help tag to a vimhelp.appspot.com link?&lt;/a&gt;. This question confirmed that this action was a pain point for other people and that pushed me to create a proper plugin.&lt;/p&gt;
&lt;h3&gt;So let&#39;s create a plugin!&lt;/h3&gt;
&lt;p&gt;So I created &lt;a href=&quot;https://github.com/statox/GOD.vim&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GOD.vim&lt;/a&gt; this is a very simple plugin which goal is to easily get a markdown expression describing a help topic and linking to its online version. The plugin does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new command &lt;code&gt;:GOD&lt;/code&gt; which takes the exact same parameter as &lt;code&gt;:h&lt;/code&gt;. The autcomplete behavior is completely duplicated thanks to &lt;a href=&quot;http://vimhelp.appspot.com/map.txt.html#%3Acommand-nargs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h :command-nargs&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://vimhelp.appspot.com/map.txt.html#%3Acommand-complete&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h :command-complete&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;https://github.com/statox/GOD.vim/blob/bed2a6fe9458284760d6fb5f08495e6579ce69dd/plugin/GOD.vim#L16&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;how I create the command&lt;/a&gt;:&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;command&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;nargs&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;help&lt;/span&gt; GOD &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; GOD#&lt;span class=&quot;token function&quot;&gt;GetOnlineDoc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;vimhelp&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Open the corresponding help page, parse the help topics under the cursor and get the first one.&lt;/li&gt;
&lt;li&gt;Use this string to build a URL to the relevant help website.&lt;/li&gt;
&lt;li&gt;Use this URL to generate a markdown template of the form &lt;code&gt;[:h help-topic](https://url-of-the-help.com/escaped-help-topic)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy this template to the clipboard.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also added some additional features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being able to link either to the vim help or the neovim help using respectively &lt;code&gt;:GOD&lt;/code&gt; and &lt;code&gt;:NGOD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Being able to have a nicely formatted markdown list if several help topics are given as parameters to the command.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think the trickiest part about writing this plugin was to create a pure vimscript encoding function to handle the URLs. Indeed a lot of help topics have some characters which need to be URL encoded. The first version of my encoding function didn&#39;t work very well but fortunately I got the help of great developers from the &lt;a href=&quot;https://vi.stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vi.stackexchange&lt;/a&gt; community, namely &lt;a href=&quot;https://luchermitte.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Luc Hermitte&lt;/a&gt; and &lt;a href=&quot;https://www.arp242.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Martin Tournoij&lt;/a&gt; who helped me with different parts of this plugin and in particular who helped me coming up with this function:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Encode url&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;URLEncode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; abort&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Replace each non hex character of the string by its hex representation&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a:str[v:val] =~ &quot;[a-zA-Z0-9\-._]&quot; ? a:str[v:val] : printf(&quot;%%%02x&quot;, char2nr(a:str[v:val]))&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfun&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It takes an help topic as a parameter like &lt;code&gt;/\@&amp;lt;=&lt;/code&gt;, iterates on each characters of the string and if the character doesn&#39;t match &lt;code&gt;/[a-zA-Z0-9\-._]/&lt;/code&gt; (i.e. characters which don&#39;t need to be URL encoded) it uses &lt;a href=&quot;http://vimhelp.appspot.com/eval.txt.html#char2nr%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h char2nr()&lt;/code&gt;&lt;/a&gt; to get the numerical value of the character and passes this value to &lt;a href=&quot;http://vimhelp.appspot.com/eval.txt.html#printf%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h printf()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;printf()&lt;/code&gt; is used with the following format: &lt;code&gt;%%%02x&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%%&lt;/code&gt; is used to insert a litteral &lt;code&gt;%&lt;/code&gt; character (which is used in URL encoding to specify encoded characters)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%02x&lt;/code&gt; is used to get the hex value of the character. &lt;code&gt;02&lt;/code&gt; is the number of &lt;code&gt;0&lt;/code&gt; to use for the padding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With our example topic &lt;code&gt;/\@&amp;lt;=&lt;/code&gt; the function returns &lt;code&gt;%2f%5c%40%3c%3d&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Field tested&lt;/h3&gt;
&lt;p&gt;I&#39;ve been using this plugin regularly for several years now and I don&#39;t recall encountering a topic which didn&#39;t work well. And of course it is always a great satisfaction to create a tool that you still continue to use several years after you first needed it!&lt;/p&gt;
&lt;p&gt;The sources of the plugin and its documentation are &lt;a href=&quot;https://github.com/statox/GOD.vim&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Github&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Changing my Vim colorscheme depending on the time of the day</title>
    <link href="https://www.statox.fr/posts/vim/vim_colorscheme_changer/"/>
    <updated>2017-09-22T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/vim/vim_colorscheme_changer/</id>
    <content type="html">&lt;h3&gt;Automatic colorscheme changer&lt;/h3&gt;
&lt;p&gt;A few years ago, &lt;a href=&quot;https://vi.stackexchange.com/q/13660/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a question on vi.stackexchange&lt;/a&gt; caught my attention. @oarfish wanted a way to change their colorscheme depending on the time of the day.&lt;/p&gt;
&lt;p&gt;In a world where Apple has a tool by default on most of its devices to change the colorscheme from dark to light during the day and where a lot of developpers use extensively &lt;a href=&quot;https://justgetflux.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;f.lux&lt;/a&gt; or &lt;a href=&quot;http://jonls.dk/redshift/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;redshift&lt;/a&gt; it does make sense to be able to change your favorite text editor colorscheme automatically too.&lt;/p&gt;
&lt;p&gt;To add this feature I made a very simple plugin which takes for variables as its configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g:dayTime&lt;/code&gt; and &lt;code&gt;g:nightTime&lt;/code&gt; which are two arrays used to describe when in the plugin should switch the colorscheme in the morning and in the evening.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g:dayColorscheme&lt;/code&gt; and &lt;code&gt;g:nightColorscheme&lt;/code&gt; which are the names of the colorschemes to use for each time of the day.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source code is on &lt;a href=&quot;https://github.com/statox/colorscheme-changer.vim&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This plugin leverages the timer function of Vim &amp;gt;8 and neovim (See &lt;a href=&quot;http://vimhelp.appspot.com/eval.txt.html#timers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h timers&lt;/code&gt;&lt;/a&gt;) to regularly check the current system hour, compare it to the configurations of the plugin and call &lt;code&gt;:colorscheme&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;p&gt;This was interesting to create this plugin because I didn&#39;t have an opportunity to play with Vim&#39;s timers before. However after a few days of use I realized that I actually like my colorscheme and I don&#39;t want to change it during the day. So I soon stopped using this plugin but this gave me another idea.&lt;/p&gt;
&lt;h3&gt;Event based colorscheme changer&lt;/h3&gt;
&lt;p&gt;I noticed that my main pain point related to my colorscheme was when I switch vim to the diff mode using &lt;a href=&quot;http://vimhelp.appspot.com/diff.txt.html#%3Adiffthis&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h :diffthis&lt;/code&gt;&lt;/a&gt;. I realized that my current colorscheme didn&#39;t do as well as the previous one in diff mode. So I came up with a pretty simple trick in my &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Color configuration&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;&quot; Define the default colorscheme and the one used in diff mode&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;colorsDefault  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;forest-night&#39;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;colorsDiff     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;jellybeans&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;&quot; Set up the default colorscheme when vimrc is sourced&lt;/span&gt;&lt;br /&gt;        execute &lt;span class=&quot;token string&quot;&gt;&quot;colorscheme &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;colorsDefault&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;br /&gt;        echo &lt;span class=&quot;token string&quot;&gt;&quot;Colorscheme not found&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;endtry&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Diff configurations&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Easier diff commands&lt;/span&gt;&lt;br /&gt;    command&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; DT execute &lt;span class=&quot;token string&quot;&gt;&quot;colorscheme &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;colorsDiff | &lt;span class=&quot;token keyword&quot;&gt;windo&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;diffthis&lt;/span&gt;&lt;br /&gt;    command&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; DO execute &lt;span class=&quot;token string&quot;&gt;&quot;colorscheme &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;colorsDefault | &lt;span class=&quot;token keyword&quot;&gt;windo&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;diffoff&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea is very simple: Declare two variables holding the names of the colorschemes I want to use in normal mode and in diff mode and define some wrapper commands around diffmode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:DT&lt;/code&gt; (For &lt;code&gt;DiffThis&lt;/code&gt;) will change the colorscheme and then switch every window to diffmode&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:DO&lt;/code&gt; (For &lt;code&gt;DiffOff&lt;/code&gt;) will do the opposite: Switch back to default colorscheme and stop diff mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These lines having been &lt;a href=&quot;https://github.com/statox/dotfiles/blob/7fd57caab6f7e610529b976ec45728c650a1322b/vimrc#L381-L403&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;in my &lt;code&gt;.vimrc&lt;/code&gt;&lt;/a&gt; for a few time now and so far they fit my needs. Maybe in the future I&#39;ll also explain with more details how I handle the diff mode in Vim.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A pool game with my own physic engine</title>
    <link href="https://www.statox.fr/posts/p5/p5-pool/"/>
    <updated>2019-01-10T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/p5-pool/</id>
    <content type="html">&lt;p&gt;Go grab a beer and play the pool &lt;a href=&quot;https://statox.github.io/p5-pool/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;in the demo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;And if that&#39;s your thing you can see the code &lt;a href=&quot;https://github.com/statox/p5-pool&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Pool, snooker, billiard?&lt;/h3&gt;
&lt;p&gt;I love to watch Daniel Shiffman&#39;s videos on Youtube, I can spend &lt;em&gt;hours&lt;/em&gt; binging his channel &lt;a href=&quot;https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Coding Train&lt;/a&gt; and it always gives me some inspiration for new projects.&lt;/p&gt;
&lt;p&gt;This project was specifically inspired by his playlist &lt;a href=&quot;https://www.youtube.com/playlist?list=PLRqwX-V7Uu6aFlwukCmDf0-1-uSR7mklK&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Nature of Code&lt;/a&gt; where he shows how it is possible to simulate physical models with pretty simple javascript and a bit of math.&lt;/p&gt;
&lt;p&gt;After watching some of the videos I decided that I was ready to try to do something on my own, and it was going to be a pool game! (Or a snooker, or a billiard, or whatever it is called... Basically a cue game).&lt;/p&gt;
&lt;h3&gt;A simple simulation&lt;/h3&gt;
&lt;p&gt;What do I need to do that?&lt;/p&gt;
&lt;p&gt;First of all I need a table and some balls rolling on it. This is pretty straightforward: a p5.js canvas will be my table, my balls are simple javascript objects with some coordinates, the ability to apply a force on it (i.e. incrementing the coordinates), a friction force to keep the ball from rolling forever and some tests to prevent the balls from falling out of the table.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;p5&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Vector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;p5&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Vector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Add friction&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; coefficientOfFriction &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.99&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;coefficientOfFriction&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Move the ball&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Check the limits&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; coefficientOfFriction&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; coefficientOfFriction&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Easy, right? With that I can apply a force to a ball (as it&#39;s velocity) and way for the force to shrink over time. As a bonus I used the boundaries check to simply reverse the velocity of the ball, this is a lazy simulation of a perfectly on elastic collision. In real life some energy would be dissipated with the rebound but here, it&#39;s good enough.&lt;/p&gt;
&lt;p&gt;Let&#39;s add to that a simple function to know if a ball is colliding with another one. To do that we can simply check the distance between two balls is larger than the sum of the balls radius. I came up with something quick and dirty, but mostly dirty. Here I knew I wanted to tag all the balls part of a collision:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;isColliding&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;otherBall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Get the distance between the center of the two balls&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; otherBall&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; otherBall&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dx &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; dx &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; dy &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; dy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// The balls touch if their distance is less than the sum of their radiuses&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; minDist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; otherBall&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;distance &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; minDist&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;collided &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        otherBall&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;collided &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having this code I was able to create my pool, put balls on it, apply a force on them and change their color when they hit each other. That is cool... But now what?&lt;/p&gt;
&lt;h3&gt;A not so simple simulation&lt;/h3&gt;
&lt;p&gt;Well now is the time for the balls to bounce on each other when they touch!&lt;/p&gt;
&lt;p&gt;And this is where the project became pretty fun because I didn&#39;t want to use a full blown physics engine, so I did mine... Well I did a function which bounced two circles against each other. The code of this function is &lt;a href=&quot;https://github.com/statox/p5-pool/blob/54c4a280b4d90eb130f1c907b04f75f132f7ec93/Ball.js#L44-L115&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here on Github&lt;/a&gt; (as well as the whole project). It uses some workarounds and still has some bugs (sometimes the balls teleport away from each others when they touch, sometimes they get crazy and go off the table) also it is not really elegant to read... But it works! (Kinda)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Genetic algorithms or how I made a bunch of smart robots</title>
    <link href="https://www.statox.fr/posts/p5/p5-genetic-algorithms/"/>
    <updated>2020-01-23T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/p5-genetic-algorithms/</id>
    <content type="html">&lt;p&gt;If you want to see a bunch of robots blindly running toward a black dot, here is &lt;a href=&quot;https://statox.github.io/p5-genetics/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And &lt;a href=&quot;https://github.com/statox/p5-genetics&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the code&lt;/a&gt; is on Github, it&#39;s not beautiful but it&#39;s free. Now let&#39;s see what I did here.&lt;/p&gt;
&lt;h3&gt;Teaching a machine to do stuff&lt;/h3&gt;
&lt;p&gt;Once of the funniest things to do with a computer or a piece of hardware and is to make it smart. This has been humankind obsession for many decades now and it&#39;s not going to stop anytime soon. Of course there are tons of way to make a piece of silicon smart, but for this project I wanted to explore a very simple category of machine learning algorithms: &lt;em&gt;The genetic algorithms&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Basically the way genetic algorithms works is the following: You take a bunch of things that you want to make smart, you make them accomplish a task in a random way and you score each of them depending on how well they succeeded at the task. Once they are all done you eliminate the worst ones and you keep the ones which did best. You will then slightly change the remaining ones and make them run the task again. The theory says that your new generation of things should do a bit better than the previous generation. Rinse, repeat and boom after a few generation you have a bunch of things pretty good at doing this one thing you asked them to do.&lt;/p&gt;
&lt;p&gt;I love the idea of these algorithms because it is quite simple to understand and not too hard to implement, which are two important criteria for my side projects. So here I am setting a new p5.js project! My goal here is simple: I want to have a robot learning how to get to a point in a 2D space and I want to be able to manipulate the algorithms parameters easily to better understand how it works.&lt;/p&gt;
&lt;h3&gt;I want to make a smart robot&lt;/h3&gt;
&lt;p&gt;So first thing first, I need to create a robot... Here I will make the simplest robot ever: it will be &lt;em&gt;a square&lt;/em&gt;! All it needs is a position (i.e. a 2 dimensional vector) and a way to change this position. Here is the time to introduce the concept of genes:&lt;/p&gt;
&lt;p&gt;I am creating a genetic algorithm, so it makes sense that at some point some genes are involved, right? Here the genes of a robot will be the pattern it will follow: This is actually a succession of order saying &amp;quot;Go up&amp;quot; or &amp;quot;Go left&amp;quot; or basically &amp;quot;Move of one position in one of the two dimensions of your plan&amp;quot;. Every robot will be created with an array of genes and its life will be devoted to following these instructions.&lt;/p&gt;
&lt;p&gt;My robot will also use some additional properties. I will store its initial position, its size (as a radius, even though it is shown as a square... Mostly because I started with round robots and decided it was simpler to have them squared afterwards) and its lifespan which could be handled differently (e.g. using the size of the genes array) but this way is more convenient for what I want to do next.&lt;/p&gt;
&lt;p&gt;So here is my simple robot:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lifespan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;initY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;p5&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Vector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lifespan &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; lifespan&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ROBOT_SIZE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;genes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Genes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lifespan&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crashed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foundTarget&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s notice that it changes its color depending on if it crashed (i.e touched the border of the frame) or if it reached the target. These calculations are made when the robot moves.&lt;/p&gt;
&lt;h3&gt;Actually, &lt;em&gt;a bunch&lt;/em&gt; of smart robots&lt;/h3&gt;
&lt;p&gt;So having a robot and making it move is good but to create a genetic algorithm I need to use more bots. So I will need to create a crowd of robots all starting at the same position but all with different genes (and that makes each robot unique and beautiful, just like you 🤗):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Crowd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;robots &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;matingPool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;robots&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ROBOT_SIZE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;LIFESPAN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This crowd is the hearth of our algorithm: During a generation each robot will move independently, once they reach their lifespan the crow will inspect all of the bots, check if they reached the target and if they didn&#39;t how far they were from the target or if they crashed against a wall.&lt;/p&gt;
&lt;p&gt;Based on this information it is then possible to rank the robots: The one which crashed will be removed and the other ones will be more advantages the closer they got to the target. To do this the crowd has a mating pool which is reset for each generation: Each robot is then added to the pool a number of times proportional to its efficiency.&lt;/p&gt;
&lt;p&gt;This is great because that will allow me to right a simple function to create the new generation of robots:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Crowd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;evolve&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;robot &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;robots&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        robot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; parentA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;matingPool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; parentB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;matingPool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; child &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; parentA&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parentB&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        robot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;genes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;moves &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; child&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        robot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;genes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For each robot we will take randomly two parents in the mating pool (which favored the efficient robots of the previous generation) and merge their genes which simply mean here that we merge the first half of one parent&#39;s genes with the second half of the other parent&#39;s genes. This could have been done in a lot of different ways like take every other genes of the parents or taking them randomly.&lt;/p&gt;
&lt;p&gt;And then come the magical random touch: &lt;code&gt;robot.genes.mutate()&lt;/code&gt; will move a few genes of this new robot, this way some will get better and some worst and the natural selection will do its job on the next generation:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Genes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;mutate&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; mutationCnt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;moves&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;MUTATION_RATE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            mutationCnt&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;moves&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;generateNewMove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;And now let&#39;s them to their job&lt;/h3&gt;
&lt;p&gt;Now that I have all the important components of the algorithm I can generate a crowd and a target, wait for the robots to become more and more efficient at reaching their target and finally move the target and watch them learn everything again.&lt;/p&gt;
&lt;p&gt;And to please my inner &lt;a href=&quot;http://reddit.com/r/dataisbeautiful&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;/r/dataisbeautiful&lt;/a&gt; fan I also added a few graphs to better visualize the efficiency.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Generating a maze... and then solving it</title>
    <link href="https://www.statox.fr/posts/p5/p5-maze/"/>
    <updated>2020-03-03T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/p5-maze/</id>
    <content type="html">&lt;p&gt;Quick, no time to explain! Have a look at how a computer goes out of a maze &lt;a href=&quot;https://statox.github.io/p5-maze/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;in the demo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;And check out &lt;a href=&quot;https://github.com/statox/p5-maze/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Github&lt;/a&gt; if you want to see the code.&lt;/p&gt;
&lt;h3&gt;Getting out of the maze&lt;/h3&gt;
&lt;p&gt;Solving mazes is not a new topic, every computer science student heard about this topic at least once during their studies and most of them tried to implement a maze solver one way or another. However seeing a computer getting out of a maze is always a source of wonder and excitement to me. I know there is nothing magical in these maze solving algorithms but seeing them getting executed has always been some kind of a kink to me.&lt;/p&gt;
&lt;p&gt;So last time I had a bit of free time I decided to make my own maze solver! It&#39;s nothing fancy: I&#39;m not inventing a new algorithm nor am I looking for something extremely fast but I wanted it to be fun to watch.&lt;/p&gt;
&lt;p&gt;So &lt;a href=&quot;https://statox.github.io/p5-maze/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here is&lt;/a&gt; what I came up with.&lt;/p&gt;
&lt;h3&gt;Run and fight&lt;/h3&gt;
&lt;p&gt;I had two main goals in this project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being able to visualize different algorithms solving the same maze at the same time. This would be what I call an AI fight.&lt;/li&gt;
&lt;li&gt;Being able to generate a maze. Firstly because without a maze it&#39;s useless to have a solver, but also because I wanted to compare different ways to generate a maze.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I used p5.js again to create a grid of cells and destroy the walls between them to create ways. The web application allows to choose the classical backtracking solution as well as a recursive divisor generator. This is not fancy but this works.&lt;/p&gt;
&lt;p&gt;However, doing some researched I also discovered that some cellular automata generate patterns looking like a maze, namely CA &lt;code&gt;B3/S12345&lt;/code&gt; and &lt;code&gt;B3/S1234&lt;/code&gt; (meaning a cell is born if it has exactly 3 alive neighbors and it survives it is has respectively 1,2,3,4 or 5 and 1,2,3 or 4 alive neighbors). The web app also allows to select this generators and even though I had to cheat a bit (sometimes some walls need to be broken to have a valid maze) it was quite exciting to see CAs applied on mazes!&lt;/p&gt;
&lt;p&gt;About the solvers so far I implemented four of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The depth first search and breadth first search algorithms: Classical and not really surprising.&lt;/li&gt;
&lt;li&gt;The wall follower: This one is the less efficient of all but, given there is not island in a maze it will always find the exit. This one is cool because it can easily be applied in the real world.&lt;/li&gt;
&lt;li&gt;The Euristic approach: This one is based on a very smart euristic I chose myself and which can be summed up like this: Between the four next possible cells, choose the one the closest to the exit. To my surprise it works reasonably well but I suspect this is because my mazes are not complex enough.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Cellular automata - Digital life and death</title>
    <link href="https://www.statox.fr/posts/p5/p5-cellular-automaton/"/>
    <updated>2020-05-13T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/p5-cellular-automaton/</id>
    <content type="html">&lt;p&gt;This has been one of my most satisfying project recently so if you want to see cool visualisations of digital life the demo is live &lt;a href=&quot;https://statox.github.io/p5-cellular-automaton/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code of this project is &lt;a href=&quot;https://github.com/statox/p5-cellular-automaton&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Github&lt;/a&gt;, now let me tell you what this is about.&lt;/p&gt;
&lt;h3&gt;Cellular automata are cool!&lt;/h3&gt;
&lt;p&gt;Despite the fact that I never remember which spelling is singular or plural (&lt;code&gt;automaton&lt;/code&gt;? &lt;code&gt;automata&lt;/code&gt;? &lt;code&gt;automat[a|on]s&lt;/code&gt;??) these mathematical concepts have been fascinating me for a long time.&lt;/p&gt;
&lt;p&gt;The principle of a cellular automaton (CA) is quite simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a grid representing some cells;&lt;/li&gt;
&lt;li&gt;The cells can either be dead or alive;&lt;/li&gt;
&lt;li&gt;With each iteration the cells either stay in the same state or change state depending on a set of rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is incredibly cool because given a few simple rules and some random inputs these objects can create surprising and sometimes counter intuitive patterns.&lt;br /&gt;
The first CA I heard about was John Conway&#39;s game of life and it was something like 8 years ago. Since then I have found myself reimplementing a version of this CA every once in a while.&lt;/p&gt;
&lt;p&gt;When I heard that John Conway passed away in 2020 I decided to create a tribute to his work, once again.&lt;/p&gt;
&lt;h3&gt;So I built this&lt;/h3&gt;
&lt;p&gt;For this implementation I had a few things in mind which really mattered to me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First I wanted it to be executable in a browser. Mainly because I need to practice a bit my web development but also because it is easier to share my lovely shiny new project with people.&lt;/li&gt;
&lt;li&gt;I wanted to use &lt;a href=&quot;https://p5js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;p5.js&lt;/a&gt;, an implementation of Processing in the browser which makes it super easy to create cool visuals in a web page.&lt;/li&gt;
&lt;li&gt;I wanted to be able to customize the behavior of the CA very easily.&lt;/li&gt;
&lt;li&gt;I wanted to have a result quickly and be able to iterate on that &lt;em&gt;(otherwise I get bored and never finish my side projects, which is probably the main issue for developers and side projects)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I made &lt;a href=&quot;https://statox.github.io/p5-cellular-automaton/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this little web application&lt;/a&gt; hosted on github pages and using p5.js, bootstrap and some vanilla javascript.&lt;/p&gt;
&lt;p&gt;By default the app will start on a simple Game of Life CA, but in the settings the user can play with different parameters like the size of the grid, the initial density of the alive cells and more interestingly the rules used to decide of the next state of cells.&lt;/p&gt;
&lt;h3&gt;And it&#39;s fun to play with&lt;/h3&gt;
&lt;p&gt;I found a few interesting presets which can be used to create new CA and see cool patterns emerging.&lt;/p&gt;
&lt;p&gt;When I have time I&#39;ll add some pictures here... And maybe a technical write up about how it was done!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Circle packing algorithm (with kittens 🐱)</title>
    <link href="https://www.statox.fr/posts/p5/p5-circle-packing/"/>
    <updated>2020-06-21T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/p5-circle-packing/</id>
    <content type="html">&lt;p&gt;Inspired by a video by &lt;a href=&quot;https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Daniel Shiffman on YouTube&lt;/a&gt; I decided to create a short little project involving circle packing and kittens.&lt;/p&gt;
&lt;p&gt;Before reading my rambling go and watch the kitties &lt;a href=&quot;https://statox.github.io/p5-circles/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;in the demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that for a reason that I don&#39;t understand for now, the demo seems to be working only with chromium/chrome... Maybe I&#39;ll investigate that later on&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And if that was cute enough to make you want to see the code, &lt;a href=&quot;https://github.com/statox/p5-circles&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here you are&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What does it mean?&lt;/h3&gt;
&lt;p&gt;To quote &lt;a href=&quot;https://en.wikipedia.org/wiki/Circle_packing&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In geometry, circle packing is the study of the arrangement of circles (of equal or varying sizes) on a given surface such that no overlapping occurs and so that no circle can be enlarged without creating an overlap.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And to quote &lt;a href=&quot;https://en.wikipedia.org/wiki/Kitten&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the same source&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A kitten is a juvenile cat. After being born, kittens display primary &lt;a href=&quot;https://en.wikipedia.org/wiki/Altriciality&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;altriciality&lt;/a&gt; and are totally dependent on their mother for survival.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So for this project I wanted to use some really cute pictures and duplicate them with a bunch of non overlapping circles.&lt;/p&gt;
&lt;h3&gt;Loading the pictures&lt;/h3&gt;
&lt;p&gt;Before packing circles on these cuties we first need to load the images in our p5.js sketch. To do so I created a &lt;code&gt;reset()&lt;/code&gt; function which will be used each time I need a new image. It&#39;s goal is to get the color of each pixels on the image so that we can use the color later on:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IMAGES&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;data/kitten1.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;data/kitten2.jpg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;data/kitten3.jpg&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Stop calling draw() while we load the picture otherwise we break everything&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;noLoop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// iterate through my image list&lt;/span&gt;&lt;br /&gt;    imgIndex&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imgIndex &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IMAGES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        imgIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;IMAGES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;imgIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// load the image and get the color for each of its pixels&lt;/span&gt;&lt;br /&gt;    img &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;pixelDensity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        circles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        imgColors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;loadPixels&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pixels&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pixels&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            g &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pixels&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pixels&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pixels&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            imgColors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Start the packing again!&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because p5.js is constantly calling the &lt;code&gt;draw()&lt;/code&gt; function I need to use a little trick calling &lt;code&gt;noLoop()&lt;/code&gt; to avoid calling &lt;code&gt;draw()&lt;/code&gt; while there is no data, otherwise things will not work.&lt;/p&gt;
&lt;p&gt;The interesting part of this function is how p5 gives access to the pixels of an image: After calling &lt;code&gt;img.loadPixels()&lt;/code&gt;, the &lt;code&gt;img&lt;/code&gt; object will have a &lt;code&gt;pixels&lt;/code&gt; property containing a list of integers. For each pixels in the image, four integers are added to &lt;code&gt;pixels&lt;/code&gt; one for each of the RGB values of the pixel and a last one for its alpha value.&lt;/p&gt;
&lt;p&gt;Once we looped through all these values we have an array &lt;code&gt;imgColors&lt;/code&gt; containing for &lt;code&gt;P5.Color&lt;/code&gt; object 🎉&lt;/p&gt;
&lt;h3&gt;Generating circles&lt;/h3&gt;
&lt;p&gt;Before we pack the image with circles we need to generate one of them. Here our goal is the following: Return a new circle which does not overlap the others or return nothing (we will handle the failed generations later). So far the algorithm is not very complex: We have a list of existing circles &lt;code&gt;circles&lt;/code&gt; (Empty at the beginning), we generate a random position &lt;code&gt;(x, y)&lt;/code&gt; and a radius &lt;code&gt;r&lt;/code&gt;, we then iterate on the list of existing circles and test if its distance to the newly generated one is larger than the sum of their radius (i.e. they don&#39;t overlap).&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newCircle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MAX_INITIAL_SIZE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; intersection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; circles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;intersection &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; color &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; imgColors&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we can generate one circle let&#39;s make a function which tries to generate a given amount of circles so that one iteration will see several ones created:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newCircles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; totalNewCircles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NEW_CIRCLES_BY_ITERATION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; remainingAttemps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NEW_CIRCLES_ATTEMPTS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; countNewCircles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countNewCircles &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; totalNewCircles &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; remainingAttemps &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        remainingAttemps&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newC &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;newCircle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newC &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            circles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newC&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            countNewCircles&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course the more circles we generate the harder it become to find the right spot for a new one, that why we need to use a maximum number of attempts to avoid blocking the main loop.&lt;/p&gt;
&lt;h3&gt;And making them grow&lt;/h3&gt;
&lt;p&gt;Now that we can generate a bunch of new circle on each iteration, let&#39;s make them grow too and that&#39;s how we pack circles on kittens 💪&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Highlighting yanked text with pure vimscript</title>
    <link href="https://www.statox.fr/posts/vim/vim_flash_yanked_text/"/>
    <updated>2020-07-04T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/vim/vim_flash_yanked_text/</id>
    <content type="html">&lt;p&gt;A few days ago I saw &lt;a href=&quot;https://blog.kdheepak.com/three-built-in-neovim-features.html#highlight-yanked-text&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a blog post&lt;/a&gt; showing a built-in way to highlight yanked text on neovim. The author uses neovim&#39;s lua integration combined with the &lt;a href=&quot;https://neovim.io/doc/user/autocmd.html#TextYankPost&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h TextYankPost&lt;/code&gt;&lt;/a&gt; autocommand event:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;augroup highlightYankedText&lt;br /&gt;    &lt;span class=&quot;token builtin&quot;&gt;autocmd&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin&quot;&gt;autocmd&lt;/span&gt; TextYankPost &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;silent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; lua require&lt;span class=&quot;token string&quot;&gt;&#39;vim.highlight&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on_yank&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;augroup END&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I liked the idea of having visual feedback on my yanks but I am still reluctant to use the lua integration. Despite all the bad things you can read about vimscript online I like to keep my configuration in pure vimscript as much as possible mostly for portability reasons.&lt;/p&gt;
&lt;p&gt;So I decided to &lt;s&gt;reinvent the wheel&lt;/s&gt; replicate this behavior with pure vimscript! This was interesting to do because it involves playing with patterns and matches which are the basic building bricks of Vim&#39;s highlighting function. And because these are not tools that I need to use regularly so I am not very familiar with them.&lt;/p&gt;
&lt;p&gt;So here is the result I am looking for: In this screen cap you can see me first yanking the word &amp;quot;filetype&amp;quot; with &lt;code&gt;yiw&lt;/code&gt;, then the full line with &lt;code&gt;yy&lt;/code&gt; and finally several lines:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/vim/vim_flash_yanked_text/flash_yanked_text.gif&quot; alt=&quot;Demo of highlighted text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this article I will to relate the main steps I followed to get this feature working. To keep it readable I will not follow all the best practices or go into all the details to make it flawless but I hope this kind of iteration process can help new vimmers to get into vimscript by demonstrating some useful concepts.&lt;/p&gt;
&lt;h3&gt;A reminder on how to highlight stuff&lt;/h3&gt;
&lt;p&gt;First a bit of Vim terminology about highlighting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;pattern&lt;/code&gt; is basically a regular expression which can be used to search for some text.&lt;/p&gt;
&lt;p&gt;Patterns can be as simple as plain text (e.g. &lt;code&gt;/TODO&lt;/code&gt; ) or complex regexes with a lot of items as described in &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#pattern&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h pattern&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;highlighting group&lt;/code&gt; is a named group of highlighting instructions.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://vimhelp.appspot.com/syntax.txt.html#%3Ahighlight&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:highlight&lt;/code&gt;&lt;/a&gt; command allows to list the existing groups when given no arguments. It also allows to create new groups or get details about the existing ones.  By default both Vim and Neovim have an &lt;code&gt;IncSearch&lt;/code&gt; highlighting group which we will reuse to highlight our text. You can see what it looks like on your system with the command &lt;code&gt;:highlight IncSearch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally a &lt;code&gt;match&lt;/code&gt; is a way to tell Vim to highlight a specific pattern using a specific highlighting group.&lt;/p&gt;
&lt;p&gt;A match can be created with &lt;a href=&quot;http://vimhelp.appspot.com/eval.txt.html#matchadd%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;matchadd()&lt;/code&gt;&lt;/a&gt;. The first argument is the name of an highlighting group as shown in the result of &lt;code&gt;:highlight&lt;/code&gt; and the second argument is a pattern:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;TODO&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To delete a match simply use the ID returned by the previous command. Note that this command only works in the window where the match was created, this will be important later on.&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchdelete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Making the pattern work&lt;/h3&gt;
&lt;p&gt;The first step to highlight yanked text is to be able to match the last yanked text. Fortunately, &lt;a href=&quot;http://vimhelp.appspot.com/motion.txt.html#%27%5b&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h &#39;[&lt;/code&gt;&lt;/a&gt; tells us that Vim has two marks &lt;code&gt;&#39;[&lt;/code&gt; and &lt;code&gt;&#39;]&lt;/code&gt; which are positioned on the first and last characters of the previously changed or yanked text.&lt;/p&gt;
&lt;p&gt;And &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5c%25%27m&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /\%&#39;m&lt;/code&gt;&lt;/a&gt; tells us that we can use such marks in a pattern, so my first attempt looked like this:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\\%&#39;\\[.*\\%&#39;]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main items of the pattern are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;[&lt;/code&gt; is the mark I mentioned before but &lt;code&gt;[&lt;/code&gt; being a special character (used in &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5b%5d&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /[]&lt;/code&gt;&lt;/a&gt;) it needs to be escaped hence &lt;code&gt;&#39;\\[&lt;/code&gt;. Note that each &lt;code&gt;\&lt;/code&gt; needs to be escaped to be used in the command.&lt;/li&gt;
&lt;li&gt;Given this previous point, &lt;code&gt;\\%&#39;\\[&lt;/code&gt; is the way to use &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5c%25%27m&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /\%&#39;m&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;&#39;[&lt;/code&gt; mark, matching the beginning of the previously yanked text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.*&lt;/code&gt; allows to match any characters any number of time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\\%&#39;]&lt;/code&gt; is the equivalent of the first item with the &lt;code&gt;&#39;]&lt;/code&gt; mark. Note that here &lt;code&gt;]&lt;/code&gt; doesn&#39;t need to be escaped since there is no risk of confusion with &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5b%5d&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /[]&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a great first attempt which kind of works on some simple cases but fails when yanking text on several lines. This is because the &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;.&lt;/code&gt;&lt;/a&gt; atom doesn&#39;t match end of lines characters, so we need to use &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5c_.&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;\_.&lt;/code&gt;&lt;/a&gt; instead:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;\\%&#39;\\[\\_.*\\%&#39;]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is better but still not completely working, for example the first and last characters of the yanked text are not highlighted. That&#39;s the moment where we turn to the doc and read a bit more what &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2f%5c%25%27m&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /\%&#39;m&lt;/code&gt;&lt;/a&gt; has to say, particularly this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Example, to highlight the text from mark &#39;s to &#39;e:
	/.\%&amp;gt;&#39;s.*\%&amp;lt;&#39;e..
Note that two dots are required to include mark &#39;e in the match.  That
is because &amp;quot;\%&amp;lt;&#39;e&amp;quot; matches at the character before the &#39;e mark, and
since it&#39;s a |/zero-width| match it doesn&#39;t include that character.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Easy peasy, let&#39;s reuse the same thing but with our marks &lt;code&gt;&#39;[&lt;/code&gt; and &lt;code&gt;&#39;]&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.\\%&gt;&#39;\\[\\_.*\\%&amp;lt;&#39;]..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Important note&lt;/em&gt;: Some of this escaping could be greatly simplified using a different magic mode but it&#39;s not my point here. For more information on magic in Vim see &lt;a href=&quot;http://vimhelp.appspot.com/pattern.txt.html#%2fmagic&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h /magic&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So after a few tests yanking some random text, using &lt;code&gt;matchadd&lt;/code&gt; to highlight it and &lt;code&gt;matchdelete&lt;/code&gt; to remove the highlighting I am satisfied with the result, it is then time to automatically highlight our text.&lt;/p&gt;
&lt;h3&gt;Using the pattern automatically&lt;/h3&gt;
&lt;p&gt;Vim provides since it &lt;a href=&quot;https://github.com/vim/vim/commit/7e1652c63c96585b9e2235c195a3c322b1f11595&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;patch 8.0.1394&lt;/a&gt; the &lt;a href=&quot;http://vimhelp.appspot.com/autocmd.txt.html#TextYankPost&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h TextYankPost&lt;/code&gt;&lt;/a&gt; autocommand event which triggers just after a yank or deleting command. So our first step is to create a function triggered by this event:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;augroup highlightYankedText&lt;br /&gt;    &lt;span class=&quot;token builtin&quot;&gt;autocmd&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin&quot;&gt;autocmd&lt;/span&gt; TextYankPost &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FlashYankedText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;augroup END&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FlashYankedText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.\\%&gt;&#39;\\[\\_.*\\%&amp;lt;&#39;]..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see I put my autocommand in an &lt;a href=&quot;http://vimhelp.appspot.com/autocmd.txt.html#%3Aaugroup&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;augroup&lt;/code&gt;&lt;/a&gt; because &lt;strong&gt;&lt;em&gt;every time you use an autocommand without an augroup you make a kitten cry&lt;/em&gt;&lt;/strong&gt; 😿... and &lt;a href=&quot;https://vi.stackexchange.com/q/9455/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;for other reasons too&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That is great! Each time we yank some text it gets highlighted... but then it remains highlighted indefinitely. So let&#39;s simply use a timer to delete the match we just created. Note that the function puts the id of the newly created match in a global variable which is kind of ugly but pretty pratical to access it in the &lt;code&gt;DeleteTemporaryMatch()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FlashYankedText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.\\%&gt;&#39;\\[\\_.*\\%&amp;lt;&#39;]..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timer_start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;DeleteTemporaryMatch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DeleteTemporaryMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timerId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchdelete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;idTemporaryHighlight&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Making the feature reliable&lt;/h3&gt;
&lt;p&gt;The previous code kind of works but some edge cases are problematic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When I yank two different texts too quickly sometimes the &lt;code&gt;DeleteTemporaryMatch()&lt;/code&gt; function doesn&#39;t have the time to delete the previous match.&lt;/li&gt;
&lt;li&gt;More importantly, when I switch to another window just after yanking some text, &lt;code&gt;deletematches()&lt;/code&gt; fails because the matches id are local to a window.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let&#39;s put the ids in a list, with the window id where they were created:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FlashYankedText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;g:yankedTextMatches&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;yankedTextMatches &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;endif&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; matchId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchadd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;IncSearch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.\\%&gt;&#39;\\[\\_.*\\%&amp;lt;&#39;]..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; windowId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;winnr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;yankedTextMatches&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;windowId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; matchId&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;timer_start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;DeleteTemporaryMatch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;DeleteTemporaryMatch()&lt;/code&gt; can simply dequeue the &lt;code&gt;g:yankedTextMatches&lt;/code&gt; list and remove the matches on the corresponding window:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DeleteTemporaryMatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timerId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;yankedTextMatches&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;yankedTextMatches&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; windowID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; matchID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;matchdelete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;matchID&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; windowID&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;endtry&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;endwhile&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For good measures the call to &lt;code&gt;matchdelete()&lt;/code&gt; is enclosed in a &lt;code&gt;try...catch&lt;/code&gt; block, just in case something else fails and I don&#39;t want to be bothered with an error message.&lt;/p&gt;
&lt;p&gt;And here we are! With about 20 lines of vimscript we reimplemented the highlight yanked text feature! Well, kind of, there are some edge cases which needs a bit more work for this to work flawlessly, especially the cases where the user changes of window before &lt;code&gt;DeleteTemporaryMatch()&lt;/code&gt; is called.&lt;/p&gt;
&lt;h3&gt;Turning it into a plugin&lt;/h3&gt;
&lt;p&gt;Now that we have a code working properly, we could leave that in our &lt;code&gt;.vimrc&lt;/code&gt; and live happily with that... But it would be even better to make it a plugin! This way the functions will be loaded only when necessary (and thus, avoid increasing your startup time), we can get rid of global variables and just have a clean line in our &lt;code&gt;.vimrc&lt;/code&gt;, and while we are at it we could create a variable to control how long the flash should last... And that&#39;s actually what I did!&lt;/p&gt;
&lt;p&gt;I think the specific of how I turned my code into a plugin would make this post way too long, so the result can be found &lt;a href=&quot;https://github.com/statox/vim-flash-yanked-text&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on my github&lt;/a&gt; and I am of course available to answer any questions you could have about it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Comments via Github issues</title>
    <link href="https://www.statox.fr/posts/others/comments/"/>
    <updated>2020-07-14T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/others/comments/</id>
    <content type="html">&lt;p&gt;Recently, a former coworker of mine &lt;a href=&quot;https://25.wf/posts/2020-06-21-comments.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;published his solution&lt;/a&gt; to implement comments on his personal website via Github issues. I was looking for a solution to add comments on this site and decided to &lt;s&gt;shamelessly copy&lt;/s&gt; get inspiration from his post.&lt;/p&gt;
&lt;p&gt;So I reformatted a bit his script, added it to my posts and realized that this solution implied to create a new issue on Github each time I created a new post. As I already use &lt;a href=&quot;https://travis-ci.com/github/statox/blog&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;travis-ci&lt;/a&gt; to build this website I thought it would be a nice addition to create a script to automatically create these issues for me.&lt;/p&gt;
&lt;p&gt;The full source of the script is included in the site repository &lt;a href=&quot;https://github.com/statox/blog/blob/master/tools/createIssues.js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;, in this article I will show how I configured everything.&lt;/p&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Here are the important steps to make all of this working:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a dedicated repo &lt;a href=&quot;https://github.com/statox/blog-comments/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;blog-comments&lt;/a&gt; which will contain the issues used to host comments;&lt;/li&gt;
&lt;li&gt;Have the CI run the script each time a new article is published;&lt;/li&gt;
&lt;li&gt;Give the script the ability to create new issues in the blog-comments repo;&lt;/li&gt;
&lt;li&gt;Give each post a unique number representing the issue ID on Github. &lt;a href=&quot;https://www.11ty.dev/docs/data-cascade/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Eleventy&lt;/a&gt; provides a simple way to do that;&lt;/li&gt;
&lt;li&gt;Make the script parsing all the published posts, listing the posts without an associated issue and creating the issues;&lt;/li&gt;
&lt;li&gt;Change the posts source code to inject the comments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A quick update&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;November 2020 -&lt;/em&gt; When I originally wrote the script I didn&#39;t want to think too much about the authentication to Github API and chose to go the simple way using a login/password basic auth header. This worked well until Github decided to deprecate this authentication mode.&lt;/p&gt;
&lt;p&gt;So I replaced the calls made to Github API via axios by the &lt;a href=&quot;https://github.com/octokit/rest.js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;octokit&lt;/a&gt; library. It wraps the calls to the API and it handles the authentication really simply and replacing the axios calls were only a matter of minutes &lt;em&gt;(I take that as a sign that my script was decently architectured 😎)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The complete version of the script is still &lt;a href=&quot;https://github.com/statox/blog/blob/061b79001fda91c7c8b4bb72147247a4e24eff11/tools/createIssues.js&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Configuring travis-ci&lt;/h3&gt;
&lt;p&gt;Running a script at build time with travis-ci is fairly straight forward. I added a new step in the &lt;code&gt;script&lt;/code&gt; job looking like this:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm run create&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;issues &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; $BASIC_AUTH_HEADER&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$BASIC_AUTH_HEADER&lt;/code&gt; is a variable which contains the string &lt;code&gt;github_username:github_password&lt;/code&gt; encoded in base64. It will be used by the script to authenticate its calls to the Github API &lt;a href=&quot;https://developer.github.com/v3/#authentication&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;using Basic Authentication&lt;/a&gt;. Travis has &lt;a href=&quot;https://docs.travis-ci.com/user/environment-variables/#defining-variables-in-repository-settings&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;a simple interface&lt;/a&gt; to define this kind of variable. The double dash &lt;code&gt;--&lt;/code&gt; is used to give a parameter to a npm script defined in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;package.json&lt;/code&gt; I added a new script like this:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;create-issues&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node tools/createIssues.js&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Committing a simple nodejs script at &lt;code&gt;tools/createIssues.js&lt;/code&gt; with only a &lt;code&gt;console.log()&lt;/code&gt; confirmed this setup is working as the output of the command was shown in the travis build.&lt;/p&gt;
&lt;h3&gt;Implementing the CI script&lt;/h3&gt;
&lt;p&gt;Using the &lt;a href=&quot;https://github.com/axios/axios&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;axios&lt;/a&gt; library I can list the existing issues in the blog-comment repo:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Axios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;BASIC_AUTH_HEADER&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [0] is &quot;node&quot;, [1] is scriptname&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt; * Configure axios to always use my user agent and my Github login&lt;br /&gt; * to authenticate to the Github API&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; axios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    baseURL&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://api.github.com/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;User-Agent&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;statox&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token string&quot;&gt;&#39;Authorization&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;basic &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;BASIC_AUTH_HEADER&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt; * Get all of the open issues in a github repo&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getIssues&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;repos/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;REPO_NAME&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/issues&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other items to list are the posts. Here I needed to create a function to recursively list the files in my &lt;code&gt;src/posts&lt;/code&gt; directory. These files have a header section delimited by &lt;code&gt;---&lt;/code&gt; strings which are used by eleventy (the static site generator I used for this site). I created a function to parse these header and return a javascript object, that was a quick way to get things done without digging the doc but I&#39;m sure there is a more efficient way to get this data out of eleventy. &lt;em&gt;(For example I could write this data directly in JS in the posts files)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With this short function I list all my posts, get their title and the ID of the issue I associated to it and exclude the posts I have not published yet.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt; * Iterate through all the files found in the post folder&lt;br /&gt; * Read them to get their data section&lt;br /&gt; * And return a list of parsed data sections&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getPosts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;walkSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;src/posts/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    async&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;files&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;file&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;encoding&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span class=&quot;token comment&quot;&gt;// Only keep the part between the two &#39;---&#39; lines&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; postHeader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; content&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;---&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;convertPostHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;postHeader&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; results&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// Only keep the published posts&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;eleventyExcludeFromCollections &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A bit more logic to detect the issues which need to be created and an additional call to the Github API and here is our working script:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt; * Post a new issue on github&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createIssue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;issue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DRY_RUN&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;DRY RUN: creating issue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;issue&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;repos/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;REPO_NAME&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/issues&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;        &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; issue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I added a &lt;code&gt;DRY_RUN&lt;/code&gt; variable which comes from how I call the script for testing purposes.&lt;/p&gt;
&lt;h3&gt;Showing the comments in the posts&lt;/h3&gt;
&lt;p&gt;Using the &lt;code&gt;commentIssueId&lt;/code&gt; of each post and the following script allows to inject the comments in the comment section:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Script to inject comments based on github issues&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Shamelessly taken from https://25.wf/posts/2020-06-21-comments.html&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;domReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;DOMContentLoaded&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readyState &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;interactive&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readyState &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;complete&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getComments&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;GET&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        mode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cors&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        cache&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no-cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        headers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Accept&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;application/vnd.github.v3.html+json&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;domReady&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; apiUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://api.github.com/repos/statox/blog-comments/issues/10/comments&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;appendComments&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; commentSection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;comments&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;comments &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;comments&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;forEach &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; comments&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            commentSection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;beforeend&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;p&gt;No comments yet.&amp;lt;/p&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        comments&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            commentSection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token string&quot;&gt;&#39;beforeend&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;div class=&quot;comment&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token string&quot;&gt;&#39;• &amp;lt;a href=&quot;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; comment&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html_url &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&quot; target=&quot;_blank&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; comment&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;login &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;/a&gt;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token string&quot;&gt;&#39; on&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token string&quot;&gt;&#39; &amp;lt;a href=&quot;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; comment&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html_url &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&quot; target=&quot;_blank&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;comment&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;created_at&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUTCString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;/a&gt;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                comment&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body_html &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;/div&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;getComments&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;apiUrl&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;appendComments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;So much time saved!&lt;/h3&gt;
&lt;p&gt;And that&#39;s how I came up with a system which makes me save about one minute every time I publish a new post (which doesn&#39;t happen more than a few time a month at best)! It took me about 4 hours to get the whole thing working so according to this famous XKCD... that might have been a bit of a waste of time, but it was fun to do! 😅&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/is_it_worth_the_time.png&quot; alt=&quot;XKCD is it worth the time&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I still have a few more things I want to implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improving how I handle the data coming from the posts to avoid parsing it myself&lt;/li&gt;
&lt;li&gt;Adding a check to make sure my posts all have unique and sequential issues ID&lt;/li&gt;
&lt;li&gt;Adding a mechanism to update the title of the issues if the title of the post change&lt;/li&gt;
&lt;li&gt;Adding a content to the OP of the issue to have a link to the article&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But given the previous XKCD graph I&#39;ll see when I have time for that and if I really have a need for it too.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Including a p5.js project in this website (Minesweeper 💣)</title>
    <link href="https://www.statox.fr/posts/p5/minesweeper/"/>
    <updated>2020-07-22T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/minesweeper/</id>
    <content type="html">
&lt;p&gt;
The first posts I wrote on this site and which were about p5.js applications are based on code that I wrote before creating the site. As I already hosted the applications on their own Github pages it was easier to simply have a link to these pages in the posts. For example check my &lt;a href=&quot;https://www.statox.fr/posts/p5/p5-cellular-automaton/&quot;&gt;cellular automata post&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Now that this site is created I wanted to see how I could integrate a p5.js application directly in its pages. This is now done with this simple minesweeper demo. It didn&#39;t required a lot of work other than adding a call to a cdn in the post source to get p5.js and updating my &lt;code&gt;.eleventy.js&lt;/code&gt; to add &lt;code&gt;.js&lt;/code&gt; files to the list of template files to compile.
&lt;/p&gt;
&lt;p&gt;
For now I am happy with this test but there are still a few things I&#39;d like to test:
&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Check how to put this kind on posts in their own Github repo and add them to the site&#39;s source code as git submodules&lt;/li&gt;
    &lt;li&gt;Check how I can integrate a framework like Vue.js to avoid having to create my own &lt;code&gt;interface.js&lt;/code&gt; with some ugly functions to update the UI and send the data to the p5.js sketch&lt;/li&gt;
    &lt;li&gt;Investigate how to make this kind of demo more mobile friendly because for now it clearly doesn&#39;t work on a touch screen&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The minesweeper&lt;/h2&gt;

&lt;p&gt;
To create this first p5.js integrated demo I wanted something simple to code which I could have running pretty fast. Recreating a minesweeper has several advantages:
&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;This is a well known game which wouldn&#39;t require me to do some research on how to make its UI or which corner cases rules exist.&lt;/li&gt;
    &lt;li&gt;It includes a kind of maze solving algorithm to automatically open the cells clicked when they are not near a mine. And I &lt;em&gt;love&lt;/em&gt; this kind of algorithm, even though this one is fairly short and simple.&lt;/li&gt;
    &lt;li&gt;It is a nice way to prepare a future project of creating a minesweeper on an hexagonal grid. Actually that was my initial project but I realized that it&#39;s not as trivial as I would have expected and thus it would be better to make it a completely seperated project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There are still a number of features I&#39;d like to implement even in this squared grid minesweeper like having a deterministic grid (i.e. not having cases where the user has to choose a cell randomly), having cells with several mines to make it a bit harder to play, adding a zoom feature to be able to have larger grids or even creating an AI which would open the cases based on probabilities... But for now that&#39;s a nice little demo, even though I must admit that it was more fun to create it than to play with it (because personally I find minesweeper to be a terribly boring game!)
&lt;/p&gt;

&lt;h2&gt;The demo&lt;/h2&gt; 
&lt;div&gt;
    &lt;span&gt;Grid size &lt;input id=&quot;COLInput&quot; type=&quot;number&quot; min=&quot;1&quot; onchange=&quot;updateParams()&quot; /&gt;&lt;/span&gt;
    &lt;span&gt;Filling ratio &lt;input id=&quot;RATIOInput&quot; type=&quot;number&quot; max=&quot;1&quot; onchange=&quot;updateParams()&quot; /&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;div oncontextmenu=&quot;return false;&quot; id=&quot;canvasDiv&quot;&gt;
    &lt;span style=&quot;color:red; font-family: D7CR&quot; id=&quot;timeSpan&quot;&gt;0&lt;/span&gt;
    &lt;span id=&quot;resetSpan&quot;&gt;&lt;button onclick=&quot;newGame()&quot;&gt;Reset&lt;/button&gt;&lt;/span&gt;
    &lt;span style=&quot;color:red; font-family: D7CR&quot; id=&quot;flagsSpan&quot;&gt;0&lt;/span&gt;
&lt;/div&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/p5@1.0.0/lib/p5.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/minesweeper/sketch.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/minesweeper/Cell.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/minesweeper/CellSquare.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/minesweeper/interface.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/minesweeper/utils.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/minesweeper/Game.js&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>Birds flock simulation</title>
    <link href="https://www.statox.fr/posts/p5/boids/"/>
    <updated>2020-09-03T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/boids/</id>
    <content type="html">
&lt;h3&gt;What is this?&lt;/h3&gt;
&lt;div&gt;
    &lt;p&gt;This is a simulation of Boids: some little digital creatures invented by &lt;a href=&quot;http://www.red3d.com/cwr/boids/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Craig Renolds&lt;/a&gt;. Each
        Boid has its own perception circle i.e. a limited circle around the creature where it has the ability to see its
        neighbors and how they behave. In addition to this perception circle all the Boids follow the same basic rules
        depending on their neighbors behavior.&lt;/p&gt;
    &lt;p&gt;This kind of simple individual rules allow the emerging of group behaviors which are fascinating to
        observe &lt;i&gt;-at least to me :)-&lt;/i&gt; as they are not lead by a single element of the group but are the result
        of
        combined individual
        behaviors.&lt;/p&gt;
    &lt;p&gt;This kind of simulation has been used for example to generate crowds of people or flocks of animals in CGI.&lt;/p&gt;

    &lt;pre&gt;TODO: Add a scene of the Uruk Hai walking from LOTR (or something less dorky but still illustrative)&lt;/pre&gt;

    &lt;p&gt;You can play with the different controls over and under the simulation to have a sense of how it works. To get a
        better understanding you can have a read at &lt;a href=&quot;https://www.statox.fr/posts/p5/boids/#explanation&quot;&gt;the explanation&lt;/a&gt; which should help you to
        understand step by step what is going on here.&lt;/p&gt;

    &lt;p style=&quot;color: red;&quot;&gt;&lt;i&gt;The controls of the simulation are not compatible with mobile devices and prevent some
            features from working. Namely the creation of Boids, by clicking on the screen.&lt;/i&gt;&lt;/p&gt;

    &lt;p&gt;&lt;i&gt;This page is a work in progress which might never get finished as I&#39;m planning another implementation with a
            different framework, so... to be continued.&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;!-- This raw annotation is used to be able to use Vuejs in nunchuck templates --&gt;

&lt;h3&gt;Simulation&lt;/h3&gt;
&lt;div class=&quot;boids&quot; id=&quot;boidsApp&quot;&gt;
    &lt;div&gt;
        &lt;label&gt;Flock population&lt;/label&gt;
        &lt;input id=&quot;flockSizeInput&quot; type=&quot;number&quot; v-model.number=&quot;CROWD_SIZE&quot; /&gt;
        &lt;button id=&quot;flockSizeBtn&quot; onclick=&quot;resetBirds()&quot;&gt;Reset flock&lt;/button&gt;
        &lt;button id=&quot;flockSizeBtn&quot; onclick=&quot;resetObstacles()&quot;&gt;Reset obstacles&lt;/button&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;button v-bind:class=&quot;{active: enableFollowMouse, inactive: !enableFollowMouse}&quot; id=&quot;followMouseButton&quot;&gt;Follow mouse&lt;/button&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;button v-bind:class=&quot;{active: enableFollowTarget, inactive: !enableFollowTarget}&quot; id=&quot;followTargetButton&quot;&gt;Follow target&lt;/button&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;button v-bind:class=&quot;{active: enableWrapEdges, inactive: !enableWrapEdges}&quot; id=&quot;wrapEdgesButton&quot;&gt;Edge wrapping&lt;/button&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;button v-bind:class=&quot;{active: enableShowPerception, inactive: !enableShowPerception}&quot; id=&quot;showPerceptionCirclesButton&quot;&gt;Show perception&lt;/button&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;table&gt;
            &lt;tr class=&quot;settings-table-values&quot;&gt;
                &lt;th&gt;Wiggling&lt;/th&gt;
                &lt;th&gt;Alignment&lt;/th&gt;
                &lt;th&gt;Separation&lt;/th&gt;
                &lt;th&gt;Cohesion&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr class=&quot;settings-table-values&quot;&gt;
                &lt;td&gt;
                    &lt;div&gt;
                        &lt;button v-bind:class=&quot;{active: enableWiggle, inactive: !enableWiggle}&quot; id=&quot;toggleWiggleButton&quot;&gt;Toggle wiggling&lt;/button&gt;

                        &lt;p&gt;Allowed angle &lt;span id=&quot;wiggleAngleMarker&quot;&gt;{{MAX_WIGGLE_ANGLE}}&lt;/span&gt;&lt;/p&gt;
                        &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;360&quot; v-model.number=&quot;MAX_WIGGLE_ANGLE&quot; step=&quot;0.5&quot; class=&quot;slider&quot; id=&quot;wiggleAngleSlider&quot; /&gt;

                        &lt;p&gt;Intensity &lt;span id=&quot;wiggleIntensityeMarker&quot;&gt;{{WIGGLE_ACC_INTENSITY}}&lt;/span&gt;&lt;/p&gt;
                        &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;5&quot; v-model.number=&quot;WIGGLE_ACC_INTENSITY&quot; step=&quot;0.1&quot; class=&quot;slider&quot; id=&quot;wiggleIntensitySlider&quot; /&gt;

                        &lt;p&gt;Max velocity &lt;span id=&quot;maxSpeedMarker&quot;&gt;{{MAX_SPEED}}&lt;/span&gt;&lt;/p&gt;
                        &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;20&quot; v-model.number=&quot;MAX_SPEED&quot; step=&quot;0.1&quot; class=&quot;slider&quot; id=&quot;boidSpeedSlider&quot; /&gt;
                    &lt;/div&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;div&gt;
                        &lt;button v-bind:class=&quot;{active: enableAlignment, inactive: !enableAlignment}&quot; id=&quot;toggleAlignmentButton&quot;&gt;Toggle alignment&lt;/button&gt;

                        &lt;p&gt;Perception distance &lt;span id=&quot;alignmentPerceptionMarker&quot;&gt;{{ALIGNMENT_FRIENDS_RADIUS}}&lt;/span&gt;px&lt;/p&gt;
                        &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;500&quot; v-model.number=&quot;ALIGNMENT_FRIENDS_RADIUS&quot; class=&quot;slider&quot; id=&quot;alignementPerceptionDistanceSlider&quot; /&gt;

                        &lt;p&gt;Intensity &lt;span id=&quot;alignmentIntensityMarker&quot;&gt;{{ALIGNMENT_ACC_INTENSITY}}&lt;/span&gt;N&lt;/p&gt;
                        &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;5&quot; v-model.number=&quot;ALIGNMENT_ACC_INTENSITY&quot; step=&quot;0.1&quot; class=&quot;slider&quot; id=&quot;alignementIntensitySlider&quot; /&gt;
                    &lt;/div&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;div&gt;
                        &lt;button v-bind:class=&quot;{active: enableSeparation, inactive: !enableSeparation}&quot; id=&quot;toggleSeparationButton&quot;&gt;Toggle separation&lt;/button&gt;

                        &lt;p&gt;Perception distance &lt;span id=&quot;separationPerceptionMarker&quot;&gt;{{SEPARATION_FRIENDS_RADIUS}}&lt;/span&gt;px&lt;/p&gt;
                        &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;500&quot; v-model.number=&quot;SEPARATION_FRIENDS_RADIUS&quot; class=&quot;slider&quot; id=&quot;separationPerceptionDistanceSlider&quot; /&gt;

                        &lt;p&gt;Intensity &lt;span id=&quot;separationIntensityMarker&quot;&gt;{{SEPARATION_ACC_INTENSITY}}&lt;/span&gt;N&lt;/p&gt;
                        &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;5&quot; v-model.number=&quot;SEPARATION_ACC_INTENSITY&quot; step=&quot;0.1&quot; class=&quot;slider&quot; id=&quot;separationIntensitySlider&quot; /&gt;
                    &lt;/div&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;div&gt;
                        &lt;button v-bind:class=&quot;{active: enableCohesion, inactive: !enableCohesion}&quot; id=&quot;toggleCohesionButton&quot;&gt;Toggle cohesion&lt;/button&gt;

                        &lt;p&gt;Perception distance &lt;span id=&quot;cohesionPerceptionMarker&quot;&gt;{{COHESION_FRIENDS_RADIUS}}&lt;/span&gt;px
                        &lt;/p&gt;
                        &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;500&quot; v-model.number=&quot;COHESION_FRIENDS_RADIUS&quot; class=&quot;slider&quot; id=&quot;cohesionPerceptionDistanceSlider&quot; /&gt;

                        &lt;p&gt;Intensity &lt;span id=&quot;cohesionIntensityMarker&quot;&gt;{{COHESION_ACC_INTENSITY}}&lt;/span&gt;N&lt;/p&gt;
                        &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;5&quot; v-model.number=&quot;COHESION_ACC_INTENSITY&quot; step=&quot;0.1&quot; class=&quot;slider&quot; id=&quot;cohesionIntensitySlider&quot; /&gt;
                    &lt;/div&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/div&gt;
    &lt;div oncontextmenu=&quot;return false;&quot; id=&quot;canvasDiv&quot;&gt;&lt;/div&gt;
    &lt;div&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;button v-bind:class=&quot;{active: enableRoundShape, inactive: !enableRoundShape}&quot; id=&quot;changeShapeButton&quot;&gt;Change shape&lt;/button&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;button v-bind:class=&quot;{active: enableObstaclesDrawing, inactive: !enableObstaclesDrawing}&quot; id=&quot;obstaclesDrawingButton&quot;&gt;Obstacles&lt;/button&gt;
                &lt;/td&gt;
                &lt;td&gt;
                    &lt;button v-bind:class=&quot;{active: enablePredatorDrawing, inactive: !enablePredatorDrawing}&quot; id=&quot;predatorDrawingButton&quot;&gt;Predators&lt;/button&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
        &lt;div v-if=&quot;enableObstaclesDrawing || enablePredatorDrawing&quot;&gt;
            When &quot;obstacles&quot; or &quot;predators&quot; is enabled move your mouse over the screen and the items will pop regularly
            just under your mouse.
        &lt;/div&gt;
        &lt;div v-if=&quot;goBackInInterface&quot;&gt;
            &lt;a style=&quot;width: 100%&quot; v-bind:href=&quot;&#39;#&#39; + goBackInInterface&quot;&gt;&lt;button&gt;Back to explanation&lt;/button&gt;&lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;br /&gt;
&lt;h3 id=&quot;explanation&quot;&gt;Explanation&lt;/h3&gt;
&lt;div&gt;
    &lt;p&gt;In this part of the page I will detail the different rules followed by the Boids to show how they combine. Each
        button moves the page to the simulation and sets the rules as I want you to see them when you are reading .&lt;/p&gt;
    &lt;p&gt;Note that you can use the &quot;Back to explanation&quot; to go back to where you were.&lt;/p&gt;
    &lt;h4&gt;Basic behavior&lt;/h4&gt;
    &lt;p id=&quot;basicBehaviorAnchor&quot;&gt;First let&#39;s create a single Boid (&lt;a href=&quot;https://www.statox.fr/posts/p5/boids/#canvasDiv&quot; onclick=&quot;scenarioOneBoidNoWiggle()&quot;&gt;Click here&lt;/a&gt;)&lt;/p&gt;
    &lt;p&gt;Our Boid is living a monotonous life randomly flying in its 2 dimensional space.&lt;/p&gt;
    &lt;p&gt;To move, our Boid has two 2 dimensional vectors with a x and y component. One is its speed which allows it to go
        forward in a direction. And the second vector is its acceleration which is used to change the direction of the
        speed, allowing the Boid to move smoothly like an actual object on a 2D plan.&lt;/p&gt;
    &lt;p&gt;We set its allowed wiggling angle to 0° which means that currently the vector representing its acceleration will
        not change of direction. Consequently our Boid moves in straight lines.&lt;/p&gt;
    &lt;p&gt;You can change its &quot;Max velocity&quot; setting to see it moving faster or slower&lt;/p&gt;

    &lt;p id=&quot;basicBehavior2Anchor&quot;&gt;Now let&#39;s change its allowed wiggling angle to 50° (&lt;a href=&quot;https://www.statox.fr/posts/p5/boids/#canvasDiv&quot; onclick=&quot;scenarioOneBoidWiggle()&quot;&gt;Click here&lt;/a&gt;).
        Our Boid is not moving in straight lines anymore: each time it moves the vector representing its acceleration is
        randomly rotated which gives it this happy wiggling attitude.
    &lt;/p&gt;

    &lt;p&gt;If you increase its max velocity observe how it seems to wiggle less: This is because its speed vector becomes
        more important than its acceleration vector. To change that in a limited way you can also increase the intensity
        of the wiggling vector&lt;/p&gt;

    &lt;p id=&quot;basicBehavior3Anchor&quot;&gt;This is the basic behavior of our Boid, you can click on the screen to add more Boids
        (or &lt;a href=&quot;https://www.statox.fr/posts/p5/boids/#canvasDiv&quot; onclick=&quot;scenarioMultipleBoidsWiggle()&quot;&gt;Click here&lt;/a&gt;) and you will
        notice that they all behave as rubber balls bouncing on the edges of the screen... Not really exciting I agree.
    &lt;/p&gt;

    &lt;h4&gt;Alignment&lt;/h4&gt;
    &lt;p id=&quot;alignmentAnchor&quot;&gt;To start observing some cool behavior let&#39;s enable the first rule: Alignment (&lt;a href=&quot;https://www.statox.fr/posts/p5/boids/#canvasDiv&quot; onclick=&quot;scenarioBoidsAlignment()&quot;&gt;Click here&lt;/a&gt;)&lt;/p&gt;
    &lt;p&gt;The green circle around a Boid is the actual representation of its perception circle for the alignment rule: all
        the neighbors within this circle are &quot;seen&quot; by the Boids and used in the alignment rule&lt;/p&gt;
    &lt;p&gt;Now we can see that our flock doesn&#39;t look as random as before: Boids close to each other start going in the same
        direction. The alignment rule makes each Boid look at its neighbors&#39; acceleration and incorporate the average of
        their acceleration it its own. Its acceleration is now a mix of both its own random wiggling and the average
        acceleration of its neighbors, making them following each other.&lt;/p&gt;
    &lt;p&gt;This is our first emerging behavior!&lt;/p&gt;
    &lt;p&gt;As there are only a few Boids on the screen they eventually end up going all in the same direction in a pretty
        compact group.&lt;/p&gt;

    &lt;h4&gt;Separation&lt;/h4&gt;
    &lt;p&gt;Having our Boids going in the same direction is great but they are literally walking (Flying? Crawling?) on top
        of each other. This is not ideal lets give them some individual space!&lt;/p&gt;
    &lt;p id=&quot;separationAnchor&quot;&gt;To do so we can enable the separation rule (&lt;a href=&quot;https://www.statox.fr/posts/p5/boids/#canvasDiv&quot; onclick=&quot;scenarioBoidsSeparation()&quot;&gt;Click here&lt;/a&gt;)&lt;/p&gt;
    &lt;p&gt;The perception circle for this rule is shown in red&lt;/p&gt;
    &lt;p&gt;This adds a new rule to our Boids behavior: They &quot;see&quot; the position of each of their close neighbors and
        their acceleration is moved towards the least crowded direction. In other words they continue following the same
        direction as their friends but they also continually move away from them.&lt;/p&gt;
    &lt;p&gt;With enough time this gives us the same flock as before but this time it is much more spaced out.&lt;/p&gt;

    &lt;h4&gt;Cohesion&lt;/h4&gt;
    &lt;p id=&quot;cohesionAnchor&quot;&gt;Let&#39;s introduce the last rule of our Boids behavior: Cohesion (&lt;a href=&quot;https://www.statox.fr/posts/p5/boids/#canvasDiv&quot; onclick=&quot;scenarioBoidsCohesion()&quot;&gt;Click here&lt;/a&gt;)&lt;/p&gt;

    &lt;p&gt;The perception circle for this rule is shown in blue&lt;/p&gt;
    &lt;p&gt;This rule is not the most obvious to observe right now. It shifts the acceleration of our Boids towards the
        center of mass of their local flock.&lt;/p&gt;
    &lt;p&gt;What that means is that each Boids looks at its close neighbors and move towards the center of this group of
        Boids.
        This allow the creation of small groups of Boids going in the same direction and staying together (but still not
        too close to each other, thanks to the separation rule)&lt;/p&gt;

    &lt;p&gt;That&#39;s it! We now have the basic behavior ruling our Boids moves. Now let&#39;s add some troubles to their life&lt;/p&gt;

    &lt;h4&gt;Goal&lt;/h4&gt;
    &lt;p id=&quot;targetAnchor&quot;&gt;To be able observe some emerging behavior let&#39;s add a goal to our birds: we will create a
        target moving
        randomly on the screen. (&lt;a href=&quot;https://www.statox.fr/posts/p5/boids/#canvasDiv&quot; onclick=&quot;scenarioTarget()&quot;&gt;Click here&lt;/a&gt;).
    &lt;/p&gt;
    &lt;p&gt;This target attracts the Boids close to its position: we could see it as a prey
        like a group of insect for a flock of birds.&lt;/p&gt;
    &lt;p&gt;Our flock now has a goal! Remember than none of the individual members of the flock is programmed to lead its
        friends they only obey a list of rules working given what they can see in their circle of perception.&lt;/p&gt;
    &lt;p&gt;So far our little birds are happily floating in their space and reaching their goal, now let&#39;s scare them out!
    &lt;/p&gt;

    &lt;h4&gt;Predators and obstacles&lt;/h4&gt;
    &lt;p id=&quot;predatorsAnchor&quot;&gt;To make this visualization more interesting let&#39;s add some obstacles that our birds can&#39;t go
        through and some
        predators which will fly through the float and that Boids will try to avoid as much as possible. (&lt;a href=&quot;https://www.statox.fr/posts/p5/boids/#canvasDiv&quot; onclick=&quot;scenarioPredators()&quot;&gt;Click here&lt;/a&gt;)&lt;/p&gt;

    &lt;p&gt;Look at our Boids! Trying to reach their target while avoiding these mean red circles, aren&#39;t they the cutest?
        😍&lt;/p&gt;

    &lt;h4&gt;Playing around&lt;/h4&gt;
    &lt;p&gt;Now that you understand how these little creature behave don&#39;t hesitate to play with them!&lt;/p&gt;
    &lt;p&gt;I did this simulation to allow the user to change the perception circle for each rule as well as its intensity
        (i.e. how strong it is compared to the other rules and to the birds wiggling). And I have spent a faire amount
        of time changing all these parameters to create different behaviors... If that is your thing you might have
        some fun, if it&#39;s not you might think that I&#39;m crazy but it&#39;s fine because I had a lot of fun creating this
        page and in the end that is what matters when you code: Having fun!&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;Resources&lt;/h3&gt;
&lt;div&gt;
    &lt;p&gt;Here is a bunch of resources I&#39;ve been using to create this page&lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;
            &lt;a href=&quot;https://youtu.be/w-Oy4TYDnoQ&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;This cool Youtube video (in
                French) which introduced me to the concept of Boids&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;a href=&quot;http://www.red3d.com/cwr/boids/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Craig Renolds&#39; page
                about his Boids&lt;/a&gt; which is interesting to get an history of his research and an explanation of the
            rules.
        &lt;/li&gt;
        &lt;li&gt;
            &lt;a href=&quot;https://youtu.be/6vX8wT1G798&quot;&gt;Daniel Shiffman&#39;s amazing Nature of Code video series&lt;/a&gt;. Which is
            an great resource to get started with simulating &quot;natural&quot; things in the browser.
        &lt;/li&gt;
        &lt;li&gt;
            &lt;a href=&quot;http://www.vergenet.net/~conrad/boids/pseudocode.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;A
                pseudocode explanation of Boids&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;a href=&quot;https://github.com/jackaperkins/boids&quot;&gt;A implementation of Boids in processing&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;a href=&quot;https://www.raymondcamden.com/2020/04/03/quick-tip-on-using-vue-with-eleventy&quot;&gt;Nothing to do with
                Boids but a cool tips about integrating VueJS to an eleventy website&lt;/a&gt; which was pretty helpful to get
            the controls to work.
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/npm/p5@1.0.0/lib/p5.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/gh/CodingTrain/QuadTree/quadtree.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/boids/sketch.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/boids/Interface.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/boids/Bird.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/boids/Predator.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/boids/Target.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/boids/Obstacle.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://www.statox.fr/posts/p5/boids/utils.js&quot;&gt;&lt;/script&gt;

</content>
  </entry>
  
  <entry>
    <title>A boring jumping game</title>
    <link href="https://www.statox.fr/posts/p5/p5-jump/"/>
    <updated>2020-09-03T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/p5-jump/</id>
    <content type="html">&lt;p&gt;I had a bit of free time and wanted to explore &lt;a href=&quot;https://molleindustria.github.io/p5.play/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;p5.play&lt;/a&gt; which is a p5.js library to create simple games. I think it follows pretty well the philosophy of the whole processing ecosystem which is to provide simple tools meant to let people easily and quickly create small projects without caring too much about performance, quality or complexity.&lt;/p&gt;
&lt;p&gt;So I came up with this simple little game. It is ugly (and the code is even worse than the UI), gets boring after two or three rounds and has a weird bug where the player will sometimes get stuck on the top wall, but it was fun to make!&lt;/p&gt;
&lt;p&gt;It was a nice way to start using p5.play Sprite objects which make it very easy to handle collisions, acceleration and all kind of simple physic properties.&lt;/p&gt;
&lt;p&gt;It is also a first try to embed pens from &lt;a href=&quot;https://codepen.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;codepen.io&lt;/a&gt; in my blog, just to see if that&#39;s something I want to do more in the future.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;501&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;result&quot; data-user=&quot;statox&quot; data-slug-hash=&quot;yLOoraP&quot; style=&quot;height: 501px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;p5play - jumping&quot;&gt;
    &lt;span&gt;
    See the Pen &lt;a href=&quot;https://codepen.io/statox/pen/yLOoraP&quot;&gt;
    p5play - jumping&lt;/a&gt; by Adrien Fabre (&lt;a href=&quot;https://codepen.io/statox&quot;&gt;@statox&lt;/a&gt;)
    on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.
    &lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>Algorithmically guided breathing</title>
    <link href="https://www.statox.fr/breath/"/>
    <updated>2020-10-22T00:00:00Z</updated>
    <id>https://www.statox.fr/breath/</id>
    <content type="html">&lt;p&gt;I am not really knowledgeable about yoga, mediation and all this kind of well being topics, but I recently realized that following breathing exercises is actually a great way to quickly reduce my stress level. What I am talking about is simply taking a few minutes to focus on the way you breath and force yourself to breath deeply and regularly.&lt;/p&gt;
&lt;p&gt;Also &lt;a href=&quot;https://breathe.ersjournals.com/content/13/4/298&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;some people who seem very serious&lt;/a&gt; say that it&#39;s acutally good for your health.&lt;/p&gt;
&lt;p&gt;The internet being full of wonders, I also had seen several gifs like the following one and really wanted to give a try at creating perfectly looped animations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/krP2NRkLqnKEg/giphy.gif&quot; alt=&quot;Animation of shapes to guide your breathing&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So being a developer and having a bit of free time, I had found my new side project! I decided to create a webpage which would show some beautiful looped animations and would be useful to practice deep breathing.&lt;/p&gt;
&lt;p&gt;Before reading what follow you should have a look at the result, I looks kinda good actually: &lt;a href=&quot;https://breath.statox.fr/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;https://breath.statox.fr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that the application is much more fluid on Chrome than on Firefox. This is because of Firefox&#39;s default value for its setting &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt; which messes up with the canvas to limit fingerprinting. Nothing much I can do about that but keep using firefox, the net neutrality needs it&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Prototyping time!&lt;/h3&gt;
&lt;p&gt;The first step was to create a &lt;a href=&quot;https://codepen.io/statox/pen/abNVYZZ&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;codepen&lt;/a&gt; loading my favorite graphic library &lt;a href=&quot;https://p5js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;p5.js&lt;/a&gt; and to start experimenting.&lt;/p&gt;
&lt;p&gt;That resulted in some pretty rough animations and a not very well organized code, but at least it allowed me to validate what are the two main components I would need to implement in my project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some kind of state processing to handle the transitions between the &amp;quot;breath in&amp;quot; and &amp;quot;breath out&amp;quot; phases (as well as two additional &amp;quot;pause&amp;quot; phases, which I find more comfortable to add);&lt;/li&gt;
&lt;li&gt;A &amp;quot;pluggable architecture&amp;quot; where I can write independent functions for different animations and only have to plug them in the existing canvas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;dark&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;statox&quot; data-slug-hash=&quot;abNVYZZ&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;p5 - breathing&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/statox/pen/abNVYZZ&quot;&gt;
  p5 - breathing&lt;/a&gt; by Adrien Fabre (&lt;a href=&quot;https://codepen.io/statox&quot;&gt;@statox&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h3&gt;Making it real&lt;/h3&gt;
&lt;p&gt;Once I had a working proof of concept in codepen I created a &lt;a href=&quot;https://github.com/statox/breath&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;more structured project&lt;/a&gt; on Github which would also allow me to host the application via the Github Pages feature.&lt;/p&gt;
&lt;h4&gt;Managing transitions&lt;/h4&gt;
&lt;p&gt;The first module I needed to implement was my &lt;code&gt;StateComputer&lt;/code&gt; which is used to keep track of where the program is in the animation.&lt;/p&gt;
&lt;p&gt;To do so it has an array of state representing the different steps and how long they should last:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentStateIndex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// keep track of the current state&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;states &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// durations are in milliseconds&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        action&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;inhale&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Breath in&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        duration&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4000&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        action&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;inhale pause&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Breath in&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        duration&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        action&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;exhale&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Breath out&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        duration&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6000&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        action&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;exhale pause&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Breath out&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        duration&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A function is also called at the beginning of the session and use a timeout to update the state for each transition:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;updateState&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentStateIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentStateIndex &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;states&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastMark &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; timeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;states&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentStateIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentInterval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;updateState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; timeout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Stop the animations once the time of the session is elapsed&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;remainingMs &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentStateIndex &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;states&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playing &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And finally a function call for each frame indicate where we are in percentage of the current step:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getCurrentPercentage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playing&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currentlyElapsed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;millis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastMark&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; currentDuration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;states&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentStateIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentStateIndex &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentlyElapsed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentDuration&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentStateIndex &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentStateIndex &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentlyElapsed&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentDuration&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentStateIndex &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we are able to get the percentage of the step we can have some fun and start writing our animation functions which will draw shapes progressively.&lt;/p&gt;
&lt;h4&gt;Making animations&lt;/h4&gt;
&lt;p&gt;First in our &lt;code&gt;sketch.js&lt;/code&gt; file we can define the &lt;code&gt;setup()&lt;/code&gt; and &lt;code&gt;draw()&lt;/code&gt; function used by p5 respectively to initialize the application and then to refresh the canvas at each frame.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Create the canvas and put it in its div&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myCanvas &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createCanvas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    myCanvas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;canvasDiv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    stateComputer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StateComputer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    animations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AnimationClass1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AnimationClass2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    animationsIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    animation &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; animations&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;animationsIndex&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;percentage&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stateComputer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    animation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;percentage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this structure we can simply add more classes to our &lt;code&gt;animations&lt;/code&gt; array and as long as the class has a &lt;code&gt;draw()&lt;/code&gt; method accepting a percentage as a parameter it will be shown.&lt;/p&gt;
&lt;p&gt;(Some omitted code handles the incrementation of &lt;code&gt;animationsIndex&lt;/code&gt; to change the currently displayed animation.)&lt;/p&gt;
&lt;p&gt;One such class is shown here:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SimpleCircleAlpha&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minR &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maxR &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;percentage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maxR &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minR &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; alpha &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;percentage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; paint &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;percentage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;rgba(&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;paint&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;paint&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;paint&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;alpha&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; r &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;percentage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;minR&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maxR&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we draw a circle whose radius and color change depending on the progress of the state.&lt;/p&gt;
&lt;h3&gt;Meditative coding&lt;/h3&gt;
&lt;p&gt;Once the skeleton of the app was made (i.e. adding some buttons, a UI based on Vue.js to choose the duration of the session, playing with a &amp;quot;fullscreen&amp;quot; button, some CSS media queries and all the other boring details I didn&#39;t include here) all that is left for me to do is to add more animations. And, weirdly, spending time just creating some pleasing visuals on the rythm of a slow breathing really has something close to meditation.&lt;/p&gt;
&lt;p&gt;So that was a fun and relaxing project and I really hope I will continue to take some time to regularly create new animations because so far that has been a very calming experience.&lt;/p&gt;
&lt;p&gt;Here is a gif of some of the visuals I created and the full application is available &lt;a href=&quot;https://breath.statox.fr/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on this page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/images/breath.gif&quot; alt=&quot;spoiler&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Asteroids... with real pew pews</title>
    <link href="https://www.statox.fr/posts/p5/asteroids/"/>
    <updated>2020-10-25T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/asteroids/</id>
    <content type="html">&lt;p&gt;Asteroids! The game is as old as the world (well almost, it was &lt;a href=&quot;https://en.wikipedia.org/wiki/Asteroids_(video_game)&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;released in 1979&lt;/a&gt;) and is an iconic figure of the golden era of the video game.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/en/1/13/Asteroi1.png&quot; alt=&quot;Original asteroids screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Over a lazy Sunday I decided to implement my own version because why not? And, to make it more fun, my girlfriend gave me the idea to make the sound effects myself, idea that I really liked!&lt;/p&gt;
&lt;p&gt;So after a few hours of code and some really crappy recording on my phone &lt;a href=&quot;https://asteroides.statox.fr/?utm_campaign=blog&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here is what I came up with&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/p5/asteroids/asteroids.png&quot; alt=&quot;My own asteroids version screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;No technological innovation or mind blowing creativity here but the result still amuses me more than I would be willing to admit. I feel like I am re-discovering the early 2000&#39;s flash games and that&#39;s fun!&lt;/p&gt;
&lt;p&gt;To make it a complete game I still implemented some bonuses, like the autopews and the triple pew which allow respectively to continuously shoot at the asteroids and to shoot in 3 directions, as well as some maluses like slowing down the spaceship rotation speed or locking its engine on to force the player to get good at slaloming between the rocks at full speed. I also used my own noise function (actually a wrapper around p5js&#39;s &lt;code&gt;noise()&lt;/code&gt; function) to generate random rocks which &lt;em&gt;kinda&lt;/em&gt; look like asteroids.&lt;/p&gt;
&lt;p&gt;But let&#39;s be real despite all these amazing features the main interest of the game is hearing my dumb &amp;quot;pew pew&amp;quot; and &amp;quot;boum&amp;quot; for five minutes before it gets annoying.&lt;/p&gt;
&lt;p&gt;The game is playable online &lt;a href=&quot;https://asteroides.statox.fr/?utm_campaign=blog&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on this page&lt;/a&gt; but it doesn&#39;t support mobile browsers (since it&#39;s played with the keyboard) and runs terribly slowly in some version of Firefox (because of a privacy setting which doesn&#39;t play well with p5js).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Ants colony algorithm visualization</title>
    <link href="https://www.statox.fr/posts/p5/ants/"/>
    <updated>2020-11-09T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/ants/</id>
    <content type="html">&lt;p&gt;A few months ago I read about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ant colony optimization algorithms&lt;/a&gt; and since then I really wanted to give a shot at doing my own implementation. This algorithm is cool because this is a different kind of emerging behavior which &lt;a href=&quot;https://www.statox.fr/posts/p5/boids/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;I already experimented with&lt;/a&gt; and find fascinating.&lt;/p&gt;
&lt;p&gt;So I came up with &lt;a href=&quot;https://statox.github.io/ants-colony/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;this web page&lt;/a&gt; which works reasonably well 🎉. However, after working on this project for a few days I realized that I messed up my architecture and that I will not be able to extend the project as I want to without an heavy refactoring of the code. And since I have other shiny other project ideas I want to play with, I&#39;ll just add this project to my big collection of unfinished side projects and maybe get back at it when I have time.&lt;/p&gt;
&lt;p&gt;This kind of posts is probably not very useful nor interesting for anyone other than me, but I see it as some kind of journal that I&#39;ll probably be happy to look at one day.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/p5/ants/ants.gif&quot; alt=&quot;Visualization of several food sources&quot; /&gt;&lt;/p&gt;
&lt;center&gt;
    &lt;i&gt;This visualization shows the green pheromone trail being updated for a few different food sources. The ants are
    not shown.&lt;/i&gt;
&lt;/center&gt;
&lt;h3&gt;Ants behavior&lt;/h3&gt;
&lt;p&gt;The idea here is to have a colony of autonomous ants all starting on the same point -the anthill- and moving on a grid,looking for food. Each ant can walk on the grid with the only constraint that they can&#39;t go twice on the same cell in one trip.&lt;/p&gt;
&lt;p&gt;During its trip an ant can either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find a spot with some food and stop moving;&lt;/li&gt;
&lt;li&gt;Get stuck because it surrounded itself with cells it already walked on;&lt;/li&gt;
&lt;li&gt;Never get stuck and not find food, in this case it will walk until its time to live (the preset duration of the trip) is reached.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the case where an ant finds some food, it will go back to the anthill and lay down some amount of pheromones on all the cells it visited during this trip. The amount of pheromones an ant lays down is inversely proportional to the length of its path, meaning that the ant finding the shortest path to food will leave the strongest trail.&lt;/p&gt;
&lt;p&gt;When it walks an ant will follow the pheromones: Each surrounding case is evaluated and attributed a probability to be chosen depending on its amount of pheromones and whether or not it contains food. The ant will then &amp;quot;throw a dice&amp;quot; and choose a cell following the probabilities and the result of the dice.&lt;/p&gt;
&lt;p&gt;For the first few iterations the ants just walk randomly on the grid until one finds some food and start creating a trail. Then for the next iterations the ants will generally follow this trails more or less closely, allowing some ants to find a better solution and gradually optimizing their way. That&#39;s what we can observe  in the following gif.&lt;/p&gt;
&lt;p&gt;The cells outlined in a greyish color indicate the cells where some ants walked but didn&#39;t found any food, on the first iterations there are a lot of these cells and they get fewer once ants find the food source. In this example the convergence could happen sooner if the time to live of the ants and their attraction to pheromones were tweaked.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/p5/ants/ants_walk.gif&quot; alt=&quot;Visualization of ants walking&quot; /&gt; &lt;em&gt;This visualization shows the ants (blue dots) refining the pheromone trail for one food source&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Improvement points&lt;/h3&gt;
&lt;p&gt;There are a few things I want to change in the app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Obstacles: For now I am able to say that a cell is an obstacle, and I created a function to create some random obstacles on the grid. That works quite well for now, but I would like to improve that to create actual mazes &lt;a href=&quot;https://www.statox.fr/posts/p5/p5-maze/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;as I did in another project&lt;/a&gt;. This could be done but that would mean changing how I handle the grid and the ants moving.&lt;/li&gt;
&lt;li&gt;Perception radius: The main issue with the current state of the project is that ants have a defined perception radius representing the cells they can see around them. However due to the way I implemented my neighbors search and my obstacles this doesn&#39;t work well with radius &amp;gt; 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Maybe a V2&lt;/h3&gt;
&lt;p&gt;Maybe I will do a v2 of this project. If I do I&#39;ll think from the beginning of how to implement the ants &amp;quot;vision&amp;quot; (how they detect obstacles and where they can move) which should allow me to have a more efficient neighbor selection algorithm.&lt;/p&gt;
&lt;p&gt;I would also like to add some feature which shouldn&#39;t be too hard to implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic TTL: The ants could increase their TTL automatically if they don&#39;t find anything for a few iterations allowing a more efficient exploration of the map.&lt;/li&gt;
&lt;li&gt;Ant selection: Instead of having all the ants which find food to leave a trail, I could use some min-max algorithm or another way to select the best ant to have only one trail.&lt;/li&gt;
&lt;li&gt;Bees battle: When ants leave a trail when they go back to the anthill, bees remember their position and communicate it to the other insects. This would create a different approach to the path finding algorithm and it would be interesting to see both types of insect running for the same food source and battling to get more than the others.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the meantime I still have fun looking at my little insects finding their way in this small virtual and meaningless world 🐜&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Winter holidays unfinished projects (1/2) - Triomino</title>
    <link href="https://www.statox.fr/posts/p5/winter-holiday-2020/triomino/"/>
    <updated>2021-01-20T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/winter-holiday-2020/triomino/</id>
    <content type="html">&lt;h3&gt;Board games are fun!&lt;/h3&gt;
&lt;p&gt;During the winter holidays I played some games of Triomino and Reversi, which I hadn&#39;t done in an eternity. This reminded me that the first programs I enjoyed coding were some board games and it gave me the motivation to get back on some side projects.&lt;/p&gt;
&lt;p&gt;So once again I cloned my boilerplate git repo with an html page and the p5.js library imported and started coding.&lt;/p&gt;
&lt;p&gt;Even though I didn&#39;t finished any of these projects they were still fun to work on and worth a short blogpost, for the posterity.&lt;/p&gt;
&lt;h3&gt;Triomaster&lt;/h3&gt;
&lt;p&gt;As the name of the project suggest I was aiming for an IA mastering the Triomino game... I ended up with an IA playing the Triomino game.&lt;/p&gt;
&lt;p&gt;When I started thinking about this project I had in mind a &lt;a href=&quot;http://www-cs-students.stanford.edu/~amitp/game-programming/grids/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;great article on redblobgame&lt;/a&gt; about different kind of grids and how to implement them I had read several months ago and thought it would be useful. But being impatient to start coding I went straight in and didn&#39;t read it again, probably making some mistakes which I could have avoided.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/p5/winter-holiday-2020/triomino/triomino.png&quot; alt=&quot;Screenshot of my Triomino implementation&quot; /&gt;&lt;/p&gt;
&lt;center&gt;
    &lt;i&gt;Another obvious proof of my UX/UI designer genius&lt;/i&gt;
&lt;/center&gt;
&lt;h4&gt;Grid system&lt;/h4&gt;
&lt;p&gt;I ended up with a two dimensional array containing consecutive &lt;code&gt;Cell&lt;/code&gt; objects. These objects have a &lt;code&gt;pointsDown&lt;/code&gt; property set at the creation of the grid and used to determine how the tile is displayed (pointing up or down). When a tile is placed on it, the object also has a reference to a &lt;code&gt;Triomino&lt;/code&gt; object holding the actual values of the tile and which is responsible for checking which other triominos are allowed to connect or not. With a bit of math (and a lot of poking around to find the correct formula) I was able to show triangles adjacent one to another pointing alternatively up and down.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rgba(0, 0, 0, 0.1)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;strokeWeight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;noFill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Show the user which cell is clicked&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;selected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;rgba(50, 200, 50, 0.3)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Move to the right position and rotate to point up&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If needed rotate again to point down and translate so that we are aligned with those pointing up&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pointsDown&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Draw the triangle shape&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;beginShape&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;r &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;endShape&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;CLOSE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;triomino&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;triomino&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Things got messy when I finished displaying the triangles and started thinking about how to click on them (to select the triomino to play and where to place it). I didn&#39;t felt like doing the math to determine when the mouse is in a particular triangle, so I thought I would be smart and lazy using the &lt;a href=&quot;https://molleindustria.github.io/p5.play/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;p5play&lt;/a&gt; library. It provides the ability to create some sprites and to attach an event when the sprite is clicked, offloading the burden of calculating mouse-to-sprite collisions. I choose to go quick and dirty, adding a &lt;code&gt;Sprite&lt;/code&gt; object to each &lt;code&gt;Cell&lt;/code&gt; and &lt;code&gt;Triomino&lt;/code&gt; objects with nothing in the &lt;code&gt;draw()&lt;/code&gt; function of the &lt;code&gt;Sprite&lt;/code&gt; because I already had a nice &lt;code&gt;draw()&lt;/code&gt; function in the &lt;code&gt;Cell&lt;/code&gt;. Of course after several iterations when the project got more complex it just added more complexity and was probably not the smartest choice.&lt;/p&gt;
&lt;p&gt;One of the main issue was to keep the &lt;code&gt;Sprite&lt;/code&gt; position synced with its parent object position (mainly because I handled the &lt;code&gt;Triomino&lt;/code&gt; moves terribly). After some tweaks it ended up working.&lt;/p&gt;
&lt;h4&gt;AI&lt;/h4&gt;
&lt;p&gt;At first I wanted to go with a clever AI which would use some kind of A* algorithm to find the best possible move to do.  However my first AI version was much simpler: Looking for all the possible moves and placing the triomino with the highest score.&lt;/p&gt;
&lt;p&gt;To have a working AI I needed to implement the &lt;a href=&quot;https://www.pressmantoy.com/wp-content/uploads/2018/01/Tri-Ominos.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;complete set of scoring rules&lt;/a&gt;, but I only implemented the basic rule of &amp;quot;when the player places a tile her score is incremented by the sum of the digits on the tile&amp;quot; and the bonus points at the beginning of the game. I didn&#39;t implemented the bonus points granted when a shape is completed.&lt;/p&gt;
&lt;p&gt;So given my incomplete set of rules I played a few game against my basic AI and I realized that it is still pretty good, actually as good as a human who would play the game for the first time without thinking of the strategy but never missing a possible spot.&lt;/p&gt;
&lt;p&gt;After these few games I realized that Triomino quickly gets boring and that luck is a big factor anyway so I decided to switch to my next project.&lt;/p&gt;
&lt;h4&gt;Online demo&lt;/h4&gt;
&lt;p&gt;I&#39;m still happy with the result of this project: One can play a complete game against the computer, the scores are kept track of and a winner is declared before the game starts again.&lt;/p&gt;
&lt;p&gt;There are still a tons of features which I would want to add, especially the ability to scroll over the board to avoid being blocked by its small dimension but the way I handled sprites makes it pretty hard to do and that would probably require a complete refactoring.&lt;/p&gt;
&lt;p&gt;A demo is hosted on github pages and available &lt;a href=&quot;https://statox.github.io/triomaster/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt; and the code is &lt;a href=&quot;https://github.com/statox/triomaster&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Winter holidays unfinished projects (2/2) - Reversi</title>
    <link href="https://www.statox.fr/posts/p5/winter-holiday-2020/reversi/"/>
    <updated>2021-01-21T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/p5/winter-holiday-2020/reversi/</id>
    <content type="html">&lt;h3&gt;Board games are fun!&lt;/h3&gt;
&lt;p&gt;After not finishing my &lt;a href=&quot;https://www.statox.fr/posts/p5/winter-holiday-2020/triomino/&quot;&gt;triomino project&lt;/a&gt; I started working on an implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Reversi&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Reversi game&lt;/a&gt;. According to Wikipedia my implementation is technically an Othello game but this name was patented in Japan in 1971 and I decided to play it safe and calling it Reversi (no doubt that the owner of the name would have felt greatly threatened by my &lt;em&gt;amazing&lt;/em&gt; implementation of his game).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/p5/winter-holiday-2020/reversi/reversi.png&quot; alt=&quot;Screenshot of my Reversi implementation&quot; /&gt;&lt;/p&gt;
&lt;center&gt;
    &lt;i&gt;My patent infrigement material&lt;/i&gt;
&lt;/center&gt;
&lt;p&gt;Despite not being finished I really loved doing this project because it was the first time I used typescript instead of javascript for a personal project. I am well used to typescript on the backend since it&#39;s the language I use daily in my job at Dashlane but I had never took the time to add the tooling to use it in my frontend side projects. This is now done and with no surprise it greatly helped me to get quick results.&lt;/p&gt;
&lt;h4&gt;A new dumb AI&lt;/h4&gt;
&lt;p&gt;The rules being pretty simple and the grid a traditional square, implementing the game wasn&#39;t the most interesting part of this project. Implementing the AI however was pretty fun. At first I went with the most basic method possible: The Great Random!&lt;/p&gt;
&lt;p&gt;Once all the tooling is in place to spot the playable cells on the grid, implementing an AI which chose one spot randomly is pretty straight forward. It then quickly evolved to a slightly less dumb AI which choose the spot where it will turn the most possible disks.&lt;/p&gt;
&lt;p&gt;With these AI implemented I spent a bit of time to add a &amp;quot;hint&amp;quot; button which uses the AI to play for the player and an &amp;quot;autoplay&amp;quot; button which makes the AI play the whole game for the player. Watching my programmed piece of silicon playing against itself amuse me to no end and I can stay hours watching it tirelessly placing disks on the board (Ok, not hours but at least five good minutes).&lt;/p&gt;
&lt;h4&gt;A refresher on MinMax algorithm&lt;/h4&gt;
&lt;p&gt;After creating my basic AIs I went one step further and implemented a new one with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimax&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;minmax algorithm&lt;/a&gt;. I had already implemented one on a student project for a tic-tac-toe game and I wanted to do that on something more complex ever since, that was a great opportunity.&lt;/p&gt;
&lt;p&gt;Although the algorithm itself isn&#39;t really groundbreaking I got to learn something pretty interesting during its implementation: I got pretty quickly a first working version but I quickly realized that my implementation had a memory leak, after a few turns the memory usage of the page would grow up and never go down. I spent two days debugging my code in a lot of different ways, trying to use the Chrome debugging tools to inspect memory snapshots.&lt;/p&gt;
&lt;p&gt;I quickly understood that my issue was that my &lt;code&gt;Board&lt;/code&gt; objects were not garbage collected: To create the different nodes of the algorithm I copy the &lt;code&gt;Board&lt;/code&gt; object holding the current state of the game, add a new disk, turn the other disks accordingly and iterate on these new boards. These &lt;code&gt;Board&lt;/code&gt; object hold an array of &lt;code&gt;Cells&lt;/code&gt; representing the different spots and the disks played on them. As my boards were not garbage collected I suspected that when I was done using them I didn&#39;t released the references to these cells and so I spent hours trying different things to make sure that all the child references were deleted.&lt;/p&gt;
&lt;p&gt;After a couple of days of debugging, a copious amount of absolutely useless changes, the reading of numerous articles about javascript memory leaks and some tears of blood I decided to just let it go and switch to another project. That the moment where, in my shower, I had an epiphany: Two days before I had read a list of tips about javascript memory leaks and one of them was &amp;quot;Be cautious with your &lt;code&gt;setTimeout&lt;/code&gt; they create global references and that&#39;s no good&amp;quot; which I had immediately dismissed since I always try to be cautious about my &lt;code&gt;setTimeout&lt;/code&gt;... Except I hadn&#39;t :🤦&lt;/p&gt;
&lt;p&gt;My &lt;code&gt;Board&lt;/code&gt; objects have a &lt;code&gt;lastPlayed&lt;/code&gt; property which is used by the GUI to show the user which disk they have placed last. And being an amazing UX designer I thought it would be nice to highlight this cell and stop highlighting it after a few seconds... Sure enough I had used a &lt;code&gt;setTimeout&lt;/code&gt; to do that and each time the AI placed a disk on a Board it created this timeout, preventing the garbage collector to get rid of the board. After getting rid of that my algorithm worked like a charm... Almost.&lt;/p&gt;
&lt;p&gt;It turns out that for a game of Othello there are a lot of different possibilities so I couldn&#39;t run my MinMax with a depth greater than 3 to keep the execution time under a few seconds. That was something I had anticipated and that lead me to implementing an Alpha Beta pruning algorithm to improve the performances. Unfortunately, this kind of algorithm requires a heuristic function in addition of the evaluation function used by MinMax. That&#39;s when I stopped working on this project, I have quite a good idea of the different heuristic I want to create (mainly thanks to a great research paper I can&#39;t find back at the time of this writing) but I&#39;ll have to spend more time on this project and I&#39;m not sure when that will happen.&lt;/p&gt;
&lt;h4&gt;Comparing the IA&lt;/h4&gt;
&lt;p&gt;While I was implementing my different AIs I needed to compare them together to make sure I was heading in the right direction, so in addition of the GUI I also developed a testing program which runs thousands of games and collects some simple statistics. Here are some results:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Random vs. Random&lt;/th&gt;
&lt;th&gt;win percentages&lt;/th&gt;
&lt;th&gt;nb of games won&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;player 1 (Random)&lt;/td&gt;
&lt;td&gt;49.11%&lt;/td&gt;
&lt;td&gt;4911&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;player 2 (Random)&lt;/td&gt;
&lt;td&gt;50.89%&lt;/td&gt;
&lt;td&gt;5089&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Random vs. Most disks&lt;/th&gt;
&lt;th&gt;win percentages&lt;/th&gt;
&lt;th&gt;nb of games won&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;player 1 (Random)&lt;/td&gt;
&lt;td&gt;42.82%&lt;/td&gt;
&lt;td&gt;4282&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;player 2 (Most disks)&lt;/td&gt;
&lt;td&gt;57.18%&lt;/td&gt;
&lt;td&gt;5718&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Random vs. MinMax (depth 3)&lt;/th&gt;
&lt;th&gt;win percentages&lt;/th&gt;
&lt;th&gt;nb of games won&lt;/th&gt;
&lt;th&gt;avg. nodes evaluated by turn&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;player 1 (Random)&lt;/td&gt;
&lt;td&gt;26.55%&lt;/td&gt;
&lt;td&gt;478&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;player 2 (MinMax)&lt;/td&gt;
&lt;td&gt;73.44%&lt;/td&gt;
&lt;td&gt;1322&lt;/td&gt;
&lt;td&gt;12 179 319&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Random vs. AlphaBeta (depth 3)&lt;/th&gt;
&lt;th&gt;win percentages&lt;/th&gt;
&lt;th&gt;nb of games won&lt;/th&gt;
&lt;th&gt;avg. nodes evaluated by turn&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;player 1 (Random)&lt;/td&gt;
&lt;td&gt;35.33%&lt;/td&gt;
&lt;td&gt;1590&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;player 2 (AlphaBeta)&lt;/td&gt;
&lt;td&gt;64.66%&lt;/td&gt;
&lt;td&gt;2910&lt;/td&gt;
&lt;td&gt;2 785 672&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Nothing really surprising here but at least the results seem to be pretty coherent with what I was expecting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When two player play randomly they roughly have a 50% rate of victory, at least &lt;code&gt;Math.random()&lt;/code&gt; seems to be working good enough for this use case&lt;/li&gt;
&lt;li&gt;Trying to always flip as many disks as possible is a bit more efficient than playing randomly, at least if your opponent plays randomly.&lt;/li&gt;
&lt;li&gt;My MinMax implementation is pretty effective against a random user, increasing the maximal depth would make it pretty good.  However given the time it takes to run I couldn&#39;t run as many games as for the other AIs.&lt;/li&gt;
&lt;li&gt;My AlphaBeta pruning without a good heuristic is just a semi-broken MinMax: it&#39;s better than a random player but it prunes some valid nodes which makes it not as efficient as it could be.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Demo&lt;/h4&gt;
&lt;p&gt;I am really pleased with this project because it was a nice opportunity to get back to a bit of game theory and some decision algorithm which I really enjoy playing with. Also it was pretty cool to finally add Typescript to my toolbox for side projects and I&#39;m looking forward to continue using it in my next coding adventure.&lt;/p&gt;
&lt;p&gt;As usual the demo is hosted &lt;a href=&quot;https://statox.github.io/reversi/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Github pages&lt;/a&gt; and the code is &lt;a href=&quot;https://github.com/statox/reversi&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;right next to it&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Reaching 1.2m readers and stepping down from my moderator position on vi.se</title>
    <link href="https://www.statox.fr/posts/vim/stepping-down-vi-se/"/>
    <updated>2021-02-04T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/vim/stepping-down-vi-se/</id>
    <content type="html">&lt;p&gt;This week I sent an email to the Stack Exchange team to let them know that I was stepping down from my moderator position on &lt;a href=&quot;https://vi.meta.stackexchange.com/q/1542/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vi.se&lt;/a&gt; and asking them to remove my diamond.&lt;/p&gt;
&lt;p&gt;In 2015 I was in my last year of school and I was maintaining a small CRM project with 7 other students. One of them introduced me to Vim during this project and that was the beginning of my love story with this text editor which is still my daily driver today.&lt;/p&gt;
&lt;p&gt;One day this friend of mine, Nobe4, created &lt;a href=&quot;https://vi.stackexchange.com/users/1821/nobe4?tab=profile&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;his account&lt;/a&gt; and told me about it. The next day I was creating mine and I have to admit that, for me, it started a &amp;quot;who would get the most reputation points&amp;quot; competition against this fellow whom I consider as a very strong technical person. It turned out that after a year or two Nobe4 stopped participating on the website but for me it was too late: I was hooked and I was already enjoying helping other people more than getting imaginary points from the internet.&lt;/p&gt;
&lt;p&gt;I have been a member of this community since April 2015 and I&#39;ve been appointed as a moderator in December 2017. Over these past 6 years I have learned a lot about Vim and I think that I had the opportunity to share some pieces of interesting knowledges. As I am stepping down I thought it would be interesting to have a look at how the site grew up and what I have done to contribute in my own way to this growth.&lt;/p&gt;
&lt;h3&gt;Some numbers about the site&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://vim.stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vim.stackexchange.com&lt;/a&gt; (or &lt;a href=&quot;https://vim.stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vi.se&lt;/a&gt;, for the connoiseurs) is a relatively small website from the well known &lt;a href=&quot;https://stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;stack exchange network&lt;/a&gt;. It was originally proposed on &lt;a href=&quot;https://area51.stackexchange.com/proposals/80441/vi-and-vim&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;area51&lt;/a&gt; in November 2014 and the public beta was launched in February 2015.&lt;/p&gt;
&lt;p&gt;In its 6 years of existence the community has grown significantly and became one of the online reference for all things about vim, neovim and their sister editors.&lt;/p&gt;
&lt;p&gt;Here is are a few general numbers that I pulled from &lt;a href=&quot;https://data.stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;data.se&lt;/a&gt; to illustrate this growth:&lt;/p&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;April 2015&lt;/th&gt;
            &lt;th&gt;February 2021&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Number of users&lt;/td&gt;
            &lt;td&gt;1773&lt;/td&gt;
            &lt;td&gt;29745&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Number of posts&lt;/td&gt;
            &lt;td&gt;
                &lt;table&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th&gt;Type of post&lt;/th&gt;
                            &lt;th&gt;Count&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;thead&gt;
                    &lt;/thead&gt;&lt;/thead&gt;&lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;td&gt;Question&lt;/td&gt;
                            &lt;td&gt;643&lt;/td&gt;
                        &lt;/tr&gt;&lt;tr&gt;
                        &lt;/tr&gt;&lt;tr&gt;
                            &lt;td&gt;Answer&lt;/td&gt;
                            &lt;td&gt;1146&lt;/td&gt;
                        &lt;/tr&gt;&lt;tr&gt;
                        &lt;/tr&gt;&lt;tr&gt;
                            &lt;td&gt;Tag wiki&lt;/td&gt;
                            &lt;td&gt;81&lt;/td&gt;
                        &lt;/tr&gt;&lt;tr&gt;
                    &lt;/tr&gt;&lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;table&gt;
                    &lt;thead&gt;
                        &lt;tr&gt;
                            &lt;th&gt;Type of post&lt;/th&gt;
                            &lt;th&gt;Count&lt;/th&gt;
                        &lt;/tr&gt;
                    &lt;thead&gt;
                    &lt;/thead&gt;&lt;/thead&gt;&lt;tbody&gt;
                        &lt;tr&gt;
                            &lt;td&gt;Question&lt;/td&gt;
                            &lt;td&gt;10405&lt;/td&gt;
                        &lt;/tr&gt;&lt;tr&gt;
                        &lt;/tr&gt;&lt;tr&gt;
                            &lt;td&gt;Answer&lt;/td&gt;
                            &lt;td&gt;13747&lt;/td&gt;
                        &lt;/tr&gt;&lt;tr&gt;
                        &lt;/tr&gt;&lt;tr&gt;
                            &lt;td&gt;Tag wiki&lt;/td&gt;
                            &lt;td&gt;229&lt;/td&gt;
                        &lt;/tr&gt;&lt;tr&gt;
                    &lt;/tr&gt;&lt;/tbody&gt;
                &lt;/table&gt;
            &lt;/td&gt;
        &lt;/tr&gt;&lt;tr&gt;
    &lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In the moderator dashboard (&lt;em&gt;which displays a big shiny warning &amp;quot;analytics data is intended for moderators only; please don&#39;t share the specifics of this data in public&amp;quot;&lt;/em&gt;) we (the mods) can see the average number of posts by months has been pretty steady since the creation of the site, excepted for the Spring of 2020 which saw a significant spike which I don&#39;t really have an explanation for other than people got bored because of the various lock downs and started using Vim).&lt;/p&gt;
&lt;p&gt;The number of page views however has been steadily increasing. For a reason I don&#39;t know the stats of page views starts in February 2018 with about 180.000 pages viewed each month and have been linearly growing ever since to reach about 260.000 monthly page views.&lt;/p&gt;
&lt;p&gt;As we can see the community has grown quite a lot, today it drives about 7000 visitors each day for an average of 6.3 questions a day. Here are more numbers from the area51 website:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/vim/stepping-down-vi-se/are51-stats.png&quot; alt=&quot;area51 stats&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As we can see the stats are flirting with the out-of-beta thresholds, even thought I don&#39;t think they will reach these thresholds any time soon. As it is the case for a lot of smaller websites dedicated to niche topics on stackexchange, &lt;a href=&quot;https://vim.stackexchange.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vi.se&lt;/a&gt; might very well stay in beta all of its life. And that&#39;s great! A smaller community is friendlier and usually easier to moderate which is a nice way to generate some interesting content.&lt;/p&gt;
&lt;h3&gt;Moderator actions&lt;/h3&gt;
&lt;p&gt;Due to the relatively small size of the site, the community is quite easy to moderate. In my 3 years of moderation duty I have encountered only one or two problematic users who required the moderation team to take an action against them.&lt;/p&gt;
&lt;p&gt;Most of the time the moderator duty is just doing the janitor job of handling the few flags coming each day, editing or deleting a post once in a while and helping the new comers to create better posts.&lt;/p&gt;
&lt;p&gt;Here is an insight on the number of actions I&#39;ve taken during my duty. My two fellow moderators &lt;a href=&quot;https://vi.stackexchange.com/users/10604/d-ben-knoble&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Ben&lt;/a&gt; and &lt;a href=&quot;https://vi.stackexchange.com/users/18609/filbranden&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fill&lt;/a&gt; are quickly catching up on these metrics since they have been appointed about one year ago and have been doing an amazing job during these last months when I have been less active on the site.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/vim/stepping-down-vi-se/moderator_dashboard.png&quot; alt=&quot;moderator dashboard&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;A bit about my work&lt;/h3&gt;
&lt;p&gt;Now I want to write a bit about me, not that it will be useful to anyone but at least to make me feeling good about myself which is still pretty important.&lt;/p&gt;
&lt;p&gt;Let&#39;s start with the public overview of &lt;a href=&quot;https://vi.stackexchange.com/users/1841/statox&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;my profile&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/vim/stepping-down-vi-se/statox_stats.png&quot; alt=&quot;my stats&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Of all of these numbers the one I&#39;m definitely the most proud of is the &lt;strong&gt;~1.2m people reached&lt;/strong&gt; 🎉&lt;/p&gt;
&lt;p&gt;This metric is not exactly accurate &lt;a href=&quot;https://meta.stackoverflow.com/q/290491/4194289&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;as explained here&lt;/a&gt; but knowing that roughly 1 million people have read what I wrote and hopefully got some useful information out of that fills me with pride and happiness. Being able to help other people fixing their problems, learning about a new tool and improving their daily computer life has been really rewarding for me, and despite leaving my moderator position I still intend to continue helping people on the internet.&lt;/p&gt;
&lt;p&gt;Another metric I am really pleased about is my reputation count. I reached about 39.7k reputation points placing me in the second position in the site-wide ranking, well behind our historical moderator Martin. This ranking has been pretty stable for a year or two now and I believe this is mainly due to a few historical posts which were posted in the early days of the site and continue to gather reputation pretty regularly (as an example romainl the 3rd top user stopped participating on the site in December 2016 and it took me about 4 years after that to reach his score)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/posts/vim/stepping-down-vi-se/reputation_board.png&quot; alt=&quot;reputation ranking&quot; /&gt;&lt;/p&gt;
&lt;p&gt;What about my actual posts?&lt;/p&gt;
&lt;p&gt;Amongst the 60 questions and 500+ answers I wrote, some of them are more important to me than the others.Firstly, I pride myself in having two of my questions in the Top &lt;s&gt;10&lt;/s&gt; 11 &lt;a href=&quot;https://vi.stackexchange.com/questions?tab=Frequent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;most frequently visited questions&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vi.stackexchange.com/q/7722/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;How to debug a mapping&lt;/a&gt; which is a question I decided to create when I saw how common were questions about mappings misunderstandings. I also self answered this question with a completely methodology which is my highest voted answer with 117 votes and around 18k views.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vi.stackexchange.com/q/7466/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;What is the difference between the vim snippets plugins?&lt;/a&gt; which was an actual question I had when I tried different snippets plugins (which I ditched from my &lt;code&gt;.vimrc&lt;/code&gt; since).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My most upvoted question is &lt;a href=&quot;https://vi.stackexchange.com/q/9522/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;What is the Vim8 package feature and how should I use it?&lt;/a&gt; which is another question I self answered. When Vim8 was released the new package feature which is a new way to install your plugins was not entirely trivial to understand, so once I had spent a bit of time reading the doc and testing the feature by myself I thought it would be useful for other people too. My 41k page views seems to say I was right 😎 (Yes, this is me openly bragging).&lt;/p&gt;
&lt;p&gt;Finally my favorite answer is probably the one I wrote in &lt;a href=&quot;https://vi.stackexchange.com/a/15674/1841&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Why is using arrow keys in normal mode considered bad practice?&lt;/a&gt; because this is such a non important topic which blocks so many new Vimmers and I believe it is important to remind everyone who start using this tool that they should not blindly follow some cargo cult advises.&lt;/p&gt;
&lt;h3&gt;:x&lt;/h3&gt;
&lt;p&gt;These past 6 years as a member of such a great community have been full of learning and were also the opportunity to discuss with some really smart and well intended Vimmers and I think that&#39;s what made me enjoy this website so much.&lt;/p&gt;
&lt;p&gt;Also even if I step down from my moderator position I will probably continue to hang out a bit on this website because I still enjoy sharing knowledge as much as I enjoy using Vim.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Migrating my CI from Travis-CI to Github Actions</title>
    <link href="https://www.statox.fr/posts/others/travis-to-githubactions/"/>
    <updated>2021-03-03T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/others/travis-to-githubactions/</id>
    <content type="html">&lt;p&gt;Last November travis-ci &lt;a href=&quot;https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;announced&lt;/a&gt; a change in their pricing policy and that made me think about changing the CI environment I use for this website. After procrastinating on this topic for a few months I finally switched to &lt;a href=&quot;https://github.com/features/actions&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Github Actions&lt;/a&gt; here&#39;s why and how I did it.&lt;/p&gt;
&lt;h3&gt;Why changing?&lt;/h3&gt;
&lt;p&gt;When I created this website I needed to setup a CI environment which would build the site using the static generator &lt;a href=&quot;https://www.11ty.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;eleventy&lt;/a&gt; before it gets deployed to Github Pages. I wanted a tool which would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Free, because given the traffic on this website and the frequency of my commits I am not ready to put money in it;&lt;/li&gt;
&lt;li&gt;Simple to use, because I figured out from my previous attempt at creating a blog that any friction in the creation of a post reduce drastically the chances that I&#39;ll write anything;&lt;/li&gt;
&lt;li&gt;... And that&#39;s it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had already used travis on a previous side project and I knew I could make something work pretty easily, especially because I had already an account set up. So I didn&#39;t give it too much thoughts and started creating my &lt;code&gt;.travis-ci.yml&lt;/code&gt; file. And I have to say that after about 200 commits and 8 months of use I am still mostly satisfied this their service.&lt;/p&gt;
&lt;p&gt;The only trouble I had with travis was a few months ago when they decided to enforce the &lt;a href=&quot;https://docs.travis-ci.com/user/migrate/open-source-repository-migration&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;migration of all the open source repos from travis-ci.org to travis-ci.com&lt;/a&gt;. I was annoyed because my build suddenly broke and I had to do the migration when I wasn&#39;t planning to do it. In their defense though the migration was announced since 2018 and I was in fault for not seeing the notices (or most likely forgetting about them). Also it was a minor pain as the migration was fairly straight forward.&lt;/p&gt;
&lt;p&gt;With travis&#39; new pricing policy each open source project has a finite amount of credits to use for their builds and once they are out of credit, the maintainer needs to email the travis team to ask for more credits. Considering how many credits I consumed since the change is effective I estimate that I would run out of credits in roughly 3 years: &lt;em&gt;Who has time to send an email every 3 years for their side project?&lt;/em&gt; 🙄&lt;/p&gt;
&lt;p&gt;Ok, maybe that wouldn&#39;t be too much of an issue and I understand travis policy: In the end a company needs to make money to provide good products. But still, I was curious to experiment with Github Actions as they seem pretty popular currently, are better integrated with my project which is already hosted on Github and are completely free for what I want to do (&lt;em&gt;at least for now&lt;/em&gt;).&lt;/p&gt;
&lt;h3&gt;My CI workflow&lt;/h3&gt;
&lt;p&gt;Before having a look at what changed let&#39;s see what my CI workflow needs to do.&lt;/p&gt;
&lt;p&gt;It is a pretty straight forward process with three main steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run a script I made to check if I committed new posts with a reference to a Github issue that &lt;a href=&quot;https://www.statox.fr/posts/others/comments/&quot;&gt;I use to host comments&lt;/a&gt; and create the corresponding issue if it doesn&#39;t exists;&lt;/li&gt;
&lt;li&gt;Build the website using eleventy. This requires to checkout the last changes I made in my templates and run a npm script I have which execute eleventy and output the resulting HTML in a specified directory.&lt;/li&gt;
&lt;li&gt;Commit this built HTML to a &lt;code&gt;gh-pages&lt;/code&gt; branch on the repo which is then served by Github Pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To do that I had a 20 lines &lt;code&gt;travis-ci.yml&lt;/code&gt; file which looked like this:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node_js&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;node_js&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;stable&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;directories&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; node_modules&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;# Script to generate the issue in github used for comments&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm run create&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;issues &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; $GITHUB_TOKEN false&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm run build&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pages&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;skip_cleanup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;github_token&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $GITHUB_TOKEN&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;keep_history&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; master&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;local_dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; docs/&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;fqdn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; www.statox.fr&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first 3 blocks are used to setup the environment which will run the workflow: NodeJS is used to run my npm scripts, and we cache the &lt;code&gt;node_modules&lt;/code&gt; which is still bigger than I&#39;d want it to be (but that&#39;s another topic I&#39;ll try to tackle later).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;script&lt;/code&gt; block simply runs my npm script which creates the issues on Github and the one I use to run eleventy against my sources and output the result in a &lt;code&gt;docs&lt;/code&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally the &lt;code&gt;deploy&lt;/code&gt; block uses travis&#39; deploy built-in provider &lt;a href=&quot;https://docs.travis-ci.com/user/deployment/pages/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&amp;quot;pages&amp;quot;&lt;/a&gt; which commits the &lt;code&gt;docs&lt;/code&gt; directory to the &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For all of this to work properly I had to &lt;a href=&quot;https://docs.github.com/en/enterprise-server@2.22/github/authenticating-to-github/creating-a-personal-access-token&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;generate a personal access token&lt;/a&gt;, store it in my repository secrets and copy it in my travis CI settings to be able to call the Github API to create issues and to commit my changes.&lt;/p&gt;
&lt;h3&gt;What changed?&lt;/h3&gt;
&lt;p&gt;Because my workflow is very simple (no tests to run, no linting, etc...) moving it to Github Actions was pretty quick, it took me about 20 minutes to get it to work.&lt;/p&gt;
&lt;p&gt;First I got rid of the &lt;code&gt;.travis.yml&lt;/code&gt; file to avoid running both pipelines at the same time and I created a &lt;code&gt;.github/workflow/deploy.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; deploy&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; master &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;workflow_dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 🔀 Checkout&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 🚩 Configure node&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v1&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;12&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 🔧 Install and build&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;&lt;br /&gt;          npm ci&lt;br /&gt;          npm run build&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 💬 Create issues for comments&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run create&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;issues &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.ACCESS_TOKEN &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; false&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 🚀 Deploy&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; JamesIves/github&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;deploy&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;action@4.0.0&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gh&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages &lt;span class=&quot;token comment&quot;&gt;# The branch the action should deploy to.&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; docs &lt;span class=&quot;token comment&quot;&gt;# The folder the action should deploy.&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.ACCESS_TOKEN &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; block is only to set up the name of the action which will be shown in the UI&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/images/github_workflow.png&quot; alt=&quot;deploy workflow&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;on&lt;/code&gt; blocks defines when the workflow is ran. I want to deploy every time I push something to the &lt;code&gt;master&lt;/code&gt; branch and I also added the &lt;code&gt;workflow_dispatch&lt;/code&gt; directive which create the &lt;code&gt;Run workflow&lt;/code&gt; button in the UI to trigger it manually. I don&#39;t know if I&#39;ll ever need it but it doesn&#39;t hurt to have it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;jobs&lt;/code&gt; block defines the different steps will will be executed (&lt;a href=&quot;https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions#the-components-of-github-actions&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Github&#39;s doc&lt;/a&gt; explain that clearly) and that&#39;s where I needed to recreate what was happening on travis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;checkout&lt;/code&gt; and &lt;code&gt;setup-node&lt;/code&gt; built-in actions setup the environment (&lt;code&gt;git checkout&lt;/code&gt; the &lt;code&gt;master&lt;/code&gt; branch and install node 12 with npm).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;🔧 Install and build&lt;/code&gt; step pulls the npm dependencies (which was done automatically on travis) and run my build script. And the &lt;code&gt;💬 Create issues for comments&lt;/code&gt; step runs my custom script for issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally I use an action &lt;a href=&quot;https://github.com/marketplace/actions/deploy-to-github-pages&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;from the action market place&lt;/a&gt; to commit my build to my &lt;code&gt;gh-pages&lt;/code&gt; branch which is still served automatically by Github.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the main difference here compared to the travis configuration is that my access token was already in the secrets of my repository so I could access it directly with &lt;code&gt;${{ secrets.ACCESS_TOKEN }}&lt;/code&gt; without additional config.&lt;/p&gt;
&lt;h3&gt;Takeaway&lt;/h3&gt;
&lt;p&gt;My experience with switching my CI to Github Actions has been pretty positive. The whole process is very well documented by Github, there are a lot of actions available on the market place which &amp;quot;just work&amp;quot;, and for now it&#39;s completely free for my project.&lt;/p&gt;
&lt;p&gt;Even if that means relying even more on a Microsoft product -which I&#39;m not exactly happy about- that is easily counterbalanced by the how easy to use it is.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Neovim floating window to break bad habits</title>
    <link href="https://www.statox.fr/posts/vim/breaking_habits_floating_window/"/>
    <updated>2021-03-07T00:00:00Z</updated>
    <id>https://www.statox.fr/posts/vim/breaking_habits_floating_window/</id>
    <content type="html">&lt;p&gt;In 2016 I added to my &lt;code&gt;.vimrc&lt;/code&gt; a mapping to get easier access to window commands in normal mode. I was pretty happy with it in my local setup but it broke my workflow when I edited files on remote servers. Over time this got pestering enough for me to take action and decide to solve the issue. I thought it was a good opportunity to experiment with Neovim &lt;a href=&quot;https://neovim.io/doc/user/api.html#api-floatwin&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;floating windows&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this article I&#39;ll show how I used some of the Neovim features to create a quick way to get rid of my bad habits. If you never used the floating window it should be an introduction to get started with this feature and give you some inspiration to use it for your own needs.&lt;/p&gt;
&lt;h3&gt;The problem&lt;/h3&gt;
&lt;p&gt;The problematic mapping I added to my &lt;code&gt;.vimrc&lt;/code&gt; is the following:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Use s instead of &amp;lt;C-w&gt; to handle windows&lt;/span&gt;&lt;br /&gt;nnoremap s &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;C&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This remaps &lt;code&gt;s&lt;/code&gt; in normal mode to &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; which is the default mapping to access window commands. For example instead of using &lt;kbd&gt;ctrl+w&lt;/kbd&gt;&lt;kbd&gt;v&lt;/kbd&gt; and &lt;kbd&gt;ctrl+w&lt;/kbd&gt;&lt;kbd&gt;s&lt;/kbd&gt; to create splits or &lt;kbd&gt;ctrl+w&lt;/kbd&gt;&lt;kbd&gt;o&lt;/kbd&gt; to focus the current split I can use respectively &lt;kbd&gt;s&lt;/kbd&gt;&lt;kbd&gt;v&lt;/kbd&gt;, &lt;kbd&gt;s&lt;/kbd&gt;&lt;kbd&gt;s&lt;/kbd&gt; and &lt;kbd&gt;s&lt;/kbd&gt;&lt;kbd&gt;o&lt;/kbd&gt; (See &lt;a href=&quot;http://vimhelp.appspot.com/index.txt.html#CTRL-W&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h CTRL-W&lt;/code&gt;&lt;/a&gt; for the complete list of window commands if you are not familiar with them). This feels more comfortable to use a single key rather than pressing a key chord.&lt;/p&gt;
&lt;p&gt;The issue with this mapping is that &lt;code&gt;s&lt;/code&gt; is a built-in Vim command, &lt;a href=&quot;http://vimhelp.appspot.com/change.txt.html#s&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h s&lt;/code&gt;&lt;/a&gt; says:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[&amp;quot;x]s   Delete [count] characters [into register x] and start
        insert (s stands for Substitute).  Synonym for &amp;quot;cl&amp;quot;
        (not linewise).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve never found a use case where this is actually helpful (as the doc says &lt;code&gt;cl&lt;/code&gt; does almost the same thing) so remapping it didn&#39;t really affect my productivity. However when I edit files on remote severs where I haven&#39;t uploaded my config my muscle memory makes me press &lt;kbd&gt;s&lt;/kbd&gt; and I end up editing the current buffer instead of manipulating my windows which is irritating.&lt;/p&gt;
&lt;p&gt;When I decided to get rid of this nasty habit I removed the mapping from my &lt;code&gt;.vimrc&lt;/code&gt; but I also needed something to annoy me out of using it. An easy solution would have been to remap the key to &lt;a href=&quot;https://neovim.io/doc/user/intro.html#%3cNop%3e&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;&amp;lt;Nop&amp;gt;&lt;/code&gt;&lt;/a&gt; so that it does nothing but then the command silently fails and I end up executing the second part of the command (&lt;code&gt;v&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;...) which is not ideal for my workflow. That&#39;s when the floating window comes useful. I wanted to have a very visible warning saying that I used a command I shouldn&#39;t have and that I should try again with the right command.&lt;/p&gt;
&lt;h3&gt;Specifying the solution&lt;/h3&gt;
&lt;p&gt;Here is the solution I came up with:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/images/vim_breaking_habits/floating_window_notice.png&quot; alt=&quot;Floating window notice&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This floating window is shown when I press a command I want to avoid. There are a few features I wanted to have in this solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The window is spawned in the middle of Neovim UI so that I can&#39;t miss it;&lt;/li&gt;
&lt;li&gt;The borders of the window are delimited with ascii characters to make it more visible;&lt;/li&gt;
&lt;li&gt;It should be easy to close the window both with regular commands (like &lt;code&gt;:close&lt;/code&gt;) and with specific keys like &lt;kbd&gt;Escape&lt;/kbd&gt;, &lt;kbd&gt;Enter&lt;/kbd&gt; or &lt;kbd&gt;Space&lt;/kbd&gt; (which is my leader key);&lt;/li&gt;
&lt;li&gt;I should have a convenient command to &amp;quot;disable&amp;quot; several normal mode commands with this window;&lt;/li&gt;
&lt;li&gt;The message shown in the window should be multi-lines, centered and configurable depending on the disabled command.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Implementing the solution&lt;/h3&gt;
&lt;h4&gt;Spawning a floating window&lt;/h4&gt;
&lt;p&gt;The first step get to this solution is to create a function spawning a new floating window:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BreakHabitsWindow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; abort&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Define the size of the floating window&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Create the scratch buffer displayed in the floating window&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; buf &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_create_buf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Get the current UI&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ui &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_list_uis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Create the floating window&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; opts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;relative&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;editor&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;width&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;height&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;col&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ui&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;row&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ui&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;height&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;anchor&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;NW&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;style&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;minimal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_open_win&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We begin by creating the buffer which will be shown in the floating window. Neovim provides the &lt;a href=&quot;https://neovim.io/doc/user/api.html#nvim_create_buf%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;nvim_create_buf()&lt;/code&gt;&lt;/a&gt; function to create an unlisted buffer and return its reference.&lt;/p&gt;
&lt;p&gt;We then need to call &lt;a href=&quot;https://neovim.io/doc/user/api.html#nvim_list_uis%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;nvim_list_uis()&lt;/code&gt;&lt;/a&gt; to get the currently attached UIs. In my case I only have one UI (the Neovim instance open in my terminal) so I can directly use the first item of the returned list, there are probably some cases where one would want to be more thoughtful about the way to get this info but for now I want to keep things simple. We will then use &lt;code&gt;ui.width&lt;/code&gt; and &lt;code&gt;ui.height&lt;/code&gt; to get its dimensions.&lt;/p&gt;
&lt;p&gt;Finally we can use &lt;code&gt;nvim_open_win()&lt;/code&gt; to open the floating window. The function takes three arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The handle of the buffer we previously created and which will be used in the window.&lt;/li&gt;
&lt;li&gt;A boolean specifying if the window should be focused immediately after its creation. Here we set it to &lt;code&gt;v:true&lt;/code&gt; because we want the window to be focused to close it easily.&lt;/li&gt;
&lt;li&gt;A map defining the window configuration. &lt;a href=&quot;https://neovim.io/doc/user/api.html#nvim_open_win%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The doc&lt;/a&gt; describes all the available options. Here we especially make use of &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; to define the size of the window and &lt;code&gt;anchor&lt;/code&gt;, &lt;code&gt;col&lt;/code&gt; and &lt;code&gt;row&lt;/code&gt; to define where on the screen we will place it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Calling this function with &lt;code&gt;:call BreakHabitsWindow()&lt;/code&gt; will spawn a simple empty floating window:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/images/vim_breaking_habits/simple_floating_window.png&quot; alt=&quot;Simple floating window&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Showing the window borders&lt;/h4&gt;
&lt;p&gt;My second requirement is to have a box drawn in the buffer to show the borders of the window. There are a lot of different ways to achieve this but Neovim provides a convenient &lt;a href=&quot;https://neovim.io/doc/user/api.html#nvim_buf_set_lines%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;nvim_buf_set_lines()&lt;/code&gt;&lt;/a&gt; function to set the content of a buffer.&lt;/p&gt;
&lt;p&gt;We start by creating the strings to use as the first and last lines and as the ones in between thanks to &lt;a href=&quot;http://vimhelp.appspot.com/eval.txt.html#repeat%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;repeat()&lt;/code&gt;&lt;/a&gt; and put them in a list:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; create the lines to draw a box&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; horizontal_border &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; empty_line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;|&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;|&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;horizontal_border&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;height&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;empty_line&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; horizontal_border&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then use this list with &lt;code&gt;nvim_buf_set_lines()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; set the box in the buffer&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_buf_set_lines&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adding that to our &lt;code&gt;BreakHabitsWindow()&lt;/code&gt; function we get the following result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/images/vim_breaking_habits/box_floating_window.png&quot; alt=&quot;Floating window with a box&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Adding a message in the window&lt;/h4&gt;
&lt;p&gt;Next step is to show a message in the window. To do that we will add a parameter to the &lt;code&gt;BreakHabitsWindow()&lt;/code&gt;. As we want multi-lines messages this parameter will be a list of strings with each item being a line.&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Add a parameter which can then be accessed with a:message&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BreakHabitsWindow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; abort&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To add this message in the window we will use &lt;a href=&quot;https://neovim.io/doc/user/api.html#nvim_buf_set_text%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;nvim_buf_set_text()&lt;/code&gt;&lt;/a&gt;, as the doc says this function is preferred to &lt;code&gt;nvim_buf_set_lines()&lt;/code&gt; when only modifying parts of a line.&lt;/p&gt;
&lt;p&gt;The function takes as parameters a buffer reference, the position of the text to replace (&lt;code&gt;start_row&lt;/code&gt;, &lt;code&gt;start_col&lt;/code&gt;, &lt;code&gt;end_row&lt;/code&gt; and &lt;code&gt;end_col&lt;/code&gt;) as well as the text to use. So we loop over each lines of the message, compute the position and put it in the buffer:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Create the lines for the centered message and put them in the buffer&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;message&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; start_col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; end_col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; start_col &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; current_row &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; height&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; offset&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_buf_set_text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; current_row&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start_col&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; current_row&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end_col&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now call the function with the right parameter &lt;code&gt;:call BreakHabitsWindow([&amp;quot;Hello world&amp;quot;, &amp;quot;This is our floating message&amp;quot;])&lt;/code&gt; and here we have a message in the window:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/images/vim_breaking_habits/message_floating_window.png&quot; alt=&quot;Floating window with a message&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Closing the window&lt;/h4&gt;
&lt;p&gt;Once the window is spawned I want to be able to close it easily. Using &lt;a href=&quot;https://neovim.io/doc/user/windows.html#%3aclose&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:close&lt;/code&gt;&lt;/a&gt; is an option but I want something faster and it is the opportunity to explore &lt;a href=&quot;https://neovim.io/doc/user/api.html#nvim_buf_set_keymap%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;nvim_buf_set_keymap()&lt;/code&gt;&lt;/a&gt;. This function allows to set buffer-local mappings. Let&#39;s define our closing keys and make them call &lt;code&gt;:close&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Set mappings in the buffer to close the window easily&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; closingKeys &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;Esc&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;CR&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;Leader&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; closingKey &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; closingKeys&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_buf_set_keymap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;n&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; closingKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;:close&amp;lt;CR&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;silent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;nowait&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;noremap&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The parameters are as follow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The buffer handle which we already used in the &lt;code&gt;nvim_open_win()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;The mode of the mapping, here we use &lt;code&gt;n&lt;/code&gt; for normal mode mappings (this is the equivalent of using &lt;a href=&quot;http://vimhelp.appspot.com/map.txt.html#%3Anmap&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;nmap&lt;/code&gt;&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;closingKey&lt;/code&gt; variable holds the left hand side of the mapping;&lt;/li&gt;
&lt;li&gt;The 4th parameter is the right hand side of the mapping;&lt;/li&gt;
&lt;li&gt;And finally we give the mapping options in a map:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;silent&lt;/code&gt; to avoid showing the command used,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nowait&lt;/code&gt; to avoid waiting for follow up keys in the mapping&lt;/li&gt;
&lt;li&gt;and &lt;code&gt;noremap&lt;/code&gt; to create a non recursive mapping.&lt;br /&gt;
If you are not familiar with these options see &lt;a href=&quot;https://neovim.io/doc/user/map.html#%3amap-arguments&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h :map-arguments&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this added to &lt;code&gt;BreakHabitsWindow()&lt;/code&gt; we can now close the window quickly with our defined keys.&lt;/p&gt;
&lt;h4&gt;Adding some color&lt;/h4&gt;
&lt;p&gt;We can finally add a last touch to improve our UI, using &lt;a href=&quot;https://neovim.io/doc/user/api.html#nvim_win_set_option%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;nvim_win_set_option()&lt;/code&gt;&lt;/a&gt; we can define a different highlighting group for the &lt;code&gt;Normal&lt;/code&gt; highlighting group to change how the text is displayed. I went with &lt;code&gt;ErrorFloat&lt;/code&gt; because I liked how it looks but it is possible that this highlighting group is not defined on your setup. You can use &lt;a href=&quot;https://neovim.io/doc/user/syntax.html#%3ahighlight&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:highlight&lt;/code&gt;&lt;/a&gt; to list the groups available to you, and check &lt;a href=&quot;https://neovim.io/doc/user/options.html#%27winhl%27&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h &#39;winhl&#39;&lt;/code&gt;&lt;/a&gt; for more details about highlighting:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&quot; Change highlighting&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_win_set_option&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;winhl&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Normal:ErrorFloat&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here we are:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.statox.fr/images/vim_breaking_habits/colors_floating_window.png&quot; alt=&quot;Floating window with a colored message&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Creating the mappings&lt;/h4&gt;
&lt;p&gt;Now that we have a function which spawns the window as we want it the last thing to do is to remap the commands triggering our function. I wanted an easy way to create several mappings with different messages. We can do that with a simple function:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; breakhabits#&lt;span class=&quot;token function&quot;&gt;createmappings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keys&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; abort&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;keys&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_set_keymap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;n&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;:call BreakHabitsWindow(&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;)&amp;lt;CR&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;silent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;nowait&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;noremap&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes use of the &lt;a href=&quot;https://neovim.io/doc/user/api.html#nvim_set_keymap%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h nvim_set_keymap()&lt;/code&gt;&lt;/a&gt; which works like &lt;code&gt;nvim_buf_set_keymap()&lt;/code&gt; but to create global mappings rather than buffer-local ones.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There is one caveat with this method: As the &lt;code&gt;message&lt;/code&gt; list is stringified, there might be some escaping issues (for example using &lt;code&gt;&amp;quot;&amp;lt;C-w&amp;gt;&amp;quot;&lt;/code&gt; in one of the string breaks the function). There is probably a workaround for that, maybe using &lt;a href=&quot;https://neovim.io/doc/user/eval.html#funcref%28%29&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;:h funcref()&lt;/code&gt;&lt;/a&gt; but I still have to work on that.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s use the &lt;a href=&quot;https://neovim.io/doc/user/eval.html#autoload&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;code&gt;autoload&lt;/code&gt;&lt;/a&gt; feature by moving the code to &lt;code&gt;~/.vim/autoload/breakhabits.vim&lt;/code&gt; and then we can call it from our &lt;code&gt;.vimrc&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; windowHabitsKeys &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;s=&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sv&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ss&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;so&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sw&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sh&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sj&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sk&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;s&amp;lt;S-h&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;s&amp;lt;S-j&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;s&amp;lt;S-k&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;s&amp;lt;S-l&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;s&amp;lt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;s&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; windowHabitsMessage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;USE &amp;lt; C-W &gt; INSTEAD&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;BREAK BAD HABITS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; breakhabits#&lt;span class=&quot;token function&quot;&gt;createmappings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;windowHabitsKeys&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; windowHabitsMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here we have a finished solution. So far I have been pretty contented with how it works and I&#39;m already fixing my muscle memory, which was my goal! Here is the complete code:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; breakhabits#&lt;span class=&quot;token function&quot;&gt;createmappings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keys&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; abort&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;keys&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_set_keymap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;n&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;:call BreakHabitsWindow(&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;)&amp;lt;CR&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;silent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;nowait&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;noremap&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BreakHabitsWindow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; abort&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Define the size of the floating window&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; height &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Create the scratch buffer displayed in the floating window&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; buf &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_create_buf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; create the lines to draw a box&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; horizontal_border &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;+&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; empty_line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;|&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;|&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;horizontal_border&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;height&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;empty_line&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; horizontal_border&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; set the box in the buffer&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_buf_set_lines&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Create the lines for the centered message and put them in the buffer&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;message&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; start_col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; end_col &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; start_col &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; current_row &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; height&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; offset&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_buf_set_text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; current_row&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start_col&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; current_row&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end_col&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Set mappings in the buffer to close the window easily&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; closingKeys &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;Esc&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;CR&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;Leader&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; closingKey &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; closingKeys&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_buf_set_keymap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;n&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; closingKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;:close&amp;lt;CR&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;silent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;nowait&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;noremap&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;endfor&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Create the floating window&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ui &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_list_uis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; opts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;relative&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;editor&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;width&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; width&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;height&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;col&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ui&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;width&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;row&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ui&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;height&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;anchor&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;NW&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token string&quot;&gt;&#39;style&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;minimal&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;                \ &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_open_win&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; opts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;&quot; Change highlighting&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;nvim_win_set_option&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;winhl&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Normal:ErrorFloat&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;endfunction&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;What about creating a plugin?&lt;/h3&gt;
&lt;p&gt;I thought about turning that into a plugin available on github but I decided not to go with it for two reasons:&lt;/p&gt;
&lt;p&gt;Firstly this is my first time messing with these Neovim features and I&#39;m not entirely sure that I followed every best practices with them. I don&#39;t feel like maintaining a public plugin with this code.&lt;/p&gt;
&lt;p&gt;Secondly -and this is more important- I think that this kind of feature is pretty sensitive. I have seen countless new vim users following ill-advised plugins like &lt;a href=&quot;https://github.com/takac/vim-hardtime&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vim-hardtime&lt;/a&gt; or &lt;em&gt;worse&lt;/em&gt; &lt;a href=&quot;https://github.com/wikitopian/hardmode&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;vim-hardmode&lt;/a&gt;. More often than not people using them don&#39;t understand the larger picture of their issue and these plugins get in their way instead of helping them improving their workflow. I don&#39;t want to create another instance of this kind of plugin.&lt;/p&gt;
&lt;h3&gt;Make it yours!&lt;/h3&gt;
&lt;p&gt;I hope that this article was useful for you if you never used the floating window. There are already some plugins making use of this feature like &lt;a href=&quot;https://www.reddit.com/r/neovim/comments/b1pctc/float_window_support_with_cocnvim/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;coc&lt;/a&gt; or &lt;a href=&quot;https://github.com/junegunn/fzf.vim/issues/664&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;fzf&lt;/a&gt; but I&#39;m sure there are other more lightweight usages you can add to your config: Don&#39;t hesitate to share them with me!&lt;/p&gt;
</content>
  </entry>
</feed>
